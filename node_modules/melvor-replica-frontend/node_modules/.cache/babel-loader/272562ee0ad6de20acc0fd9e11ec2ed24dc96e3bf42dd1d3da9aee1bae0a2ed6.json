{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\Desktop\\\\coding\\\\WaveringTides-master\\\\frontend\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\nimport { createMockItems } from '../utils/mockData';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n/**\n * Custom hook to access the GameContext\n */\nexport const useGameContext = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGameContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/**\n * GameProvider component - Provides game state and operations to the entire app\n */\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [gameState, setGameState] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [playerId, setPlayerId] = useState('player1'); // Default player ID\n\n  /**\n   * Load game data from API or create a new game\n   */\n  const loadGameData = useCallback(async () => {\n    console.log('Loading game data...');\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try to load from localStorage first to get the player ID\n      const savedPlayerId = localStorage.getItem('playerId');\n      if (savedPlayerId) {\n        setPlayerId(savedPlayerId);\n      }\n\n      // Try to fetch from API\n      try {\n        console.log('Attempting to fetch from API...');\n        const gameData = await api.getGame();\n        if (gameData) {\n          console.log('Game data loaded from API:', gameData);\n          setGameState(gameData);\n          setLoading(false);\n          return;\n        }\n      } catch (apiError) {\n        console.log('API not available, falling back to local storage', apiError);\n\n        // Try to load from localStorage if API fails\n        const savedGame = localStorage.getItem('gameState');\n        if (savedGame) {\n          try {\n            const parsedGameState = JSON.parse(savedGame);\n            console.log('Game data loaded from localStorage:', parsedGameState);\n            setGameState(parsedGameState);\n            setLoading(false);\n            return;\n          } catch (parseError) {\n            console.error('Error parsing saved game data:', parseError);\n            // If parsing fails, remove corrupted data\n            localStorage.removeItem('gameState');\n          }\n        }\n      }\n\n      // If no data from API or localStorage, create a new game\n      console.log('Creating new game...');\n      createNewGame();\n    } catch (err) {\n      console.error('Error loading game:', err);\n      setError('Failed to load game data. Please try again.');\n      // Create a new game even if loading fails to prevent a blank screen\n      createNewGame();\n    } finally {\n      // Ensure loading is set to false regardless of the outcome\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Create a new game with default values\n   */\n  const createNewGame = () => {\n    // Create mock skills\n    const mockSkills = {\n      [SKILL_IDS.WOODCUTTING]: {\n        id: SKILL_IDS.WOODCUTTING,\n        name: 'Woodcutting',\n        level: 1,\n        xp: 0,\n        xpPerAction: 5,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Faster woodcutting speed',\n            '10': 'Double logs chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.FISHING]: {\n        id: SKILL_IDS.FISHING,\n        name: 'Fishing',\n        level: 1,\n        xp: 0,\n        xpPerAction: 7,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Better fish quality',\n            '10': 'Double fish chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.MINING]: {\n        id: SKILL_IDS.MINING,\n        name: 'Mining',\n        level: 1,\n        xp: 0,\n        xpPerAction: 6,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {}\n        }\n      }\n    };\n\n    // Convert ITEMS to proper Item type\n    const itemsWithProperType = createMockItems();\n\n    // Create mock inventory\n    const mockInventory = {\n      [ITEM_IDS.LOGS]: {\n        ...itemsWithProperType[ITEM_IDS.LOGS],\n        quantity: 5\n      },\n      [ITEM_IDS.RAW_FISH]: {\n        ...itemsWithProperType[ITEM_IDS.RAW_FISH],\n        quantity: 3\n      }\n    };\n    const mockData = {\n      player: {\n        id: playerId,\n        gold: 100,\n        lastUpdate: Date.now(),\n        skills: mockSkills,\n        inventory: mockInventory,\n        equipment: {},\n        combat: {\n          isFighting: false\n        }\n      }\n    };\n    console.log('New game created:', mockData);\n    setGameState(mockData);\n    localStorage.setItem('playerId', playerId);\n    localStorage.setItem('gameState', JSON.stringify(mockData));\n    setLoading(false);\n  };\n\n  /**\n   * Refresh game state from API\n   */\n  const refreshGameState = async () => {\n    try {\n      setLoading(true);\n      const gameData = await api.getGame();\n      if (gameData) {\n        setGameState(gameData);\n      }\n    } catch (err) {\n      console.error('Error refreshing game state:', err);\n      // Don't set an error message here to avoid disrupting the UI\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Initialize the game on component mount\n   */\n  useEffect(() => {\n    loadGameData();\n\n    // Set up autosave\n    const saveInterval = setInterval(() => {\n      if (gameState) {\n        saveGame();\n      }\n    }, 60000); // Save every minute\n\n    return () => clearInterval(saveInterval);\n  }, [loadGameData]);\n\n  /**\n   * Update the game state\n   */\n  const updateGameState = useCallback(updater => {\n    setGameState(prev => {\n      const newState = updater(prev);\n\n      // Save immediately on state update\n      if (newState) {\n        localStorage.setItem('gameState', JSON.stringify(newState));\n      }\n      return newState;\n    });\n  }, []);\n\n  /**\n   * Save the game to localStorage and API\n   */\n  const saveGame = useCallback(async () => {\n    if (!gameState) return;\n    try {\n      // Update last saved timestamp\n      const stateWithTimestamp = {\n        ...gameState,\n        lastSaved: Date.now()\n      };\n      localStorage.setItem('gameState', JSON.stringify(stateWithTimestamp));\n\n      // Try to save to API\n      try {\n        // This is where we'd call the API to update the game state\n        console.log('Saving game to API...');\n        await api.updateGame(stateWithTimestamp);\n      } catch (apiError) {\n        console.error('Error saving to API, saved locally only:', apiError);\n      }\n    } catch (err) {\n      console.error('Error saving game:', err);\n      setError('Failed to save game data');\n    }\n  }, [gameState]);\n\n  /**\n   * Reset the game to default values\n   */\n  const resetGame = useCallback(() => {\n    localStorage.removeItem('gameState');\n    createNewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      gameState,\n      loading,\n      error,\n      updateGameState,\n      saveGame,\n      resetGame,\n      refreshGameState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"BwzBH0ULVrj6AiyG0nIQbaBBclI=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","SKILL_IDS","ITEM_IDS","createMockItems","api","jsxDEV","_jsxDEV","GameContext","undefined","useGameContext","_s","context","Error","GameProvider","children","_s2","gameState","setGameState","loading","setLoading","error","setError","playerId","setPlayerId","loadGameData","console","log","savedPlayerId","localStorage","getItem","gameData","getGame","apiError","savedGame","parsedGameState","JSON","parse","parseError","removeItem","createNewGame","err","mockSkills","WOODCUTTING","id","name","level","xp","xpPerAction","isActive","mastery","unlocks","FISHING","MINING","itemsWithProperType","mockInventory","LOGS","quantity","RAW_FISH","mockData","player","gold","lastUpdate","Date","now","skills","inventory","equipment","combat","isFighting","setItem","stringify","refreshGameState","saveInterval","setInterval","saveGame","clearInterval","updateGameState","updater","prev","newState","stateWithTimestamp","lastSaved","updateGame","resetGame","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { GameState, Item, Skill } from '../types';\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\nimport { createMockItems } from '../utils/mockData';\nimport api from '../services/api';\n\ninterface GameContextProps {\n  gameState: GameState | null;\n  loading: boolean;\n  error: string | null;\n  updateGameState: (updater: (prevState: GameState | null) => GameState | null) => void;\n  saveGame: () => void;\n  resetGame: () => void;\n  refreshGameState: () => Promise<void>;\n}\n\nconst GameContext = createContext<GameContextProps | undefined>(undefined);\n\n/**\n * Custom hook to access the GameContext\n */\nexport const useGameContext = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n\ninterface GameProviderProps {\n  children: ReactNode;\n}\n\n/**\n * GameProvider component - Provides game state and operations to the entire app\n */\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\n  const [gameState, setGameState] = useState<GameState | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [playerId, setPlayerId] = useState<string>('player1'); // Default player ID\n\n  /**\n   * Load game data from API or create a new game\n   */\n  const loadGameData = useCallback(async () => {\n    console.log('Loading game data...');\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Try to load from localStorage first to get the player ID\n      const savedPlayerId = localStorage.getItem('playerId');\n      if (savedPlayerId) {\n        setPlayerId(savedPlayerId);\n      }\n      \n      // Try to fetch from API\n      try {\n        console.log('Attempting to fetch from API...');\n        const gameData = await api.getGame();\n        if (gameData) {\n          console.log('Game data loaded from API:', gameData);\n          setGameState(gameData);\n          setLoading(false);\n          return;\n        }\n      } catch (apiError) {\n        console.log('API not available, falling back to local storage', apiError);\n        \n        // Try to load from localStorage if API fails\n        const savedGame = localStorage.getItem('gameState');\n        if (savedGame) {\n          try {\n            const parsedGameState = JSON.parse(savedGame);\n            console.log('Game data loaded from localStorage:', parsedGameState);\n            setGameState(parsedGameState);\n            setLoading(false);\n            return;\n          } catch (parseError) {\n            console.error('Error parsing saved game data:', parseError);\n            // If parsing fails, remove corrupted data\n            localStorage.removeItem('gameState');\n          }\n        }\n      }\n      \n      // If no data from API or localStorage, create a new game\n      console.log('Creating new game...');\n      createNewGame();\n    } catch (err) {\n      console.error('Error loading game:', err);\n      setError('Failed to load game data. Please try again.');\n      // Create a new game even if loading fails to prevent a blank screen\n      createNewGame();\n    } finally {\n      // Ensure loading is set to false regardless of the outcome\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Create a new game with default values\n   */\n  const createNewGame = () => {\n    // Create mock skills\n    const mockSkills: { [id: string]: Skill } = {\n      [SKILL_IDS.WOODCUTTING]: {\n        id: SKILL_IDS.WOODCUTTING,\n        name: 'Woodcutting',\n        level: 1,\n        xp: 0,\n        xpPerAction: 5,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Faster woodcutting speed',\n            '10': 'Double logs chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.FISHING]: {\n        id: SKILL_IDS.FISHING,\n        name: 'Fishing',\n        level: 1,\n        xp: 0,\n        xpPerAction: 7,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Better fish quality',\n            '10': 'Double fish chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.MINING]: {\n        id: SKILL_IDS.MINING,\n        name: 'Mining',\n        level: 1,\n        xp: 0,\n        xpPerAction: 6,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {}\n        }\n      }\n    };\n\n    // Convert ITEMS to proper Item type\n    const itemsWithProperType = createMockItems();\n\n    // Create mock inventory\n    const mockInventory: { [id: string]: Item } = {\n      [ITEM_IDS.LOGS]: { ...itemsWithProperType[ITEM_IDS.LOGS], quantity: 5 },\n      [ITEM_IDS.RAW_FISH]: { ...itemsWithProperType[ITEM_IDS.RAW_FISH], quantity: 3 }\n    };\n\n    const mockData: GameState = {\n      player: {\n        id: playerId,\n        gold: 100,\n        lastUpdate: Date.now(),\n        skills: mockSkills,\n        inventory: mockInventory,\n        equipment: {},\n        combat: {\n          isFighting: false\n        }\n      }\n    };\n    \n    console.log('New game created:', mockData);\n    setGameState(mockData);\n    localStorage.setItem('playerId', playerId);\n    localStorage.setItem('gameState', JSON.stringify(mockData));\n    setLoading(false);\n  };\n\n  /**\n   * Refresh game state from API\n   */\n  const refreshGameState = async () => {\n    try {\n      setLoading(true);\n      const gameData = await api.getGame();\n      if (gameData) {\n        setGameState(gameData);\n      }\n    } catch (err) {\n      console.error('Error refreshing game state:', err);\n      // Don't set an error message here to avoid disrupting the UI\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Initialize the game on component mount\n   */\n  useEffect(() => {\n    loadGameData();\n    \n    // Set up autosave\n    const saveInterval = setInterval(() => {\n      if (gameState) {\n        saveGame();\n      }\n    }, 60000); // Save every minute\n    \n    return () => clearInterval(saveInterval);\n  }, [loadGameData]);\n\n  /**\n   * Update the game state\n   */\n  const updateGameState = useCallback((updater: (prevState: GameState | null) => GameState | null) => {\n    setGameState(prev => {\n      const newState = updater(prev);\n      \n      // Save immediately on state update\n      if (newState) {\n        localStorage.setItem('gameState', JSON.stringify(newState));\n      }\n      \n      return newState;\n    });\n  }, []);\n\n  /**\n   * Save the game to localStorage and API\n   */\n  const saveGame = useCallback(async () => {\n    if (!gameState) return;\n    \n    try {\n      // Update last saved timestamp\n      const stateWithTimestamp = {\n        ...gameState,\n        lastSaved: Date.now()\n      };\n      \n      localStorage.setItem('gameState', JSON.stringify(stateWithTimestamp));\n      \n      // Try to save to API\n      try {\n        // This is where we'd call the API to update the game state\n        console.log('Saving game to API...');\n        await api.updateGame(stateWithTimestamp);\n      } catch (apiError) {\n        console.error('Error saving to API, saved locally only:', apiError);\n      }\n    } catch (err) {\n      console.error('Error saving game:', err);\n      setError('Failed to save game data');\n    }\n  }, [gameState]);\n\n  /**\n   * Reset the game to default values\n   */\n  const resetGame = useCallback(() => {\n    localStorage.removeItem('gameState');\n    createNewGame();\n  }, []);\n\n  return (\n    <GameContext.Provider \n      value={{ \n        gameState, \n        loading, \n        error,\n        updateGameState,\n        saveGame,\n        resetGame,\n        refreshGameState\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAaC,WAAW,QAAQ,OAAO;AAErG,SAASC,SAAS,EAAEC,QAAQ,QAAQ,cAAc;AAClD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,OAAOC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAYlC,MAAMC,WAAW,gBAAGX,aAAa,CAA+BY,SAAS,CAAC;;AAE1E;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,OAAO,GAAGd,UAAU,CAACU,WAAW,CAAC;EACvC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,mDAAmD,CAAC;EACtE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,cAAc;AAY3B;AACA;AACA;AACA,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAmB,IAAI,CAAC;EAClE,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAS,SAAS,CAAC,CAAC,CAAC;;EAE7D;AACF;AACA;EACE,MAAM0B,YAAY,GAAGxB,WAAW,CAAC,YAAY;IAC3CyB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,IAAI;MACFP,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,MAAMM,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MACtD,IAAIF,aAAa,EAAE;QACjBJ,WAAW,CAACI,aAAa,CAAC;MAC5B;;MAEA;MACA,IAAI;QACFF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,MAAMI,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,OAAO,CAAC,CAAC;QACpC,IAAID,QAAQ,EAAE;UACZL,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEI,QAAQ,CAAC;UACnDb,YAAY,CAACa,QAAQ,CAAC;UACtBX,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;MACF,CAAC,CAAC,OAAOa,QAAQ,EAAE;QACjBP,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEM,QAAQ,CAAC;;QAEzE;QACA,MAAMC,SAAS,GAAGL,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QACnD,IAAII,SAAS,EAAE;UACb,IAAI;YACF,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC;YAC7CR,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEQ,eAAe,CAAC;YACnEjB,YAAY,CAACiB,eAAe,CAAC;YAC7Bf,UAAU,CAAC,KAAK,CAAC;YACjB;UACF,CAAC,CAAC,OAAOkB,UAAU,EAAE;YACnBZ,OAAO,CAACL,KAAK,CAAC,gCAAgC,EAAEiB,UAAU,CAAC;YAC3D;YACAT,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;UACtC;QACF;MACF;;MAEA;MACAb,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnCa,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZf,OAAO,CAACL,KAAK,CAAC,qBAAqB,EAAEoB,GAAG,CAAC;MACzCnB,QAAQ,CAAC,6CAA6C,CAAC;MACvD;MACAkB,aAAa,CAAC,CAAC;IACjB,CAAC,SAAS;MACR;MACApB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACA,MAAME,UAAmC,GAAG;MAC1C,CAACxC,SAAS,CAACyC,WAAW,GAAG;QACvBC,EAAE,EAAE1C,SAAS,CAACyC,WAAW;QACzBE,IAAI,EAAE,aAAa;QACnBC,KAAK,EAAE,CAAC;QACRC,EAAE,EAAE,CAAC;QACLC,WAAW,EAAE,CAAC;QACdC,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAE;UACPJ,KAAK,EAAE,CAAC;UACRC,EAAE,EAAE,CAAC;UACLI,OAAO,EAAE;YACP,GAAG,EAAE,0BAA0B;YAC/B,IAAI,EAAE;UACR;QACF;MACF,CAAC;MACD,CAACjD,SAAS,CAACkD,OAAO,GAAG;QACnBR,EAAE,EAAE1C,SAAS,CAACkD,OAAO;QACrBP,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,CAAC;QACRC,EAAE,EAAE,CAAC;QACLC,WAAW,EAAE,CAAC;QACdC,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAE;UACPJ,KAAK,EAAE,CAAC;UACRC,EAAE,EAAE,CAAC;UACLI,OAAO,EAAE;YACP,GAAG,EAAE,qBAAqB;YAC1B,IAAI,EAAE;UACR;QACF;MACF,CAAC;MACD,CAACjD,SAAS,CAACmD,MAAM,GAAG;QAClBT,EAAE,EAAE1C,SAAS,CAACmD,MAAM;QACpBR,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE,CAAC;QACRC,EAAE,EAAE,CAAC;QACLC,WAAW,EAAE,CAAC;QACdC,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAE;UACPJ,KAAK,EAAE,CAAC;UACRC,EAAE,EAAE,CAAC;UACLI,OAAO,EAAE,CAAC;QACZ;MACF;IACF,CAAC;;IAED;IACA,MAAMG,mBAAmB,GAAGlD,eAAe,CAAC,CAAC;;IAE7C;IACA,MAAMmD,aAAqC,GAAG;MAC5C,CAACpD,QAAQ,CAACqD,IAAI,GAAG;QAAE,GAAGF,mBAAmB,CAACnD,QAAQ,CAACqD,IAAI,CAAC;QAAEC,QAAQ,EAAE;MAAE,CAAC;MACvE,CAACtD,QAAQ,CAACuD,QAAQ,GAAG;QAAE,GAAGJ,mBAAmB,CAACnD,QAAQ,CAACuD,QAAQ,CAAC;QAAED,QAAQ,EAAE;MAAE;IAChF,CAAC;IAED,MAAME,QAAmB,GAAG;MAC1BC,MAAM,EAAE;QACNhB,EAAE,EAAErB,QAAQ;QACZsC,IAAI,EAAE,GAAG;QACTC,UAAU,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACtBC,MAAM,EAAEvB,UAAU;QAClBwB,SAAS,EAAEX,aAAa;QACxBY,SAAS,EAAE,CAAC,CAAC;QACbC,MAAM,EAAE;UACNC,UAAU,EAAE;QACd;MACF;IACF,CAAC;IAED3C,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEgC,QAAQ,CAAC;IAC1CzC,YAAY,CAACyC,QAAQ,CAAC;IACtB9B,YAAY,CAACyC,OAAO,CAAC,UAAU,EAAE/C,QAAQ,CAAC;IAC1CM,YAAY,CAACyC,OAAO,CAAC,WAAW,EAAElC,IAAI,CAACmC,SAAS,CAACZ,QAAQ,CAAC,CAAC;IAC3DvC,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;;EAED;AACF;AACA;EACE,MAAMoD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACFpD,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMW,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,OAAO,CAAC,CAAC;MACpC,IAAID,QAAQ,EAAE;QACZb,YAAY,CAACa,QAAQ,CAAC;MACxB;IACF,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZf,OAAO,CAACL,KAAK,CAAC,8BAA8B,EAAEoB,GAAG,CAAC;MAClD;IACF,CAAC,SAAS;MACRrB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;AACF;AACA;EACEpB,SAAS,CAAC,MAAM;IACdyB,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMgD,YAAY,GAAGC,WAAW,CAAC,MAAM;MACrC,IAAIzD,SAAS,EAAE;QACb0D,QAAQ,CAAC,CAAC;MACZ;IACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX,OAAO,MAAMC,aAAa,CAACH,YAAY,CAAC;EAC1C,CAAC,EAAE,CAAChD,YAAY,CAAC,CAAC;;EAElB;AACF;AACA;EACE,MAAMoD,eAAe,GAAG5E,WAAW,CAAE6E,OAA0D,IAAK;IAClG5D,YAAY,CAAC6D,IAAI,IAAI;MACnB,MAAMC,QAAQ,GAAGF,OAAO,CAACC,IAAI,CAAC;;MAE9B;MACA,IAAIC,QAAQ,EAAE;QACZnD,YAAY,CAACyC,OAAO,CAAC,WAAW,EAAElC,IAAI,CAACmC,SAAS,CAACS,QAAQ,CAAC,CAAC;MAC7D;MAEA,OAAOA,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAML,QAAQ,GAAG1E,WAAW,CAAC,YAAY;IACvC,IAAI,CAACgB,SAAS,EAAE;IAEhB,IAAI;MACF;MACA,MAAMgE,kBAAkB,GAAG;QACzB,GAAGhE,SAAS;QACZiE,SAAS,EAAEnB,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC;MAEDnC,YAAY,CAACyC,OAAO,CAAC,WAAW,EAAElC,IAAI,CAACmC,SAAS,CAACU,kBAAkB,CAAC,CAAC;;MAErE;MACA,IAAI;QACF;QACAvD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpC,MAAMtB,GAAG,CAAC8E,UAAU,CAACF,kBAAkB,CAAC;MAC1C,CAAC,CAAC,OAAOhD,QAAQ,EAAE;QACjBP,OAAO,CAACL,KAAK,CAAC,0CAA0C,EAAEY,QAAQ,CAAC;MACrE;IACF,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZf,OAAO,CAACL,KAAK,CAAC,oBAAoB,EAAEoB,GAAG,CAAC;MACxCnB,QAAQ,CAAC,0BAA0B,CAAC;IACtC;EACF,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;;EAEf;AACF;AACA;EACE,MAAMmE,SAAS,GAAGnF,WAAW,CAAC,MAAM;IAClC4B,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;IACpCC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjC,OAAA,CAACC,WAAW,CAAC6E,QAAQ;IACnBC,KAAK,EAAE;MACLrE,SAAS;MACTE,OAAO;MACPE,KAAK;MACLwD,eAAe;MACfF,QAAQ;MACRS,SAAS;MACTZ;IACF,CAAE;IAAAzD,QAAA,EAEDA;EAAQ;IAAAwE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1E,GAAA,CA1PWF,YAAyC;AAAA6E,EAAA,GAAzC7E,YAAyC;AAAA,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
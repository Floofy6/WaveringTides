{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { calculateXpForLevel } from '../features/skills/SkillProgress';\n\n/**\r\n * useSkills hook - Manages skill-related state and operations\r\n */\nexport const useSkills = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState\n  } = useGameContext();\n  const [currentSkillId, setCurrentSkillId] = useState(null);\n  const skills = (gameState === null || gameState === void 0 ? void 0 : gameState.player.skills) || {};\n  const currentSkill = currentSkillId ? skills[currentSkillId] : null;\n\n  /**\r\n   * Select a skill to view its details\r\n   */\n  const selectSkill = useCallback(skillId => {\n    setCurrentSkillId(skillId);\n  }, []);\n\n  /**\r\n   * Start a skill activity\r\n   */\n  const startSkill = useCallback(skillId => {\n    if (!gameState) return;\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: true,\n        lastActiveTime: Date.now()\n      }\n    };\n    updateGameState(prevState => {\n      if (!prevState) return null;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\r\n   * Stop a skill activity\r\n   */\n  const stopSkill = useCallback(skillId => {\n    if (!gameState) return;\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: false\n      }\n    };\n    updateGameState(prevState => {\n      if (!prevState) return null;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\r\n   * Add experience to a skill and handle level ups\r\n   */\n  const addExperience = useCallback((skillId, amount) => {\n    if (!gameState) return;\n    const skill = gameState.player.skills[skillId];\n    if (!skill) return;\n\n    // Assuming Skill type has xp and xpToNextLevel properties\n    let newXp = skill.xp + amount;\n    let newLevel = skill.level;\n    let newXpToNextLevel = skill.xpToNextLevel;\n\n    // Check for level up\n    while (newXp >= newXpToNextLevel) {\n      newXp -= newXpToNextLevel;\n      newLevel++;\n      // Calculate new XP required for next level (example formula)\n      newXpToNextLevel = Math.floor(newXpToNextLevel * 1.1);\n    }\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...skill,\n        level: newLevel,\n        xp: newXp,\n        xpToNextLevel: newXpToNextLevel\n      }\n    };\n    updateGameState(prevState => {\n      if (!prevState) return null;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\r\n   * Get a list of all active skills\r\n   */\n  const getActiveSkills = useCallback(() => {\n    if (!gameState) return [];\n    return Object.keys(gameState.player.skills).filter(skillId => gameState.player.skills[skillId].isActive);\n  }, [gameState]);\n\n  /**\r\n   * Check if a skill has reached a specific level\r\n   */\n  const hasReachedLevel = useCallback((skillId, level) => {\n    if (!gameState) return false;\n    const skill = gameState.player.skills[skillId];\n    return skill ? skill.level >= level : false;\n  }, [gameState]);\n  return {\n    skills,\n    currentSkill,\n    selectSkill,\n    startSkill,\n    stopSkill,\n    addExperience,\n    getActiveSkills,\n    hasReachedLevel\n  };\n};\n\n/**\r\n * Calculate a new skill state after adding XP\r\n * Pure function for better testability\r\n */\n_s(useSkills, \"vdBqadz/aNhkXCePgvjlzt2KNRc=\", false, function () {\n  return [useGameContext];\n});\nexport const calculateNewSkillState = (skill, xpAmount) => {\n  const newXp = skill.xp + xpAmount;\n  let newLevel = skill.level;\n\n  // Check for level ups\n  while (newXp >= calculateXpForLevel(newLevel + 1)) {\n    newLevel++;\n  }\n\n  // If mastery exists, update it as well\n  let newMastery = skill.mastery;\n  if (skill.mastery) {\n    // Typically mastery gains a percentage of main XP\n    const masteryXpGain = Math.floor(xpAmount * 0.1);\n    const newMasteryXp = skill.mastery.xp + masteryXpGain;\n    let newMasteryLevel = skill.mastery.level;\n\n    // Check for mastery level ups\n    while (newMasteryXp >= calculateMasteryXpForLevel(newMasteryLevel + 1)) {\n      newMasteryLevel++;\n    }\n    newMastery = {\n      ...skill.mastery,\n      level: newMasteryLevel,\n      xp: newMasteryXp\n    };\n  }\n  return {\n    ...skill,\n    level: newLevel,\n    xp: newXp,\n    mastery: newMastery\n  };\n};\n\n/**\r\n * Calculate XP required for a mastery level\r\n */\nexport const calculateMasteryXpForLevel = level => {\n  return Math.floor(150 * Math.pow(level, 1.8));\n};","map":{"version":3,"names":["useState","useCallback","useGameContext","calculateXpForLevel","useSkills","_s","gameState","updateGameState","currentSkillId","setCurrentSkillId","skills","player","currentSkill","selectSkill","skillId","startSkill","updatedSkills","isActive","lastActiveTime","Date","now","prevState","stopSkill","addExperience","amount","skill","newXp","xp","newLevel","level","newXpToNextLevel","xpToNextLevel","Math","floor","getActiveSkills","Object","keys","filter","hasReachedLevel","calculateNewSkillState","xpAmount","newMastery","mastery","masteryXpGain","newMasteryXp","newMasteryLevel","calculateMasteryXpForLevel","pow"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/hooks/useSkills.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { useGameContext } from '../context/GameContext';\r\nimport { GameState, Skill } from '../types';\r\nimport { calculateXpForLevel } from '../features/skills/SkillProgress';\r\n\r\n/**\r\n * useSkills hook - Manages skill-related state and operations\r\n */\r\nexport const useSkills = () => {\r\n  const { gameState, updateGameState } = useGameContext();\r\n  const [currentSkillId, setCurrentSkillId] = useState<string | null>(null);\r\n  \r\n  const skills = gameState?.player.skills || {};\r\n  const currentSkill = currentSkillId ? skills[currentSkillId] : null;\r\n  \r\n  /**\r\n   * Select a skill to view its details\r\n   */\r\n  const selectSkill = useCallback((skillId: string) => {\r\n    setCurrentSkillId(skillId);\r\n  }, []);\r\n  \r\n  /**\r\n   * Start a skill activity\r\n   */\r\n  const startSkill = useCallback((skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...gameState.player.skills[skillId],\r\n        isActive: true,\r\n        lastActiveTime: Date.now()\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Stop a skill activity\r\n   */\r\n  const stopSkill = useCallback((skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...gameState.player.skills[skillId],\r\n        isActive: false\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Add experience to a skill and handle level ups\r\n   */\r\n  const addExperience = useCallback((skillId: string, amount: number) => {\r\n    if (!gameState) return;\r\n    \r\n    const skill = gameState.player.skills[skillId];\r\n    if (!skill) return;\r\n    \r\n    // Assuming Skill type has xp and xpToNextLevel properties\r\n    let newXp = skill.xp + amount;\r\n    let newLevel = skill.level;\r\n    let newXpToNextLevel = skill.xpToNextLevel;\r\n    \r\n    // Check for level up\r\n    while (newXp >= newXpToNextLevel) {\r\n      newXp -= newXpToNextLevel;\r\n      newLevel++;\r\n      // Calculate new XP required for next level (example formula)\r\n      newXpToNextLevel = Math.floor(newXpToNextLevel * 1.1);\r\n    }\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...skill,\r\n        level: newLevel,\r\n        xp: newXp,\r\n        xpToNextLevel: newXpToNextLevel\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Get a list of all active skills\r\n   */\r\n  const getActiveSkills = useCallback(() => {\r\n    if (!gameState) return [];\r\n    \r\n    return Object.keys(gameState.player.skills).filter(\r\n      skillId => gameState.player.skills[skillId].isActive\r\n    );\r\n  }, [gameState]);\r\n  \r\n  /**\r\n   * Check if a skill has reached a specific level\r\n   */\r\n  const hasReachedLevel = useCallback((skillId: string, level: number) => {\r\n    if (!gameState) return false;\r\n    \r\n    const skill = gameState.player.skills[skillId];\r\n    return skill ? skill.level >= level : false;\r\n  }, [gameState]);\r\n  \r\n  return {\r\n    skills,\r\n    currentSkill,\r\n    selectSkill,\r\n    startSkill,\r\n    stopSkill,\r\n    addExperience,\r\n    getActiveSkills,\r\n    hasReachedLevel\r\n  };\r\n};\r\n\r\n/**\r\n * Calculate a new skill state after adding XP\r\n * Pure function for better testability\r\n */\r\nexport const calculateNewSkillState = (skill: Skill, xpAmount: number): Skill => {\r\n  const newXp = skill.xp + xpAmount;\r\n  let newLevel = skill.level;\r\n  \r\n  // Check for level ups\r\n  while (newXp >= calculateXpForLevel(newLevel + 1)) {\r\n    newLevel++;\r\n  }\r\n  \r\n  // If mastery exists, update it as well\r\n  let newMastery = skill.mastery;\r\n  if (skill.mastery) {\r\n    // Typically mastery gains a percentage of main XP\r\n    const masteryXpGain = Math.floor(xpAmount * 0.1); \r\n    const newMasteryXp = skill.mastery.xp + masteryXpGain;\r\n    let newMasteryLevel = skill.mastery.level;\r\n    \r\n    // Check for mastery level ups\r\n    while (newMasteryXp >= calculateMasteryXpForLevel(newMasteryLevel + 1)) {\r\n      newMasteryLevel++;\r\n    }\r\n    \r\n    newMastery = {\r\n      ...skill.mastery,\r\n      level: newMasteryLevel,\r\n      xp: newMasteryXp\r\n    };\r\n  }\r\n  \r\n  return {\r\n    ...skill,\r\n    level: newLevel,\r\n    xp: newXp,\r\n    mastery: newMastery\r\n  };\r\n};\r\n\r\n/**\r\n * Calculate XP required for a mastery level\r\n */\r\nexport const calculateMasteryXpForLevel = (level: number): number => {\r\n  return Math.floor(150 * Math.pow(level, 1.8));\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
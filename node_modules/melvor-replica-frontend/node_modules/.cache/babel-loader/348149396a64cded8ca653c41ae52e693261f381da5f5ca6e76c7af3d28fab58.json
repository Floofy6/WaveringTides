{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { useSkills } from '../hooks/useSkills';\nimport { useGameContext } from '../context/GameContext';\n\n/**\r\n * GameTick component - Handles game updates at regular intervals\r\n * This component doesn't render anything but creates a game loop\r\n */\nconst GameTick = () => {\n  _s();\n  const {\n    getActiveSkills,\n    addExperience,\n    addMasteryExperience\n  } = useSkills();\n  const {\n    gameState\n  } = useGameContext();\n  const lastUpdateRef = useRef(Date.now());\n\n  // Set up game tick for recurring actions\n  useEffect(() => {\n    console.log('GameTick initialized');\n    const tickInterval = 1000; // Update every second\n\n    const gameLoop = () => {\n      const now = Date.now();\n      const deltaTime = now - lastUpdateRef.current;\n      lastUpdateRef.current = now;\n\n      // Get all active skills\n      const activeSkills = getActiveSkills();\n      if (activeSkills.length > 0) {\n        console.log('Active skills:', activeSkills);\n      }\n\n      // Update each active skill\n      activeSkills.forEach(skillId => {\n        var _gameState$player, _gameState$player$ski;\n        const skill = gameState === null || gameState === void 0 ? void 0 : (_gameState$player = gameState.player) === null || _gameState$player === void 0 ? void 0 : (_gameState$player$ski = _gameState$player.skills) === null || _gameState$player$ski === void 0 ? void 0 : _gameState$player$ski[skillId];\n        if (skill) {\n          // Calculate XP gain based on skill's xpPerAction and time elapsed\n          // Increased XP gain for more noticeable progression (20x faster for testing)\n          const xpGain = skill.xpPerAction * (deltaTime / 1000) * 20;\n          console.log(`Adding ${xpGain} XP to ${skill.name}`);\n\n          // Add XP to the skill\n          addExperience(skillId, xpGain);\n\n          // If the skill has mastery, add mastery experience as well\n          if (skill.mastery) {\n            // Mastery XP is typically a fraction of regular XP\n            const masteryXpGain = xpGain * 0.5;\n            addMasteryExperience(skillId, masteryXpGain);\n          }\n        } else {\n          console.error(`Skill ${skillId} is active but not found in gameState`);\n        }\n      });\n    };\n\n    // Start the game loop\n    const timer = setInterval(gameLoop, tickInterval);\n    console.log('Game loop started with interval:', tickInterval);\n\n    // Clean up on unmount\n    return () => {\n      console.log('GameTick component unmounted, clearing interval');\n      clearInterval(timer);\n    };\n  }, [gameState, getActiveSkills, addExperience, addMasteryExperience]);\n\n  // This component doesn't render anything\n  return null;\n};\n_s(GameTick, \"VAB1MYmuL91fAed0TnsLcj4i/JA=\", false, function () {\n  return [useSkills, useGameContext];\n});\n_c = GameTick;\nexport default GameTick;\nvar _c;\n$RefreshReg$(_c, \"GameTick\");","map":{"version":3,"names":["useEffect","useRef","useSkills","useGameContext","GameTick","_s","getActiveSkills","addExperience","addMasteryExperience","gameState","lastUpdateRef","Date","now","console","log","tickInterval","gameLoop","deltaTime","current","activeSkills","length","forEach","skillId","_gameState$player","_gameState$player$ski","skill","player","skills","xpGain","xpPerAction","name","mastery","masteryXpGain","error","timer","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/components/GameTick.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useSkills } from '../hooks/useSkills';\r\nimport { useGameContext } from '../context/GameContext';\r\n\r\n/**\r\n * GameTick component - Handles game updates at regular intervals\r\n * This component doesn't render anything but creates a game loop\r\n */\r\nconst GameTick: React.FC = () => {\r\n  const { getActiveSkills, addExperience, addMasteryExperience } = useSkills();\r\n  const { gameState } = useGameContext();\r\n  const lastUpdateRef = useRef<number>(Date.now());\r\n  \r\n  // Set up game tick for recurring actions\r\n  useEffect(() => {\r\n    console.log('GameTick initialized');\r\n    \r\n    const tickInterval = 1000; // Update every second\r\n    \r\n    const gameLoop = () => {\r\n      const now = Date.now();\r\n      const deltaTime = now - lastUpdateRef.current;\r\n      lastUpdateRef.current = now;\r\n      \r\n      // Get all active skills\r\n      const activeSkills = getActiveSkills();\r\n      \r\n      if (activeSkills.length > 0) {\r\n        console.log('Active skills:', activeSkills);\r\n      }\r\n      \r\n      // Update each active skill\r\n      activeSkills.forEach(skillId => {\r\n        const skill = gameState?.player?.skills?.[skillId];\r\n        if (skill) {\r\n          // Calculate XP gain based on skill's xpPerAction and time elapsed\r\n          // Increased XP gain for more noticeable progression (20x faster for testing)\r\n          const xpGain = skill.xpPerAction * (deltaTime / 1000) * 20;\r\n          \r\n          console.log(`Adding ${xpGain} XP to ${skill.name}`);\r\n          \r\n          // Add XP to the skill\r\n          addExperience(skillId, xpGain);\r\n          \r\n          // If the skill has mastery, add mastery experience as well\r\n          if (skill.mastery) {\r\n            // Mastery XP is typically a fraction of regular XP\r\n            const masteryXpGain = xpGain * 0.5;\r\n            addMasteryExperience(skillId, masteryXpGain);\r\n          }\r\n        } else {\r\n          console.error(`Skill ${skillId} is active but not found in gameState`);\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Start the game loop\r\n    const timer = setInterval(gameLoop, tickInterval);\r\n    console.log('Game loop started with interval:', tickInterval);\r\n    \r\n    // Clean up on unmount\r\n    return () => {\r\n      console.log('GameTick component unmounted, clearing interval');\r\n      clearInterval(timer);\r\n    };\r\n  }, [gameState, getActiveSkills, addExperience, addMasteryExperience]);\r\n  \r\n  // This component doesn't render anything\r\n  return null;\r\n};\r\n\r\nexport default GameTick; "],"mappings":";AAAA,SAAgBA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,cAAc,QAAQ,wBAAwB;;AAEvD;AACA;AACA;AACA;AACA,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC,eAAe;IAAEC,aAAa;IAAEC;EAAqB,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC5E,MAAM;IAAEO;EAAU,CAAC,GAAGN,cAAc,CAAC,CAAC;EACtC,MAAMO,aAAa,GAAGT,MAAM,CAASU,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;;EAEhD;EACAZ,SAAS,CAAC,MAAM;IACda,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IAEnC,MAAMC,YAAY,GAAG,IAAI,CAAC,CAAC;;IAE3B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrB,MAAMJ,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;MACtB,MAAMK,SAAS,GAAGL,GAAG,GAAGF,aAAa,CAACQ,OAAO;MAC7CR,aAAa,CAACQ,OAAO,GAAGN,GAAG;;MAE3B;MACA,MAAMO,YAAY,GAAGb,eAAe,CAAC,CAAC;MAEtC,IAAIa,YAAY,CAACC,MAAM,GAAG,CAAC,EAAE;QAC3BP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEK,YAAY,CAAC;MAC7C;;MAEA;MACAA,YAAY,CAACE,OAAO,CAACC,OAAO,IAAI;QAAA,IAAAC,iBAAA,EAAAC,qBAAA;QAC9B,MAAMC,KAAK,GAAGhB,SAAS,aAATA,SAAS,wBAAAc,iBAAA,GAATd,SAAS,CAAEiB,MAAM,cAAAH,iBAAA,wBAAAC,qBAAA,GAAjBD,iBAAA,CAAmBI,MAAM,cAAAH,qBAAA,uBAAzBA,qBAAA,CAA4BF,OAAO,CAAC;QAClD,IAAIG,KAAK,EAAE;UACT;UACA;UACA,MAAMG,MAAM,GAAGH,KAAK,CAACI,WAAW,IAAIZ,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE;UAE1DJ,OAAO,CAACC,GAAG,CAAC,UAAUc,MAAM,UAAUH,KAAK,CAACK,IAAI,EAAE,CAAC;;UAEnD;UACAvB,aAAa,CAACe,OAAO,EAAEM,MAAM,CAAC;;UAE9B;UACA,IAAIH,KAAK,CAACM,OAAO,EAAE;YACjB;YACA,MAAMC,aAAa,GAAGJ,MAAM,GAAG,GAAG;YAClCpB,oBAAoB,CAACc,OAAO,EAAEU,aAAa,CAAC;UAC9C;QACF,CAAC,MAAM;UACLnB,OAAO,CAACoB,KAAK,CAAC,SAASX,OAAO,uCAAuC,CAAC;QACxE;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMY,KAAK,GAAGC,WAAW,CAACnB,QAAQ,EAAED,YAAY,CAAC;IACjDF,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEC,YAAY,CAAC;;IAE7D;IACA,OAAO,MAAM;MACXF,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAC9DsB,aAAa,CAACF,KAAK,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACzB,SAAS,EAAEH,eAAe,EAAEC,aAAa,EAAEC,oBAAoB,CAAC,CAAC;;EAErE;EACA,OAAO,IAAI;AACb,CAAC;AAACH,EAAA,CA7DID,QAAkB;EAAA,QAC2CF,SAAS,EACpDC,cAAc;AAAA;AAAAkC,EAAA,GAFhCjC,QAAkB;AA+DxB,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
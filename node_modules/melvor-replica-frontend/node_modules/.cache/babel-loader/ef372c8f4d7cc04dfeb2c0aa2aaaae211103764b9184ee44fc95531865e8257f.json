{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\OneDrive\\\\Desktop\\\\coding\\\\WaveringTides\\\\frontend\\\\src\\\\features\\\\skills\\\\SkillProgressBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Import these functions from a shared location\nconst calculateXpForNextLevel = currentLevel => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  const MAX_LEVEL = 99;\n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  return Math.floor(Math.pow(2, currentLevel / 7) * currentLevel * 300 / 4);\n};\nconst totalXpForLevel = level => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Format a number with commas for better readability\n */\nconst formatNumber = num => {\n  return num.toLocaleString();\n};\n\n/**\n * SkillProgressBar component - Visual representation of skill progression\n */\nconst SkillProgressBar = ({\n  skill\n}) => {\n  _s();\n  // Debug logging\n  useEffect(() => {\n    console.log(`SkillProgressBar rendering for ${skill.name}:`, {\n      level: skill.level,\n      totalXp: skill.totalXp,\n      xp: skill.xp\n    });\n  }, [skill]);\n\n  // Validate inputs to prevent errors\n  if (!skill) {\n    console.error('SkillProgressBar: No skill data provided');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error: Skill data missing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check level bounds\n  const level = Math.max(1, Math.min(99, skill.level));\n\n  // If we're at max level, show 100%\n  if (level >= 99) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"skill-progress-fill\",\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-text\",\n        children: \"Max Level (13,034,431 XP)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Get XP thresholds for current level and next level\n  const currentLevelTotalXp = totalXpForLevel(level);\n  const nextLevelTotalXp = totalXpForLevel(level + 1);\n\n  // Calculate XP needed for next level from current level\n  const xpForNextLevel = nextLevelTotalXp - currentLevelTotalXp;\n\n  // Current XP progress within this level\n  let currentLevelXp = 0;\n\n  // Make sure we have a valid totalXp value\n  if (typeof skill.totalXp === 'number') {\n    // Calculate how much XP we've earned within this level\n    currentLevelXp = skill.totalXp - currentLevelTotalXp;\n  } else if (typeof skill.xp === 'number') {\n    // Directly use the level's xp if totalXp is not available\n    currentLevelXp = skill.xp;\n  }\n\n  // Ensure currentLevelXp is not negative\n  currentLevelXp = Math.max(0, currentLevelXp);\n\n  // Ensure currentLevelXp doesn't exceed what's needed for next level\n  const displayXp = Math.min(xpForNextLevel, currentLevelXp);\n\n  // Calculate percentage progress toward next level\n  const progressPercentage = Math.min(Math.floor(displayXp / xpForNextLevel * 100), 100);\n\n  // Log final calculated values\n  console.log(`Final display values for ${skill.name}:`, {\n    currentLevelXp,\n    displayXp,\n    xpForNextLevel,\n    progressPercentage\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-fill\",\n        style: {\n          width: `${progressPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-progress-text\",\n      children: [formatNumber(Math.floor(displayXp)), \" / \", formatNumber(xpForNextLevel), \" XP (\", progressPercentage, \"%)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), skill.totalXp && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-total-xp\",\n      children: [\"Total XP: \", formatNumber(Math.floor(skill.totalXp))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(SkillProgressBar, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SkillProgressBar;\nexport default SkillProgressBar;\nvar _c;\n$RefreshReg$(_c, \"SkillProgressBar\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","calculateXpForNextLevel","currentLevel","MAX_LEVEL","Number","MAX_SAFE_INTEGER","Math","floor","pow","totalXpForLevel","level","total","i","formatNumber","num","toLocaleString","SkillProgressBar","skill","_s","console","log","name","totalXp","xp","error","children","fileName","_jsxFileName","lineNumber","columnNumber","max","min","className","style","width","currentLevelTotalXp","nextLevelTotalXp","xpForNextLevel","currentLevelXp","displayXp","progressPercentage","_c","$RefreshReg$"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/features/skills/SkillProgressBar.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Skill } from '../../types';\n\ninterface SkillProgressBarProps {\n  skill: Skill;\n}\n\n// Import these functions from a shared location\nconst calculateXpForNextLevel = (currentLevel: number): number => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  const MAX_LEVEL = 99;\n  \n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  \n  return Math.floor((Math.pow(2, (currentLevel) / 7) * currentLevel * 300) / 4);\n};\n\nconst totalXpForLevel = (level: number): number => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Format a number with commas for better readability\n */\nconst formatNumber = (num: number): string => {\n  return num.toLocaleString();\n};\n\n/**\n * SkillProgressBar component - Visual representation of skill progression\n */\nconst SkillProgressBar: React.FC<SkillProgressBarProps> = ({ skill }) => {\n  // Debug logging\n  useEffect(() => {\n    console.log(`SkillProgressBar rendering for ${skill.name}:`, {\n      level: skill.level,\n      totalXp: skill.totalXp,\n      xp: skill.xp\n    });\n  }, [skill]);\n  \n  // Validate inputs to prevent errors\n  if (!skill) {\n    console.error('SkillProgressBar: No skill data provided');\n    return <div>Error: Skill data missing</div>;\n  }\n  \n  // Check level bounds\n  const level = Math.max(1, Math.min(99, skill.level));\n  \n  // If we're at max level, show 100%\n  if (level >= 99) {\n    return (\n      <div>\n        <div className=\"skill-progress-bar\">\n          <div className=\"skill-progress-fill\" style={{ width: '100%' }} />\n        </div>\n        <div className=\"skill-progress-text\">\n          Max Level (13,034,431 XP)\n        </div>\n      </div>\n    );\n  }\n  \n  // Get XP thresholds for current level and next level\n  const currentLevelTotalXp = totalXpForLevel(level);\n  const nextLevelTotalXp = totalXpForLevel(level + 1);\n  \n  // Calculate XP needed for next level from current level\n  const xpForNextLevel = nextLevelTotalXp - currentLevelTotalXp;\n  \n  // Current XP progress within this level\n  let currentLevelXp = 0;\n  \n  // Make sure we have a valid totalXp value\n  if (typeof skill.totalXp === 'number') {\n    // Calculate how much XP we've earned within this level\n    currentLevelXp = skill.totalXp - currentLevelTotalXp;\n  } else if (typeof skill.xp === 'number') {\n    // Directly use the level's xp if totalXp is not available\n    currentLevelXp = skill.xp;\n  }\n  \n  // Ensure currentLevelXp is not negative\n  currentLevelXp = Math.max(0, currentLevelXp);\n  \n  // Ensure currentLevelXp doesn't exceed what's needed for next level\n  const displayXp = Math.min(xpForNextLevel, currentLevelXp);\n  \n  // Calculate percentage progress toward next level\n  const progressPercentage = Math.min(Math.floor((displayXp / xpForNextLevel) * 100), 100);\n  \n  // Log final calculated values\n  console.log(`Final display values for ${skill.name}:`, {\n    currentLevelXp,\n    displayXp,\n    xpForNextLevel,\n    progressPercentage\n  });\n  \n  return (\n    <div>\n      <div className=\"skill-progress-bar\">\n        <div \n          className=\"skill-progress-fill\"\n          style={{ width: `${progressPercentage}%` }} \n        />\n      </div>\n      <div className=\"skill-progress-text\">\n        {formatNumber(Math.floor(displayXp))} / {formatNumber(xpForNextLevel)} XP ({progressPercentage}%)\n      </div>\n      {skill.totalXp && (\n        <div className=\"skill-total-xp\">\n          Total XP: {formatNumber(Math.floor(skill.totalXp))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SkillProgressBar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
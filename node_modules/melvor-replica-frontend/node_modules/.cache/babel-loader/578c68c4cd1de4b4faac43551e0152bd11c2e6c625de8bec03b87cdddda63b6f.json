{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useGameContext } from '../context/GameContext';\nimport { calculateXpForLevel } from '../features/skills/SkillProgress';\n\n/**\r\n * Hook for managing skills-related state and operations\r\n */\nexport const useSkills = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState\n  } = useGameContext();\n\n  /**\r\n   * Start a skill training session\r\n   */\n  const startSkill = skillId => {\n    if (!gameState) return;\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      const newSkills = {\n        ...prevState.player.skills\n      };\n      newSkills[skillId] = {\n        ...newSkills[skillId],\n        isActive: true\n      };\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: newSkills\n        }\n      };\n    });\n  };\n\n  /**\r\n   * Stop a skill training session\r\n   */\n  const stopSkill = skillId => {\n    if (!gameState) return;\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      const newSkills = {\n        ...prevState.player.skills\n      };\n      newSkills[skillId] = {\n        ...newSkills[skillId],\n        isActive: false\n      };\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: newSkills\n        }\n      };\n    });\n  };\n\n  /**\r\n   * Add experience to a skill\r\n   */\n  const addExperience = (skillId, amount) => {\n    if (!gameState) return;\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      const skill = prevState.player.skills[skillId];\n      if (!skill) return prevState;\n      const newSkill = calculateNewSkillState(skill, amount);\n      const newSkills = {\n        ...prevState.player.skills,\n        [skillId]: newSkill\n      };\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: newSkills\n        }\n      };\n    });\n  };\n\n  /**\r\n   * Get all active skills\r\n   */\n  const getActiveSkills = () => {\n    if (!gameState) return [];\n    return Object.entries(gameState.player.skills).filter(([_, skill]) => skill.isActive).map(([id, _]) => id);\n  };\n\n  /**\r\n   * Check if a player has reached a certain level in a skill\r\n   */\n  const hasReachedLevel = (skillId, level) => {\n    if (!gameState) return false;\n    const skill = gameState.player.skills[skillId];\n    return skill ? skill.level >= level : false;\n  };\n  return {\n    skills: (gameState === null || gameState === void 0 ? void 0 : gameState.player.skills) || {},\n    startSkill,\n    stopSkill,\n    addExperience,\n    getActiveSkills,\n    hasReachedLevel\n  };\n};\n\n/**\r\n * Calculate a new skill state after adding XP\r\n * Pure function for better testability\r\n */\n_s(useSkills, \"18xgbNVGWidCo/sWQzm7FstYldI=\", false, function () {\n  return [useGameContext];\n});\nexport const calculateNewSkillState = (skill, xpAmount) => {\n  const newXp = skill.xp + xpAmount;\n  let newLevel = skill.level;\n\n  // Check for level ups\n  while (newXp >= calculateXpForLevel(newLevel + 1)) {\n    newLevel++;\n  }\n\n  // If mastery exists, update it as well\n  let newMastery = skill.mastery;\n  if (skill.mastery) {\n    // Typically mastery gains a percentage of main XP\n    const masteryXpGain = Math.floor(xpAmount * 0.1);\n    const newMasteryXp = skill.mastery.xp + masteryXpGain;\n    let newMasteryLevel = skill.mastery.level;\n\n    // Check for mastery level ups\n    while (newMasteryXp >= calculateMasteryXpForLevel(newMasteryLevel + 1)) {\n      newMasteryLevel++;\n    }\n    newMastery = {\n      ...skill.mastery,\n      level: newMasteryLevel,\n      xp: newMasteryXp\n    };\n  }\n  return {\n    ...skill,\n    level: newLevel,\n    xp: newXp,\n    mastery: newMastery\n  };\n};\n\n/**\r\n * Calculate XP required for a mastery level\r\n */\nexport const calculateMasteryXpForLevel = level => {\n  return Math.floor(150 * Math.pow(level, 1.8));\n};","map":{"version":3,"names":["useGameContext","calculateXpForLevel","useSkills","_s","gameState","updateGameState","startSkill","skillId","prevState","newSkills","player","skills","isActive","stopSkill","addExperience","amount","skill","newSkill","calculateNewSkillState","getActiveSkills","Object","entries","filter","_","map","id","hasReachedLevel","level","xpAmount","newXp","xp","newLevel","newMastery","mastery","masteryXpGain","Math","floor","newMasteryXp","newMasteryLevel","calculateMasteryXpForLevel","pow"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/hooks/useSkills.ts"],"sourcesContent":["import { useGameContext } from '../context/GameContext';\r\nimport { GameState, Skill } from '../types';\r\nimport { calculateXpForLevel } from '../features/skills/SkillProgress';\r\n\r\n/**\r\n * Hook for managing skills-related state and operations\r\n */\r\nexport const useSkills = () => {\r\n  const { gameState, updateGameState } = useGameContext();\r\n  \r\n  /**\r\n   * Start a skill training session\r\n   */\r\n  const startSkill = (skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    updateGameState((prevState: GameState | null) => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newSkills = { ...prevState.player.skills };\r\n      newSkills[skillId] = {\r\n        ...newSkills[skillId],\r\n        isActive: true\r\n      };\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: newSkills\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Stop a skill training session\r\n   */\r\n  const stopSkill = (skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    updateGameState((prevState: GameState | null) => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newSkills = { ...prevState.player.skills };\r\n      newSkills[skillId] = {\r\n        ...newSkills[skillId],\r\n        isActive: false\r\n      };\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: newSkills\r\n        }\r\n      };\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Add experience to a skill\r\n   */\r\n  const addExperience = (skillId: string, amount: number) => {\r\n    if (!gameState) return;\r\n    \r\n    updateGameState((prevState: GameState | null) => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const skill = prevState.player.skills[skillId];\r\n      if (!skill) return prevState;\r\n      \r\n      const newSkill = calculateNewSkillState(skill, amount);\r\n      const newSkills = { \r\n        ...prevState.player.skills,\r\n        [skillId]: newSkill\r\n      };\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: newSkills\r\n        }\r\n      };\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Get all active skills\r\n   */\r\n  const getActiveSkills = () => {\r\n    if (!gameState) return [];\r\n    \r\n    return Object.entries(gameState.player.skills)\r\n      .filter(([_, skill]) => skill.isActive)\r\n      .map(([id, _]) => id);\r\n  };\r\n  \r\n  /**\r\n   * Check if a player has reached a certain level in a skill\r\n   */\r\n  const hasReachedLevel = (skillId: string, level: number) => {\r\n    if (!gameState) return false;\r\n    \r\n    const skill = gameState.player.skills[skillId];\r\n    return skill ? skill.level >= level : false;\r\n  };\r\n  \r\n  return {\r\n    skills: gameState?.player.skills || {},\r\n    startSkill,\r\n    stopSkill,\r\n    addExperience,\r\n    getActiveSkills,\r\n    hasReachedLevel\r\n  };\r\n};\r\n\r\n/**\r\n * Calculate a new skill state after adding XP\r\n * Pure function for better testability\r\n */\r\nexport const calculateNewSkillState = (skill: Skill, xpAmount: number): Skill => {\r\n  const newXp = skill.xp + xpAmount;\r\n  let newLevel = skill.level;\r\n  \r\n  // Check for level ups\r\n  while (newXp >= calculateXpForLevel(newLevel + 1)) {\r\n    newLevel++;\r\n  }\r\n  \r\n  // If mastery exists, update it as well\r\n  let newMastery = skill.mastery;\r\n  if (skill.mastery) {\r\n    // Typically mastery gains a percentage of main XP\r\n    const masteryXpGain = Math.floor(xpAmount * 0.1); \r\n    const newMasteryXp = skill.mastery.xp + masteryXpGain;\r\n    let newMasteryLevel = skill.mastery.level;\r\n    \r\n    // Check for mastery level ups\r\n    while (newMasteryXp >= calculateMasteryXpForLevel(newMasteryLevel + 1)) {\r\n      newMasteryLevel++;\r\n    }\r\n    \r\n    newMastery = {\r\n      ...skill.mastery,\r\n      level: newMasteryLevel,\r\n      xp: newMasteryXp\r\n    };\r\n  }\r\n  \r\n  return {\r\n    ...skill,\r\n    level: newLevel,\r\n    xp: newXp,\r\n    mastery: newMastery\r\n  };\r\n};\r\n\r\n/**\r\n * Calculate XP required for a mastery level\r\n */\r\nexport const calculateMasteryXpForLevel = (level: number): number => {\r\n  return Math.floor(150 * Math.pow(level, 1.8));\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
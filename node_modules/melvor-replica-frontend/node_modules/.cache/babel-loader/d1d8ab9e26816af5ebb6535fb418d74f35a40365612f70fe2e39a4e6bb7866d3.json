{"ast":null,"code":"import{ITEMS,SKILL_IDS,ENEMIES}from'../constants';/**\n * Creates properly typed mock Item objects from constants\n */export const createMockItems=()=>{const itemsWithProperType={};// Process each item from the constants\nObject.entries(ITEMS).forEach(_ref=>{let[key,itemData]=_ref;// Create base item without optional properties\nconst baseItemData={id:itemData.id,name:itemData.name,quantity:itemData.quantity||1,type:itemData.type==='resource'?'resource':'equipment'};// Add optional properties only if they exist\nif(itemData.sellPrice!==undefined){baseItemData.sellPrice=itemData.sellPrice;}if(itemData.buyPrice!==undefined){baseItemData.buyPrice=itemData.buyPrice;}// Handle slot carefully\nif(itemData.slot==='weapon'||itemData.slot==='armor'){baseItemData.slot=itemData.slot;}// Add stats if they exist\nif(itemData.stats){baseItemData.stats={...itemData.stats};}// Add crafting recipe if it exists - using type assertion to avoid TypeScript error\nif(itemData.craftingRecipe){baseItemData.craftingRecipe=itemData.craftingRecipe;}// Cast to Item type\nitemsWithProperType[key]=baseItemData;});return itemsWithProperType;};/**\n * Creates mock skill data with proper types\n */export const createMockSkills=()=>{return{[SKILL_IDS.WOODCUTTING]:{id:SKILL_IDS.WOODCUTTING,name:'Woodcutting',level:1,xp:0,xpPerAction:5,isActive:false,mastery:createMastery([{level:5,description:'Faster woodcutting speed'},{level:10,description:'Double logs chance (10%)'}])},[SKILL_IDS.FISHING]:{id:SKILL_IDS.FISHING,name:'Fishing',level:1,xp:0,xpPerAction:7,isActive:false,mastery:createMastery([{level:5,description:'Better fish quality'},{level:10,description:'Double fish chance (10%)'}])},[SKILL_IDS.MINING]:{id:SKILL_IDS.MINING,name:'Mining',level:1,xp:0,xpPerAction:6,isActive:false,mastery:createMastery([])}};};/**\n * Helper to create mastery objects\n */const createMastery=unlocks=>{const unlocksMap={};unlocks.forEach(unlock=>{unlocksMap[unlock.level.toString()]=unlock.description;});return{level:1,xp:0,unlocks:unlocksMap};};/**\n * Create properly typed enemy objects\n */export const createMockEnemies=()=>{const enemies={};Object.entries(ENEMIES).forEach(_ref2=>{let[key,enemyData]=_ref2;enemies[key]={id:enemyData.id,name:enemyData.name,attack:enemyData.attack,defense:enemyData.defense,health:enemyData.health,maxHealth:enemyData.maxHealth,lootTable:enemyData.lootTable};});return enemies;};","map":{"version":3,"names":["ITEMS","SKILL_IDS","ENEMIES","createMockItems","itemsWithProperType","Object","entries","forEach","_ref","key","itemData","baseItemData","id","name","quantity","type","sellPrice","undefined","buyPrice","slot","stats","craftingRecipe","createMockSkills","WOODCUTTING","level","xp","xpPerAction","isActive","mastery","createMastery","description","FISHING","MINING","unlocks","unlocksMap","unlock","toString","createMockEnemies","enemies","_ref2","enemyData","attack","defense","health","maxHealth","lootTable"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/utils/mockData.ts"],"sourcesContent":["import { Item, Skill, Mastery, Enemy } from '../types';\nimport { ITEMS, ITEM_IDS, SKILL_IDS, ENEMIES } from '../constants';\n\n/**\n * Creates properly typed mock Item objects from constants\n */\nexport const createMockItems = (): { [id: string]: Item } => {\n  const itemsWithProperType: { [id: string]: Item } = {};\n  \n  // Process each item from the constants\n  Object.entries(ITEMS).forEach(([key, itemData]) => {\n    // Create base item without optional properties\n    const baseItemData: any = {\n      id: itemData.id,\n      name: itemData.name,\n      quantity: itemData.quantity || 1,\n      type: itemData.type === 'resource' ? 'resource' : 'equipment',\n    };\n    \n    // Add optional properties only if they exist\n    if (itemData.sellPrice !== undefined) {\n      baseItemData.sellPrice = itemData.sellPrice;\n    }\n    \n    if (itemData.buyPrice !== undefined) {\n      baseItemData.buyPrice = itemData.buyPrice;\n    }\n    \n    // Handle slot carefully\n    if (itemData.slot === 'weapon' || itemData.slot === 'armor') {\n      baseItemData.slot = itemData.slot;\n    }\n    \n    // Add stats if they exist\n    if (itemData.stats) {\n      baseItemData.stats = {\n        ...itemData.stats\n      };\n    }\n    \n    // Add crafting recipe if it exists - using type assertion to avoid TypeScript error\n    if ((itemData as any).craftingRecipe) {\n      baseItemData.craftingRecipe = (itemData as any).craftingRecipe;\n    }\n    \n    // Cast to Item type\n    itemsWithProperType[key] = baseItemData as Item;\n  });\n  \n  return itemsWithProperType;\n};\n\n/**\n * Creates mock skill data with proper types\n */\nexport const createMockSkills = (): { [id: string]: Skill } => {\n  return {\n    [SKILL_IDS.WOODCUTTING]: {\n      id: SKILL_IDS.WOODCUTTING,\n      name: 'Woodcutting',\n      level: 1,\n      xp: 0,\n      xpPerAction: 5,\n      isActive: false,\n      mastery: createMastery([\n        { level: 5, description: 'Faster woodcutting speed' },\n        { level: 10, description: 'Double logs chance (10%)' }\n      ])\n    },\n    [SKILL_IDS.FISHING]: {\n      id: SKILL_IDS.FISHING,\n      name: 'Fishing',\n      level: 1,\n      xp: 0,\n      xpPerAction: 7,\n      isActive: false,\n      mastery: createMastery([\n        { level: 5, description: 'Better fish quality' },\n        { level: 10, description: 'Double fish chance (10%)' }\n      ])\n    },\n    [SKILL_IDS.MINING]: {\n      id: SKILL_IDS.MINING,\n      name: 'Mining',\n      level: 1,\n      xp: 0,\n      xpPerAction: 6,\n      isActive: false,\n      mastery: createMastery([])\n    }\n  };\n};\n\n/**\n * Helper to create mastery objects\n */\ninterface MasteryUnlock {\n  level: number;\n  description: string;\n}\n\nconst createMastery = (unlocks: MasteryUnlock[]): Mastery => {\n  const unlocksMap: { [level: string]: string } = {};\n  \n  unlocks.forEach(unlock => {\n    unlocksMap[unlock.level.toString()] = unlock.description;\n  });\n  \n  return {\n    level: 1,\n    xp: 0,\n    unlocks: unlocksMap\n  };\n};\n\n/**\n * Create properly typed enemy objects\n */\nexport const createMockEnemies = (): { [id: string]: Enemy } => {\n  const enemies: { [id: string]: Enemy } = {};\n  \n  Object.entries(ENEMIES).forEach(([key, enemyData]) => {\n    enemies[key] = {\n      id: enemyData.id,\n      name: enemyData.name,\n      attack: enemyData.attack,\n      defense: enemyData.defense,\n      health: enemyData.health,\n      maxHealth: enemyData.maxHealth,\n      lootTable: enemyData.lootTable\n    };\n  });\n  \n  return enemies;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
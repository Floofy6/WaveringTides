{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\Desktop\\\\coding\\\\WaveringTides-master\\\\frontend\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\n\n/**\n * Custom hook to access the ThemeContext\n */\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/**\n * ThemeProvider component - Manages theme state and provides theme operations\n */\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Get initial theme from localStorage or use light mode as default\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme === 'dark' ? 'dark' : 'light';\n  });\n\n  // Apply theme class to body element when theme changes\n  useEffect(() => {\n    document.body.dataset.theme = theme;\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Toggle between light and dark themes\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"7/OYfP+b+wKR5cBTrW7F3IvMIKE=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","useTheme","_s","context","Error","ThemeProvider","children","_s2","theme","setTheme","savedTheme","localStorage","getItem","document","body","dataset","setItem","toggleTheme","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextProps {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextProps | undefined>(undefined);\n\n/**\n * Custom hook to access the ThemeContext\n */\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\n/**\n * ThemeProvider component - Manages theme state and provides theme operations\n */\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  // Get initial theme from localStorage or use light mode as default\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return (savedTheme === 'dark' ? 'dark' : 'light') as Theme;\n  });\n\n  // Apply theme class to body element when theme changes\n  useEffect(() => {\n    document.body.dataset.theme = theme;\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Toggle between light and dark themes\n  const toggleTheme = () => {\n    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASzF,MAAMC,YAAY,gBAAGN,aAAa,CAAgCO,SAAS,CAAC;;AAE5E;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGT,UAAU,CAACK,YAAY,CAAC;EACxC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAYrB;AACA;AACA;AACA,OAAO,MAAMI,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC3E;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAQ,MAAM;IAC9C,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,OAAQF,UAAU,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO;EAClD,CAAC,CAAC;;EAEF;EACAd,SAAS,CAAC,MAAM;IACdiB,QAAQ,CAACC,IAAI,CAACC,OAAO,CAACP,KAAK,GAAGA,KAAK;IACnCG,YAAY,CAACK,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxBR,QAAQ,CAACS,SAAS,IAAKA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACnE,CAAC;EAED,oBACEpB,OAAA,CAACC,YAAY,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEZ,KAAK;MAAES;IAAY,CAAE;IAAAX,QAAA,EAClDA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACjB,GAAA,CAvBWF,aAA2C;AAAAoB,EAAA,GAA3CpB,aAA2C;AAyBxD,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
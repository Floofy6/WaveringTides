{"ast":null,"code":"import{useEffect,useRef}from'react';import{useGameContext}from'../context/GameContext';import{useSkills}from'../hooks/useSkills';// Helper functions (normally these would be in a separate utils file)\nconst totalXpForLevel=level=>{// Simple formula for testing\nreturn Math.floor((level-1)*100);};const getLevelFromXp=xp=>{// Simple formula for testing\nreturn Math.floor(xp/100)+1;};/**\n * GameTick component - Handles game updates at regular intervals\n * This component doesn't render anything but creates a game loop\n */const GameTick=()=>{const{getActiveSkills,addExperience,addMasteryExperience}=useSkills();const{gameState,updateGameState}=useGameContext();const lastUpdateRef=useRef(Date.now());const initializedRef=useRef(false);const actionProgressRef=useRef({});// OSRS-like skill action configuration\nconst SKILL_ACTION_BASE_TIME=3000;// 3 seconds per action (like OSRS)\n// Initialize totalXp for existing skills (for older saves)\nuseEffect(()=>{// Safety check: ensure gameState and player exist\nif(!gameState||!gameState.player||!gameState.player.skills){console.error(\"GameTick: Cannot initialize totalXp, gameState.player.skills is not available\");return;}if(!initializedRef.current){initializedRef.current=true;try{// Check if any skills don't have totalXp and initialize them\nconst needsUpdate=Object.values(gameState.player.skills).some(skill=>skill&&skill.totalXp===undefined);if(needsUpdate){console.log('Initializing totalXp for older saves');updateGameState(prevState=>{// Safety check on prevState\nif(!prevState||!prevState.player||!prevState.player.skills){console.error(\"Cannot update skills, prevState.player.skills is missing\");return prevState;// Return unmodified\n}const newState=JSON.parse(JSON.stringify(prevState));// Use proper type for skill and ensure all skills have totalXp\nObject.values(newState.player.skills).forEach(skill=>{if(!skill)return;// Skip if skill is undefined\nif(skill.totalXp===undefined){// Calculate totalXp based on current level and xp\nconst levelBaseXp=totalXpForLevel(skill.level||1);skill.totalXp=levelBaseXp+(skill.xp||0);// Ensure xp is initialized if missing\nif(skill.xp===undefined){skill.xp=0;}// Ensure xpPerAction is initialized if missing\nif(skill.xpPerAction===undefined){skill.xpPerAction=5;// Default value\nconsole.warn(`Missing xpPerAction for skill ${skill.name||'unknown'}, initializing to ${skill.xpPerAction}`);}}});return newState;});}}catch(error){console.error(\"Error initializing totalXp:\",error);}}},[gameState,updateGameState]);// Set up game tick for recurring actions\nuseEffect(()=>{console.log('GameTick initialized');const tickInterval=100;// Update more frequently for smoother progress\nconst gameLoop=()=>{try{// Safety check: ensure gameState and player exist\nif(!gameState||!gameState.player||!gameState.player.skills){console.error(\"GameTick: gameState.player.skills is not available in game loop\");return;}const now=Date.now();const deltaTime=now-lastUpdateRef.current;lastUpdateRef.current=now;// Get all active skills\nconst activeSkills=getActiveSkills();// Update each active skill progress\nactiveSkills.forEach(skillId=>{try{if(!gameState.player.skills[skillId]){console.error(`Skill ${skillId} is active but not found in gameState`);return;}const skill=gameState.player.skills[skillId];// Ensure skill has required properties\nif(typeof skill.xpPerAction!=='number'||isNaN(skill.xpPerAction)){console.error(`Skill ${skillId} has invalid xpPerAction: ${skill.xpPerAction}`);return;}// Initialize action progress tracking for this skill if not exists\nif(!actionProgressRef.current[skillId]){actionProgressRef.current[skillId]=0;}// Calculate skill level modifier (higher levels = slightly faster actions, as in OSRS)\nconst levelModifier=1-Math.min((skill.level-1)*0.005,0.3);// Max 30% reduction at level 61+\nconst actionTime=SKILL_ACTION_BASE_TIME*levelModifier;// Increment progress for this skill\nactionProgressRef.current[skillId]+=deltaTime;// Check if an action is completed\nif(actionProgressRef.current[skillId]>=actionTime){// How many actions completed\nconst actionsCompleted=Math.floor(actionProgressRef.current[skillId]/actionTime);// Update progress remainder\nactionProgressRef.current[skillId]%=actionTime;// Add XP for completed action(s)\nconst xpGain=skill.xpPerAction*actionsCompleted;// Add XP to the skill (only give XP when action completes, like OSRS)\naddExperience(skillId,xpGain);// If the skill has mastery, add mastery experience as well\nif(skill.mastery){// Mastery XP is typically a fraction of regular XP in OSRS\nconst masteryXpGain=xpGain*0.1;addMasteryExperience(skillId,masteryXpGain);}// Update the UI with action progress\nupdateActionProgress(skillId,actionProgressRef.current[skillId]/actionTime);}else{// Update the UI with action progress\nupdateActionProgress(skillId,actionProgressRef.current[skillId]/actionTime);}}catch(skillError){console.error(`Error processing skill ${skillId}:`,skillError);}});}catch(loopError){console.error(\"Error in game loop:\",loopError);}};// Helper function to update action progress in the game state\nconst updateActionProgress=(skillId,progress)=>{updateGameState(prevState=>{// Safety check\nif(!prevState||!prevState.player||!prevState.player.skills||!prevState.player.skills[skillId]){return prevState;}const newState=JSON.parse(JSON.stringify(prevState));newState.player.skills[skillId].actionProgress=progress;return newState;});};// Set up recurring game tick\nconst tickTimer=setInterval(gameLoop,tickInterval);// Initial tick\ngameLoop();// Clean up interval on unmount\nreturn()=>{clearInterval(tickTimer);};},[gameState,addExperience,addMasteryExperience,getActiveSkills,updateGameState]);// This component doesn't render anything\nreturn null;};export default GameTick;","map":{"version":3,"names":["useEffect","useRef","useGameContext","useSkills","totalXpForLevel","level","Math","floor","getLevelFromXp","xp","GameTick","getActiveSkills","addExperience","addMasteryExperience","gameState","updateGameState","lastUpdateRef","Date","now","initializedRef","actionProgressRef","SKILL_ACTION_BASE_TIME","player","skills","console","error","current","needsUpdate","Object","values","some","skill","totalXp","undefined","log","prevState","newState","JSON","parse","stringify","forEach","levelBaseXp","xpPerAction","warn","name","tickInterval","gameLoop","deltaTime","activeSkills","skillId","isNaN","levelModifier","min","actionTime","actionsCompleted","xpGain","mastery","masteryXpGain","updateActionProgress","skillError","loopError","progress","actionProgress","tickTimer","setInterval","clearInterval"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/components/GameTick.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { useSkills } from '../hooks/useSkills';\nimport { calculateMasteryXpForLevel } from '../hooks/useSkills';\n\n// Helper functions (normally these would be in a separate utils file)\nconst totalXpForLevel = (level: number): number => {\n  // Simple formula for testing\n  return Math.floor((level - 1) * 100);\n};\n\nconst getLevelFromXp = (xp: number): number => {\n  // Simple formula for testing\n  return Math.floor(xp / 100) + 1;\n};\n\n/**\n * GameTick component - Handles game updates at regular intervals\n * This component doesn't render anything but creates a game loop\n */\nconst GameTick: React.FC = () => {\n  const { getActiveSkills, addExperience, addMasteryExperience } = useSkills();\n  const { gameState, updateGameState } = useGameContext();\n  const lastUpdateRef = useRef<number>(Date.now());\n  const initializedRef = useRef<boolean>(false);\n  const actionProgressRef = useRef<{ [skillId: string]: number }>({});\n  \n  // OSRS-like skill action configuration\n  const SKILL_ACTION_BASE_TIME = 3000; // 3 seconds per action (like OSRS)\n  \n  // Initialize totalXp for existing skills (for older saves)\n  useEffect(() => {\n    // Safety check: ensure gameState and player exist\n    if (!gameState || !gameState.player || !gameState.player.skills) {\n      console.error(\"GameTick: Cannot initialize totalXp, gameState.player.skills is not available\");\n      return;\n    }\n    \n    if (!initializedRef.current) {\n      initializedRef.current = true;\n      \n      try {\n        // Check if any skills don't have totalXp and initialize them\n        const needsUpdate = Object.values(gameState.player.skills).some(\n          (skill: any) => skill && skill.totalXp === undefined\n        );\n        \n        if (needsUpdate) {\n          console.log('Initializing totalXp for older saves');\n          updateGameState((prevState) => {\n            // Safety check on prevState\n            if (!prevState || !prevState.player || !prevState.player.skills) {\n              console.error(\"Cannot update skills, prevState.player.skills is missing\");\n              return prevState; // Return unmodified\n            }\n            \n            const newState = JSON.parse(JSON.stringify(prevState));\n            \n            // Use proper type for skill and ensure all skills have totalXp\n            Object.values(newState.player.skills).forEach((skill: any) => {\n              if (!skill) return; // Skip if skill is undefined\n              \n              if (skill.totalXp === undefined) {\n                // Calculate totalXp based on current level and xp\n                const levelBaseXp = totalXpForLevel(skill.level || 1);\n                skill.totalXp = levelBaseXp + (skill.xp || 0);\n                \n                // Ensure xp is initialized if missing\n                if (skill.xp === undefined) {\n                  skill.xp = 0;\n                }\n                \n                // Ensure xpPerAction is initialized if missing\n                if (skill.xpPerAction === undefined) {\n                  skill.xpPerAction = 5; // Default value\n                  console.warn(`Missing xpPerAction for skill ${skill.name || 'unknown'}, initializing to ${skill.xpPerAction}`);\n                }\n              }\n            });\n            \n            return newState;\n          });\n        }\n      } catch (error) {\n        console.error(\"Error initializing totalXp:\", error);\n      }\n    }\n  }, [gameState, updateGameState]);\n  \n  // Set up game tick for recurring actions\n  useEffect(() => {\n    console.log('GameTick initialized');\n    \n    const tickInterval = 100; // Update more frequently for smoother progress\n    \n    const gameLoop = () => {\n      try {\n        // Safety check: ensure gameState and player exist\n        if (!gameState || !gameState.player || !gameState.player.skills) {\n          console.error(\"GameTick: gameState.player.skills is not available in game loop\");\n          return;\n        }\n        \n        const now = Date.now();\n        const deltaTime = now - lastUpdateRef.current;\n        lastUpdateRef.current = now;\n        \n        // Get all active skills\n        const activeSkills = getActiveSkills();\n        \n        // Update each active skill progress\n        activeSkills.forEach(skillId => {\n          try {\n            if (!gameState.player.skills[skillId]) {\n              console.error(`Skill ${skillId} is active but not found in gameState`);\n              return;\n            }\n            \n            const skill = gameState.player.skills[skillId];\n            \n            // Ensure skill has required properties\n            if (typeof skill.xpPerAction !== 'number' || isNaN(skill.xpPerAction)) {\n              console.error(`Skill ${skillId} has invalid xpPerAction: ${skill.xpPerAction}`);\n              return;\n            }\n            \n            // Initialize action progress tracking for this skill if not exists\n            if (!actionProgressRef.current[skillId]) {\n              actionProgressRef.current[skillId] = 0;\n            }\n            \n            // Calculate skill level modifier (higher levels = slightly faster actions, as in OSRS)\n            const levelModifier = 1 - Math.min((skill.level - 1) * 0.005, 0.3); // Max 30% reduction at level 61+\n            const actionTime = SKILL_ACTION_BASE_TIME * levelModifier;\n            \n            // Increment progress for this skill\n            actionProgressRef.current[skillId] += deltaTime;\n            \n            // Check if an action is completed\n            if (actionProgressRef.current[skillId] >= actionTime) {\n              // How many actions completed\n              const actionsCompleted = Math.floor(actionProgressRef.current[skillId] / actionTime);\n              \n              // Update progress remainder\n              actionProgressRef.current[skillId] %= actionTime;\n              \n              // Add XP for completed action(s)\n              const xpGain = skill.xpPerAction * actionsCompleted;\n              \n              // Add XP to the skill (only give XP when action completes, like OSRS)\n              addExperience(skillId, xpGain);\n              \n              // If the skill has mastery, add mastery experience as well\n              if (skill.mastery) {\n                // Mastery XP is typically a fraction of regular XP in OSRS\n                const masteryXpGain = xpGain * 0.1;\n                addMasteryExperience(skillId, masteryXpGain);\n              }\n              \n              // Update the UI with action progress\n              updateActionProgress(skillId, actionProgressRef.current[skillId] / actionTime);\n            } else {\n              // Update the UI with action progress\n              updateActionProgress(skillId, actionProgressRef.current[skillId] / actionTime);\n            }\n          } catch (skillError) {\n            console.error(`Error processing skill ${skillId}:`, skillError);\n          }\n        });\n      } catch (loopError) {\n        console.error(\"Error in game loop:\", loopError);\n      }\n    };\n    \n    // Helper function to update action progress in the game state\n    const updateActionProgress = (skillId: string, progress: number) => {\n      updateGameState((prevState) => {\n        // Safety check\n        if (!prevState || !prevState.player || !prevState.player.skills || !prevState.player.skills[skillId]) {\n          return prevState;\n        }\n        \n        const newState = JSON.parse(JSON.stringify(prevState));\n        newState.player.skills[skillId].actionProgress = progress;\n        return newState;\n      });\n    };\n    \n    // Set up recurring game tick\n    const tickTimer = setInterval(gameLoop, tickInterval);\n    \n    // Initial tick\n    gameLoop();\n    \n    // Clean up interval on unmount\n    return () => {\n      clearInterval(tickTimer);\n    };\n  }, [gameState, addExperience, addMasteryExperience, getActiveSkills, updateGameState]);\n  \n  // This component doesn't render anything\n  return null;\n};\n\nexport default GameTick; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
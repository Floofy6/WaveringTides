{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\Desktop\\\\coding\\\\WaveringTides-master\\\\frontend\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\nimport { createMockItems } from '../utils/mockData';\nimport api from '../services/api';\nimport { safeSetItem, safeGetItem, safeRemoveItem, cleanupStorage } from '../utils/storageUtils';\n\n// Default empty game state to prevent undefined player errors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_GAME_STATE = {\n  player: {\n    id: '',\n    gold: 0,\n    lastUpdate: Date.now(),\n    skills: {},\n    inventory: {},\n    equipment: {},\n    combat: {\n      isFighting: false\n    }\n  }\n};\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n/**\n * Custom hook to access the GameContext\n */\nexport const useGameContext = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGameContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/**\n * GameProvider component - Provides game state and operations to the entire app\n */\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [gameState, setGameState] = useState(DEFAULT_GAME_STATE);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [playerId, setPlayerId] = useState('player1'); // Default player ID\n\n  /**\n   * Load game data from API or create a new game\n   */\n  const loadGameData = useCallback(async () => {\n    console.log('Loading game data...');\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try to load from localStorage first to get the player ID\n      const savedPlayerId = safeGetItem('playerId', '');\n      if (savedPlayerId) {\n        setPlayerId(savedPlayerId);\n      }\n\n      // Try to fetch from API\n      try {\n        console.log('Attempting to fetch from API...');\n        const gameData = await api.getGame();\n        if (gameData && gameData.player) {\n          console.log('Game data loaded from API:', gameData);\n          setGameState(gameData);\n          setLoading(false);\n          return;\n        } else {\n          console.error('API returned invalid game data (missing player):', gameData);\n        }\n      } catch (apiError) {\n        console.log('API not available, falling back to local storage', apiError);\n\n        // Try to load from localStorage if API fails\n        const savedGameState = safeGetItem('gameState', null);\n        if (savedGameState && savedGameState.player) {\n          console.log('Game data loaded from localStorage:', savedGameState);\n          setGameState(savedGameState);\n          setLoading(false);\n          return;\n        } else {\n          console.error('localStorage had invalid game data or none was found');\n          // Try to clean up storage to free space\n          cleanupStorage(['playerId']);\n        }\n      }\n\n      // If no data from API or localStorage, create a new game\n      console.log('Creating new game...');\n      createNewGame();\n    } catch (err) {\n      console.error('Error loading game:', err);\n      setError('Failed to load game data. Please try again.');\n      // Create a new game even if loading fails to prevent a blank screen\n      createNewGame();\n    } finally {\n      // Ensure loading is set to false regardless of the outcome\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Create a new game with default values\n   */\n  const createNewGame = () => {\n    // Create mock skills\n    const mockSkills = {\n      [SKILL_IDS.WOODCUTTING]: {\n        id: SKILL_IDS.WOODCUTTING,\n        name: 'Woodcutting',\n        level: 1,\n        xp: 0,\n        xpPerAction: 5,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Faster woodcutting speed',\n            '10': 'Double logs chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.FISHING]: {\n        id: SKILL_IDS.FISHING,\n        name: 'Fishing',\n        level: 1,\n        xp: 0,\n        xpPerAction: 7,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Better fish quality',\n            '10': 'Double fish chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.MINING]: {\n        id: SKILL_IDS.MINING,\n        name: 'Mining',\n        level: 1,\n        xp: 0,\n        xpPerAction: 6,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {}\n        }\n      }\n    };\n\n    // Convert ITEMS to proper Item type\n    const itemsWithProperType = createMockItems();\n\n    // Create mock inventory\n    const mockInventory = {\n      [ITEM_IDS.LOGS]: {\n        ...itemsWithProperType[ITEM_IDS.LOGS],\n        quantity: 5\n      },\n      [ITEM_IDS.RAW_FISH]: {\n        ...itemsWithProperType[ITEM_IDS.RAW_FISH],\n        quantity: 3\n      }\n    };\n    const mockData = {\n      player: {\n        id: playerId,\n        gold: 100,\n        lastUpdate: Date.now(),\n        skills: mockSkills,\n        inventory: mockInventory,\n        equipment: {},\n        combat: {\n          isFighting: false\n        }\n      }\n    };\n    console.log('New game created:', mockData);\n    setGameState(mockData);\n\n    // Store the playerId separately from the game state\n    safeSetItem('playerId', playerId);\n\n    // Use smaller chunks or remove unnecessary data to fit in localStorage\n    const minimalState = removeUnnecessaryData(mockData);\n    safeSetItem('gameState', minimalState);\n    setLoading(false);\n  };\n\n  /**\n   * Remove unnecessary data to reduce storage size\n   */\n  const removeUnnecessaryData = state => {\n    // Create a deep copy to avoid modifying the original\n    const copy = JSON.parse(JSON.stringify(state));\n\n    // Remove any large unnecessary data\n    // For example, we could remove lengthy descriptions or history data\n\n    // Clean up player's inventory - if there are items with quantity 0, remove them\n    if (copy.player && copy.player.inventory) {\n      Object.keys(copy.player.inventory).forEach(key => {\n        if (copy.player.inventory[key].quantity === 0) {\n          delete copy.player.inventory[key];\n        }\n      });\n    }\n    return copy;\n  };\n\n  /**\n   * Refresh game state from API\n   */\n  const refreshGameState = async () => {\n    try {\n      setLoading(true);\n      const gameData = await api.getGame();\n      if (gameData && gameData.player) {\n        setGameState(gameData);\n      } else {\n        console.error('API refreshGameState returned invalid game data (missing player):', gameData);\n        // If API doesn't return a valid player, use the current state which has DEFAULT_GAME_STATE\n      }\n    } catch (err) {\n      console.error('Error refreshing game state:', err);\n      // Don't set an error message here to avoid disrupting the UI\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Initialize the game on component mount\n   */\n  useEffect(() => {\n    loadGameData();\n\n    // Set up autosave\n    const saveInterval = setInterval(() => {\n      if (gameState) {\n        saveGame();\n      }\n    }, 60000); // Save every minute\n\n    return () => clearInterval(saveInterval);\n  }, [loadGameData]);\n\n  /**\n   * Update the game state\n   */\n  const updateGameState = useCallback(updater => {\n    setGameState(prev => {\n      try {\n        // Apply the updater function to get the new state\n        const newState = updater(prev);\n\n        // Store a minimal version of the state\n        const minimalState = removeUnnecessaryData(newState);\n        safeSetItem('gameState', minimalState);\n        return newState;\n      } catch (error) {\n        // If something fails in the updater function, log and return the previous state\n        console.error('Error updating game state:', error);\n        return prev;\n      }\n    });\n  }, []);\n\n  /**\n   * Save the game to localStorage and API\n   */\n  const saveGame = useCallback(async () => {\n    try {\n      // Update last saved timestamp\n      const stateWithTimestamp = {\n        ...gameState,\n        lastSaved: Date.now()\n      };\n\n      // Store a minimal version of the state\n      const minimalState = removeUnnecessaryData(stateWithTimestamp);\n      const saveSuccessful = safeSetItem('gameState', minimalState);\n      if (!saveSuccessful) {\n        console.warn('Failed to save game to localStorage due to size limits or quota exceeded');\n\n        // Attempt cleanup to free space\n        cleanupStorage(['playerId']);\n\n        // Try to save just the critical parts (like player stats)\n        const criticalState = extractCriticalGameState(stateWithTimestamp);\n        safeSetItem('gameState_critical', criticalState);\n      }\n\n      // Try to save to API\n      try {\n        console.log('Saving game to API...');\n        await api.updateGame(stateWithTimestamp);\n      } catch (apiError) {\n        console.error('Error saving to API:', apiError);\n      }\n    } catch (err) {\n      console.error('Error in saveGame function:', err);\n      setError('Failed to save game data');\n    }\n  }, [gameState]);\n\n  /**\n   * Extract only the most critical game state to ensure it fits in storage\n   */\n  const extractCriticalGameState = state => {\n    // Only keep the most important parts of the state\n    return {\n      player: {\n        id: state.player.id,\n        gold: state.player.gold,\n        lastUpdate: state.player.lastUpdate || Date.now(),\n        skills: state.player.skills,\n        // Minimal inventory data\n        inventory: {},\n        equipment: state.player.equipment,\n        combat: {\n          isFighting: state.player.combat.isFighting\n        }\n      }\n    };\n  };\n\n  /**\n   * Reset the game to default values\n   */\n  const resetGame = useCallback(() => {\n    safeRemoveItem('gameState');\n    safeRemoveItem('gameState_critical');\n    // Keep playerId for consistency\n    createNewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      gameState,\n      loading,\n      error,\n      updateGameState,\n      saveGame,\n      resetGame,\n      refreshGameState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"bpkZKVUUJqjY6/D2RYOXC2O/0Ks=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","SKILL_IDS","ITEM_IDS","createMockItems","api","safeSetItem","safeGetItem","safeRemoveItem","cleanupStorage","jsxDEV","_jsxDEV","DEFAULT_GAME_STATE","player","id","gold","lastUpdate","Date","now","skills","inventory","equipment","combat","isFighting","GameContext","undefined","useGameContext","_s","context","Error","GameProvider","children","_s2","gameState","setGameState","loading","setLoading","error","setError","playerId","setPlayerId","loadGameData","console","log","savedPlayerId","gameData","getGame","apiError","savedGameState","createNewGame","err","mockSkills","WOODCUTTING","name","level","xp","xpPerAction","isActive","mastery","unlocks","FISHING","MINING","itemsWithProperType","mockInventory","LOGS","quantity","RAW_FISH","mockData","minimalState","removeUnnecessaryData","state","copy","JSON","parse","stringify","Object","keys","forEach","key","refreshGameState","saveInterval","setInterval","saveGame","clearInterval","updateGameState","updater","prev","newState","stateWithTimestamp","lastSaved","saveSuccessful","warn","criticalState","extractCriticalGameState","updateGame","resetGame","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { GameState, Item, Skill } from '../types';\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\nimport { createMockItems } from '../utils/mockData';\nimport api from '../services/api';\nimport { \n  safeSetItem, \n  safeGetItem, \n  safeRemoveItem, \n  isStorageAvailable,\n  cleanupStorage \n} from '../utils/storageUtils';\n\n// Default empty game state to prevent undefined player errors\nconst DEFAULT_GAME_STATE: GameState = {\n  player: {\n    id: '',\n    gold: 0,\n    lastUpdate: Date.now(),\n    skills: {},\n    inventory: {},\n    equipment: {},\n    combat: {\n      isFighting: false\n    }\n  }\n};\n\ninterface GameContextProps {\n  gameState: GameState;\n  loading: boolean;\n  error: string | null;\n  updateGameState: (updater: (prevState: GameState) => GameState) => void;\n  saveGame: () => void;\n  resetGame: () => void;\n  refreshGameState: () => Promise<void>;\n}\n\nconst GameContext = createContext<GameContextProps | undefined>(undefined);\n\n/**\n * Custom hook to access the GameContext\n */\nexport const useGameContext = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n\ninterface GameProviderProps {\n  children: ReactNode;\n}\n\n/**\n * GameProvider component - Provides game state and operations to the entire app\n */\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\n  const [gameState, setGameState] = useState<GameState>(DEFAULT_GAME_STATE);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [playerId, setPlayerId] = useState<string>('player1'); // Default player ID\n\n  /**\n   * Load game data from API or create a new game\n   */\n  const loadGameData = useCallback(async () => {\n    console.log('Loading game data...');\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Try to load from localStorage first to get the player ID\n      const savedPlayerId = safeGetItem<string>('playerId', '');\n      if (savedPlayerId) {\n        setPlayerId(savedPlayerId);\n      }\n      \n      // Try to fetch from API\n      try {\n        console.log('Attempting to fetch from API...');\n        const gameData = await api.getGame();\n        if (gameData && gameData.player) {\n          console.log('Game data loaded from API:', gameData);\n          setGameState(gameData);\n          setLoading(false);\n          return;\n        } else {\n          console.error('API returned invalid game data (missing player):', gameData);\n        }\n      } catch (apiError) {\n        console.log('API not available, falling back to local storage', apiError);\n        \n        // Try to load from localStorage if API fails\n        const savedGameState = safeGetItem<GameState | null>('gameState', null);\n        if (savedGameState && savedGameState.player) {\n          console.log('Game data loaded from localStorage:', savedGameState);\n          setGameState(savedGameState);\n          setLoading(false);\n          return;\n        } else {\n          console.error('localStorage had invalid game data or none was found');\n          // Try to clean up storage to free space\n          cleanupStorage(['playerId']);\n        }\n      }\n      \n      // If no data from API or localStorage, create a new game\n      console.log('Creating new game...');\n      createNewGame();\n    } catch (err) {\n      console.error('Error loading game:', err);\n      setError('Failed to load game data. Please try again.');\n      // Create a new game even if loading fails to prevent a blank screen\n      createNewGame();\n    } finally {\n      // Ensure loading is set to false regardless of the outcome\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Create a new game with default values\n   */\n  const createNewGame = () => {\n    // Create mock skills\n    const mockSkills: { [id: string]: Skill } = {\n      [SKILL_IDS.WOODCUTTING]: {\n        id: SKILL_IDS.WOODCUTTING,\n        name: 'Woodcutting',\n        level: 1,\n        xp: 0,\n        xpPerAction: 5,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Faster woodcutting speed',\n            '10': 'Double logs chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.FISHING]: {\n        id: SKILL_IDS.FISHING,\n        name: 'Fishing',\n        level: 1,\n        xp: 0,\n        xpPerAction: 7,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Better fish quality',\n            '10': 'Double fish chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.MINING]: {\n        id: SKILL_IDS.MINING,\n        name: 'Mining',\n        level: 1,\n        xp: 0,\n        xpPerAction: 6,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {}\n        }\n      }\n    };\n\n    // Convert ITEMS to proper Item type\n    const itemsWithProperType = createMockItems();\n\n    // Create mock inventory\n    const mockInventory: { [id: string]: Item } = {\n      [ITEM_IDS.LOGS]: { ...itemsWithProperType[ITEM_IDS.LOGS], quantity: 5 },\n      [ITEM_IDS.RAW_FISH]: { ...itemsWithProperType[ITEM_IDS.RAW_FISH], quantity: 3 }\n    };\n\n    const mockData: GameState = {\n      player: {\n        id: playerId,\n        gold: 100,\n        lastUpdate: Date.now(),\n        skills: mockSkills,\n        inventory: mockInventory,\n        equipment: {},\n        combat: {\n          isFighting: false\n        }\n      }\n    };\n    \n    console.log('New game created:', mockData);\n    setGameState(mockData);\n    \n    // Store the playerId separately from the game state\n    safeSetItem('playerId', playerId);\n    \n    // Use smaller chunks or remove unnecessary data to fit in localStorage\n    const minimalState = removeUnnecessaryData(mockData);\n    safeSetItem('gameState', minimalState);\n    \n    setLoading(false);\n  };\n\n  /**\n   * Remove unnecessary data to reduce storage size\n   */\n  const removeUnnecessaryData = (state: GameState): GameState => {\n    // Create a deep copy to avoid modifying the original\n    const copy = JSON.parse(JSON.stringify(state));\n    \n    // Remove any large unnecessary data\n    // For example, we could remove lengthy descriptions or history data\n    \n    // Clean up player's inventory - if there are items with quantity 0, remove them\n    if (copy.player && copy.player.inventory) {\n      Object.keys(copy.player.inventory).forEach(key => {\n        if (copy.player.inventory[key].quantity === 0) {\n          delete copy.player.inventory[key];\n        }\n      });\n    }\n    \n    return copy;\n  };\n\n  /**\n   * Refresh game state from API\n   */\n  const refreshGameState = async () => {\n    try {\n      setLoading(true);\n      const gameData = await api.getGame();\n      if (gameData && gameData.player) {\n        setGameState(gameData);\n      } else {\n        console.error('API refreshGameState returned invalid game data (missing player):', gameData);\n        // If API doesn't return a valid player, use the current state which has DEFAULT_GAME_STATE\n      }\n    } catch (err) {\n      console.error('Error refreshing game state:', err);\n      // Don't set an error message here to avoid disrupting the UI\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Initialize the game on component mount\n   */\n  useEffect(() => {\n    loadGameData();\n    \n    // Set up autosave\n    const saveInterval = setInterval(() => {\n      if (gameState) {\n        saveGame();\n      }\n    }, 60000); // Save every minute\n    \n    return () => clearInterval(saveInterval);\n  }, [loadGameData]);\n\n  /**\n   * Update the game state\n   */\n  const updateGameState = useCallback((updater: (prevState: GameState) => GameState) => {\n    setGameState(prev => {\n      try {\n        // Apply the updater function to get the new state\n        const newState = updater(prev);\n        \n        // Store a minimal version of the state\n        const minimalState = removeUnnecessaryData(newState);\n        safeSetItem('gameState', minimalState);\n        \n        return newState;\n      } catch (error) {\n        // If something fails in the updater function, log and return the previous state\n        console.error('Error updating game state:', error);\n        return prev;\n      }\n    });\n  }, []);\n\n  /**\n   * Save the game to localStorage and API\n   */\n  const saveGame = useCallback(async () => {\n    try {\n      // Update last saved timestamp\n      const stateWithTimestamp = {\n        ...gameState,\n        lastSaved: Date.now()\n      };\n      \n      // Store a minimal version of the state\n      const minimalState = removeUnnecessaryData(stateWithTimestamp);\n      const saveSuccessful = safeSetItem('gameState', minimalState);\n      \n      if (!saveSuccessful) {\n        console.warn('Failed to save game to localStorage due to size limits or quota exceeded');\n        \n        // Attempt cleanup to free space\n        cleanupStorage(['playerId']);\n        \n        // Try to save just the critical parts (like player stats)\n        const criticalState = extractCriticalGameState(stateWithTimestamp);\n        safeSetItem('gameState_critical', criticalState);\n      }\n      \n      // Try to save to API\n      try {\n        console.log('Saving game to API...');\n        await api.updateGame(stateWithTimestamp);\n      } catch (apiError) {\n        console.error('Error saving to API:', apiError);\n      }\n    } catch (err) {\n      console.error('Error in saveGame function:', err);\n      setError('Failed to save game data');\n    }\n  }, [gameState]);\n\n  /**\n   * Extract only the most critical game state to ensure it fits in storage\n   */\n  const extractCriticalGameState = (state: GameState): Partial<GameState> => {\n    // Only keep the most important parts of the state\n    return {\n      player: {\n        id: state.player.id,\n        gold: state.player.gold,\n        lastUpdate: state.player.lastUpdate || Date.now(),\n        skills: state.player.skills,\n        // Minimal inventory data\n        inventory: {},\n        equipment: state.player.equipment,\n        combat: {\n          isFighting: state.player.combat.isFighting\n        }\n      }\n    };\n  };\n\n  /**\n   * Reset the game to default values\n   */\n  const resetGame = useCallback(() => {\n    safeRemoveItem('gameState');\n    safeRemoveItem('gameState_critical');\n    // Keep playerId for consistency\n    createNewGame();\n  }, []);\n\n  return (\n    <GameContext.Provider \n      value={{ \n        gameState, \n        loading, \n        error,\n        updateGameState,\n        saveGame,\n        resetGame,\n        refreshGameState\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
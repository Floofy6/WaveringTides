{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\OneDrive\\\\Desktop\\\\coding\\\\WaveringTides\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SkillList from './components/SkillList';\nimport CombatPanel from './components/CombatPanel';\nimport Inventory from './components/Inventory';\nimport Shop from './components/Shop';\nimport Equipment from './components/Equipment';\nimport { ENEMIES, ITEMS, SKILL_IDS } from './constants';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // In a real app, you would fetch from your API\n    const fetchGameData = async () => {\n      try {\n        // Mock API call with simulated delay\n        setTimeout(() => {\n          // Create mock skills\n          const mockSkills = {\n            [SKILL_IDS.WOODCUTTING]: {\n              id: SKILL_IDS.WOODCUTTING,\n              name: 'Woodcutting',\n              level: 1,\n              xp: 0,\n              xpPerAction: 5,\n              isActive: false,\n              mastery: {\n                level: 1,\n                xp: 0,\n                unlocks: {\n                  '5': 'Faster woodcutting speed',\n                  '10': 'Double logs chance (10%)'\n                }\n              }\n            },\n            [SKILL_IDS.FISHING]: {\n              id: SKILL_IDS.FISHING,\n              name: 'Fishing',\n              level: 1,\n              xp: 0,\n              xpPerAction: 7,\n              isActive: false,\n              mastery: {\n                level: 1,\n                xp: 0,\n                unlocks: {\n                  '5': 'Better fish quality',\n                  '10': 'Double fish chance (10%)'\n                }\n              }\n            },\n            [SKILL_IDS.MINING]: {\n              id: SKILL_IDS.MINING,\n              name: 'Mining',\n              level: 1,\n              xp: 0,\n              xpPerAction: 6,\n              isActive: false\n            }\n          };\n\n          // Create mock inventory\n          const mockInventory = {\n            'logs': {\n              ...ITEMS.logs,\n              quantity: 5\n            },\n            'raw_fish': {\n              ...ITEMS.raw_fish,\n              quantity: 3\n            }\n          };\n          const mockData = {\n            player: {\n              id: 'player1',\n              gold: 100,\n              lastUpdate: Date.now(),\n              skills: mockSkills,\n              inventory: mockInventory,\n              equipment: {},\n              combat: {\n                isFighting: false\n              }\n            }\n          };\n          setGameState(mockData);\n          setLoading(false);\n        }, 500);\n      } catch (error) {\n        console.error('Error fetching game data:', error);\n        setLoading(false);\n      }\n    };\n    fetchGameData();\n  }, []);\n\n  // Skill handlers\n  const handleStartSkill = skillId => {\n    if (!gameState) return;\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n      const newSkills = {\n        ...prevState.player.skills\n      };\n      newSkills[skillId] = {\n        ...newSkills[skillId],\n        isActive: true\n      };\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: newSkills\n        }\n      };\n    });\n  };\n  const handleStopSkill = skillId => {\n    if (!gameState) return;\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n      const newSkills = {\n        ...prevState.player.skills\n      };\n      newSkills[skillId] = {\n        ...newSkills[skillId],\n        isActive: false\n      };\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: newSkills\n        }\n      };\n    });\n  };\n\n  // Combat handlers\n  const handleStartCombat = enemyId => {\n    if (!gameState) return;\n    const enemy = ENEMIES[enemyId];\n    if (!enemy) return;\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          combat: {\n            currentEnemy: {\n              ...enemy\n            },\n            isFighting: true\n          }\n        }\n      };\n    });\n  };\n  const handleStopCombat = () => {\n    if (!gameState) return;\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          combat: {\n            isFighting: false\n          }\n        }\n      };\n    });\n  };\n\n  // Inventory handlers\n  const handleSellItem = (itemId, quantity) => {\n    if (!gameState) return;\n    const item = gameState.player.inventory[itemId];\n    if (!item || !item.sellPrice) return;\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n      const newInventory = {\n        ...prevState.player.inventory\n      };\n      const newGold = prevState.player.gold + item.sellPrice * quantity;\n      if (item.quantity <= quantity) {\n        delete newInventory[itemId];\n      } else {\n        newInventory[itemId] = {\n          ...item,\n          quantity: item.quantity - quantity\n        };\n      }\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          gold: newGold,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n  const handleEquipItem = itemId => {\n    if (!gameState) return;\n    const item = gameState.player.inventory[itemId];\n    if (!item || item.type !== 'equipment' || !item.slot) return;\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n      const newInventory = {\n        ...prevState.player.inventory\n      };\n      const newEquipment = {\n        ...prevState.player.equipment\n      };\n\n      // Unequip current item if any\n      const currentEquipped = newEquipment[item.slot];\n      if (currentEquipped) {\n        if (newInventory[currentEquipped.id]) {\n          newInventory[currentEquipped.id].quantity += 1;\n        } else {\n          newInventory[currentEquipped.id] = {\n            ...currentEquipped,\n            quantity: 1\n          };\n        }\n      }\n\n      // Equip new item\n      newEquipment[item.slot] = {\n        ...item,\n        quantity: 1\n      };\n\n      // Remove from inventory\n      if (item.quantity <= 1) {\n        delete newInventory[itemId];\n      } else {\n        newInventory[itemId] = {\n          ...item,\n          quantity: item.quantity - 1\n        };\n      }\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          equipment: newEquipment,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n  const handleUnequipItem = slot => {\n    if (!gameState) return;\n    const item = gameState.player.equipment[slot];\n    if (!item) return;\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n      const newInventory = {\n        ...prevState.player.inventory\n      };\n      const newEquipment = {\n        ...prevState.player.equipment\n      };\n\n      // Add to inventory\n      if (newInventory[item.id]) {\n        newInventory[item.id].quantity += 1;\n      } else {\n        newInventory[item.id] = {\n          ...item,\n          quantity: 1\n        };\n      }\n\n      // Remove from equipment\n      newEquipment[slot] = undefined;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          equipment: newEquipment,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n\n  // Shop handlers\n  const handleBuyItem = (itemId, quantity) => {\n    if (!gameState) return;\n    const item = Object.values(ITEMS).find(item => item.id === itemId);\n    if (!item || !item.buyPrice) return;\n    const totalCost = item.buyPrice * quantity;\n    if (gameState.player.gold < totalCost) return;\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n      const newInventory = {\n        ...prevState.player.inventory\n      };\n      const newGold = prevState.player.gold - totalCost;\n      if (newInventory[itemId]) {\n        newInventory[itemId] = {\n          ...newInventory[itemId],\n          quantity: newInventory[itemId].quantity + quantity\n        };\n      } else {\n        newInventory[itemId] = {\n          ...item,\n          quantity\n        };\n      }\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          gold: newGold,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n\n  // Calculate player combat stats\n  const calculatePlayerStats = () => {\n    var _gameState$player$equ, _gameState$player$equ2;\n    const baseAttack = 1;\n    const baseStrength = 1;\n    const baseDefense = 1;\n    const baseHitpoints = 10;\n    let totalAttack = baseAttack;\n    let totalStrength = baseStrength;\n    let totalDefense = baseDefense;\n    if (gameState !== null && gameState !== void 0 && (_gameState$player$equ = gameState.player.equipment.weapon) !== null && _gameState$player$equ !== void 0 && _gameState$player$equ.stats) {\n      const weaponStats = gameState.player.equipment.weapon.stats;\n      if (weaponStats.attackBonus) totalAttack += weaponStats.attackBonus;\n      if (weaponStats.strengthBonus) totalStrength += weaponStats.strengthBonus;\n    }\n    if (gameState !== null && gameState !== void 0 && (_gameState$player$equ2 = gameState.player.equipment.armor) !== null && _gameState$player$equ2 !== void 0 && _gameState$player$equ2.stats) {\n      const armorStats = gameState.player.equipment.armor.stats;\n      if (armorStats.defenseBonus) totalDefense += armorStats.defenseBonus;\n    }\n    return {\n      attack: totalAttack,\n      strength: totalStrength,\n      defense: totalDefense,\n      hitpoints: baseHitpoints\n    };\n  };\n  if (loading || !gameState) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading game data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 12\n    }, this);\n  }\n  const playerStats = calculatePlayerStats();\n  const availableEnemies = Object.values(ENEMIES);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Melvor Idle Replica\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-gold\",\n        children: [\"Gold: \", gameState.player.gold]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-panel\",\n          children: /*#__PURE__*/_jsxDEV(SkillList, {\n            skills: gameState.player.skills,\n            onStartSkill: handleStartSkill,\n            onStopSkill: handleStopSkill\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center-panel\",\n          children: /*#__PURE__*/_jsxDEV(CombatPanel, {\n            isFighting: gameState.player.combat.isFighting,\n            currentEnemy: gameState.player.combat.currentEnemy,\n            playerAttack: playerStats.attack,\n            playerStrength: playerStats.strength,\n            playerDefense: playerStats.defense,\n            playerHitpoints: playerStats.hitpoints,\n            availableEnemies: availableEnemies,\n            onStartCombat: handleStartCombat,\n            onStopCombat: handleStopCombat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-panel\",\n          children: [/*#__PURE__*/_jsxDEV(Equipment, {\n            weapon: gameState.player.equipment.weapon,\n            armor: gameState.player.equipment.armor,\n            onUnequipItem: handleUnequipItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Inventory, {\n            inventory: gameState.player.inventory,\n            onSellItem: handleSellItem,\n            onEquipItem: handleEquipItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Shop, {\n            playerGold: gameState.player.gold,\n            onBuyItem: handleBuyItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O8MkwvsOdFeuL9W1nhtG7c5Ims0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SkillList","CombatPanel","Inventory","Shop","Equipment","ENEMIES","ITEMS","SKILL_IDS","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","loading","setLoading","fetchGameData","setTimeout","mockSkills","WOODCUTTING","id","name","level","xp","xpPerAction","isActive","mastery","unlocks","FISHING","MINING","mockInventory","logs","quantity","raw_fish","mockData","player","gold","lastUpdate","Date","now","skills","inventory","equipment","combat","isFighting","error","console","handleStartSkill","skillId","prevState","newSkills","handleStopSkill","handleStartCombat","enemyId","enemy","currentEnemy","handleStopCombat","handleSellItem","itemId","item","sellPrice","newInventory","newGold","handleEquipItem","type","slot","newEquipment","currentEquipped","handleUnequipItem","undefined","handleBuyItem","Object","values","find","buyPrice","totalCost","calculatePlayerStats","_gameState$player$equ","_gameState$player$equ2","baseAttack","baseStrength","baseDefense","baseHitpoints","totalAttack","totalStrength","totalDefense","weapon","stats","weaponStats","attackBonus","strengthBonus","armor","armorStats","defenseBonus","attack","strength","defense","hitpoints","className","children","fileName","_jsxFileName","lineNumber","columnNumber","playerStats","availableEnemies","onStartSkill","onStopSkill","playerAttack","playerStrength","playerDefense","playerHitpoints","onStartCombat","onStopCombat","onUnequipItem","onSellItem","onEquipItem","playerGold","onBuyItem","_c","$RefreshReg$"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SkillList from './components/SkillList';\r\nimport CombatPanel from './components/CombatPanel';\r\nimport Inventory from './components/Inventory';\r\nimport Shop from './components/Shop';\r\nimport Equipment from './components/Equipment';\r\nimport { ENEMIES, ITEMS, SKILL_IDS } from './constants';\r\nimport { GameState, Item, Enemy, Skill } from './types';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [gameState, setGameState] = useState<GameState | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // In a real app, you would fetch from your API\r\n    const fetchGameData = async () => {\r\n      try {\r\n        // Mock API call with simulated delay\r\n        setTimeout(() => {\r\n          // Create mock skills\r\n          const mockSkills: { [id: string]: Skill } = {\r\n            [SKILL_IDS.WOODCUTTING]: {\r\n              id: SKILL_IDS.WOODCUTTING,\r\n              name: 'Woodcutting',\r\n              level: 1,\r\n              xp: 0,\r\n              xpPerAction: 5,\r\n              isActive: false,\r\n              mastery: {\r\n                level: 1,\r\n                xp: 0,\r\n                unlocks: {\r\n                  '5': 'Faster woodcutting speed',\r\n                  '10': 'Double logs chance (10%)'\r\n                }\r\n              }\r\n            },\r\n            [SKILL_IDS.FISHING]: {\r\n              id: SKILL_IDS.FISHING,\r\n              name: 'Fishing',\r\n              level: 1,\r\n              xp: 0,\r\n              xpPerAction: 7,\r\n              isActive: false,\r\n              mastery: {\r\n                level: 1,\r\n                xp: 0,\r\n                unlocks: {\r\n                  '5': 'Better fish quality',\r\n                  '10': 'Double fish chance (10%)'\r\n                }\r\n              }\r\n            },\r\n            [SKILL_IDS.MINING]: {\r\n              id: SKILL_IDS.MINING,\r\n              name: 'Mining',\r\n              level: 1,\r\n              xp: 0,\r\n              xpPerAction: 6,\r\n              isActive: false\r\n            }\r\n          };\r\n\r\n          // Create mock inventory\r\n          const mockInventory: { [id: string]: Item } = {\r\n            'logs': { ...ITEMS.logs, quantity: 5 },\r\n            'raw_fish': { ...ITEMS.raw_fish, quantity: 3 }\r\n          };\r\n\r\n          const mockData: GameState = {\r\n            player: {\r\n              id: 'player1',\r\n              gold: 100,\r\n              lastUpdate: Date.now(),\r\n              skills: mockSkills,\r\n              inventory: mockInventory,\r\n              equipment: {},\r\n              combat: {\r\n                isFighting: false\r\n              }\r\n            }\r\n          };\r\n          \r\n          setGameState(mockData);\r\n          setLoading(false);\r\n        }, 500);\r\n      } catch (error) {\r\n        console.error('Error fetching game data:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchGameData();\r\n  }, []);\r\n\r\n  // Skill handlers\r\n  const handleStartSkill = (skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    setGameState(prevState => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newSkills = { ...prevState.player.skills };\r\n      newSkills[skillId] = {\r\n        ...newSkills[skillId],\r\n        isActive: true\r\n      };\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: newSkills\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleStopSkill = (skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    setGameState(prevState => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newSkills = { ...prevState.player.skills };\r\n      newSkills[skillId] = {\r\n        ...newSkills[skillId],\r\n        isActive: false\r\n      };\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: newSkills\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  // Combat handlers\r\n  const handleStartCombat = (enemyId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const enemy = ENEMIES[enemyId];\r\n    if (!enemy) return;\r\n    \r\n    setGameState(prevState => {\r\n      if (!prevState) return prevState;\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          combat: {\r\n            currentEnemy: { ...enemy },\r\n            isFighting: true\r\n          }\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleStopCombat = () => {\r\n    if (!gameState) return;\r\n    \r\n    setGameState(prevState => {\r\n      if (!prevState) return prevState;\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          combat: {\r\n            isFighting: false\r\n          }\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  // Inventory handlers\r\n  const handleSellItem = (itemId: string, quantity: number) => {\r\n    if (!gameState) return;\r\n    \r\n    const item = gameState.player.inventory[itemId];\r\n    if (!item || !item.sellPrice) return;\r\n    \r\n    setGameState(prevState => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newInventory = { ...prevState.player.inventory };\r\n      const newGold = prevState.player.gold + (item.sellPrice * quantity);\r\n      \r\n      if (item.quantity <= quantity) {\r\n        delete newInventory[itemId];\r\n      } else {\r\n        newInventory[itemId] = {\r\n          ...item,\r\n          quantity: item.quantity - quantity\r\n        };\r\n      }\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          gold: newGold,\r\n          inventory: newInventory\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleEquipItem = (itemId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const item = gameState.player.inventory[itemId];\r\n    if (!item || item.type !== 'equipment' || !item.slot) return;\r\n    \r\n    setGameState(prevState => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newInventory = { ...prevState.player.inventory };\r\n      const newEquipment = { ...prevState.player.equipment };\r\n      \r\n      // Unequip current item if any\r\n      const currentEquipped = newEquipment[item.slot];\r\n      if (currentEquipped) {\r\n        if (newInventory[currentEquipped.id]) {\r\n          newInventory[currentEquipped.id].quantity += 1;\r\n        } else {\r\n          newInventory[currentEquipped.id] = {\r\n            ...currentEquipped,\r\n            quantity: 1\r\n          };\r\n        }\r\n      }\r\n      \r\n      // Equip new item\r\n      newEquipment[item.slot] = { ...item, quantity: 1 };\r\n      \r\n      // Remove from inventory\r\n      if (item.quantity <= 1) {\r\n        delete newInventory[itemId];\r\n      } else {\r\n        newInventory[itemId] = {\r\n          ...item,\r\n          quantity: item.quantity - 1\r\n        };\r\n      }\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          equipment: newEquipment,\r\n          inventory: newInventory\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleUnequipItem = (slot: 'weapon' | 'armor') => {\r\n    if (!gameState) return;\r\n    \r\n    const item = gameState.player.equipment[slot];\r\n    if (!item) return;\r\n    \r\n    setGameState(prevState => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newInventory = { ...prevState.player.inventory };\r\n      const newEquipment = { ...prevState.player.equipment };\r\n      \r\n      // Add to inventory\r\n      if (newInventory[item.id]) {\r\n        newInventory[item.id].quantity += 1;\r\n      } else {\r\n        newInventory[item.id] = {\r\n          ...item,\r\n          quantity: 1\r\n        };\r\n      }\r\n      \r\n      // Remove from equipment\r\n      newEquipment[slot] = undefined;\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          equipment: newEquipment,\r\n          inventory: newInventory\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  // Shop handlers\r\n  const handleBuyItem = (itemId: string, quantity: number) => {\r\n    if (!gameState) return;\r\n    \r\n    const item = Object.values(ITEMS).find(item => item.id === itemId);\r\n    if (!item || !item.buyPrice) return;\r\n    \r\n    const totalCost = item.buyPrice * quantity;\r\n    if (gameState.player.gold < totalCost) return;\r\n    \r\n    setGameState(prevState => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newInventory = { ...prevState.player.inventory };\r\n      const newGold = prevState.player.gold - totalCost;\r\n      \r\n      if (newInventory[itemId]) {\r\n        newInventory[itemId] = {\r\n          ...newInventory[itemId],\r\n          quantity: newInventory[itemId].quantity + quantity\r\n        };\r\n      } else {\r\n        newInventory[itemId] = {\r\n          ...item,\r\n          quantity\r\n        };\r\n      }\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          gold: newGold,\r\n          inventory: newInventory\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  // Calculate player combat stats\r\n  const calculatePlayerStats = () => {\r\n    const baseAttack = 1;\r\n    const baseStrength = 1;\r\n    const baseDefense = 1;\r\n    const baseHitpoints = 10;\r\n    \r\n    let totalAttack = baseAttack;\r\n    let totalStrength = baseStrength;\r\n    let totalDefense = baseDefense;\r\n    \r\n    if (gameState?.player.equipment.weapon?.stats) {\r\n      const weaponStats = gameState.player.equipment.weapon.stats;\r\n      if (weaponStats.attackBonus) totalAttack += weaponStats.attackBonus;\r\n      if (weaponStats.strengthBonus) totalStrength += weaponStats.strengthBonus;\r\n    }\r\n    \r\n    if (gameState?.player.equipment.armor?.stats) {\r\n      const armorStats = gameState.player.equipment.armor.stats;\r\n      if (armorStats.defenseBonus) totalDefense += armorStats.defenseBonus;\r\n    }\r\n    \r\n    return {\r\n      attack: totalAttack,\r\n      strength: totalStrength,\r\n      defense: totalDefense,\r\n      hitpoints: baseHitpoints\r\n    };\r\n  };\r\n\r\n  if (loading || !gameState) {\r\n    return <div className=\"loading\">Loading game data...</div>;\r\n  }\r\n\r\n  const playerStats = calculatePlayerStats();\r\n  const availableEnemies = Object.values(ENEMIES);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"app-header\">\r\n        <h1>Melvor Idle Replica</h1>\r\n        <div className=\"player-gold\">Gold: {gameState.player.gold}</div>\r\n      </header>\r\n      \r\n      <main className=\"app-main\">\r\n        <div className=\"game-container\">\r\n          <div className=\"left-panel\">\r\n            <SkillList \r\n              skills={gameState.player.skills}\r\n              onStartSkill={handleStartSkill}\r\n              onStopSkill={handleStopSkill}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"center-panel\">\r\n            <CombatPanel \r\n              isFighting={gameState.player.combat.isFighting}\r\n              currentEnemy={gameState.player.combat.currentEnemy}\r\n              playerAttack={playerStats.attack}\r\n              playerStrength={playerStats.strength}\r\n              playerDefense={playerStats.defense}\r\n              playerHitpoints={playerStats.hitpoints}\r\n              availableEnemies={availableEnemies}\r\n              onStartCombat={handleStartCombat}\r\n              onStopCombat={handleStopCombat}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"right-panel\">\r\n            <Equipment \r\n              weapon={gameState.player.equipment.weapon}\r\n              armor={gameState.player.equipment.armor}\r\n              onUnequipItem={handleUnequipItem}\r\n            />\r\n            <Inventory \r\n              inventory={gameState.player.inventory}\r\n              onSellItem={handleSellItem}\r\n              onEquipItem={handleEquipItem}\r\n            />\r\n            <Shop \r\n              playerGold={gameState.player.gold}\r\n              onBuyItem={handleBuyItem}\r\n            />\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{useState}from'react';import{useGameContext}from'../context/GameContext';import api from'../services/api';export const useShop=()=>{const{gameState,updateGameState,refreshGameState}=useGameContext();const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const buyItem=async(item,quantity)=>{if(!item.buyPrice){setError('This item cannot be purchased');return;}const totalCost=item.buyPrice*quantity;if(gameState.player.gold<totalCost){setError('Not enough gold to purchase this item');return;}try{setIsLoading(true);setError(null);// First optimistically update the UI\nupdateGameState(prevState=>{const newInventory={...prevState.player.inventory};// Add item to inventory\nif(newInventory[item.id]){newInventory[item.id]={...newInventory[item.id],quantity:newInventory[item.id].quantity+quantity};}else{newInventory[item.id]={...item,quantity};}// Deduct gold\nconst newGold=prevState.player.gold-totalCost;return{...prevState,player:{...prevState.player,gold:newGold,inventory:newInventory}};});// Then try to update the server\ntry{await api.buyItem(item.id,quantity);}catch(apiError){console.error('API error when buying item:',apiError);// Continue with the client-side purchase even if API fails\n}}catch(err){console.error('Error buying item:',err);setError('Failed to purchase item');// Rollback optimistic update\nawait refreshGameState();}finally{setIsLoading(false);}};// Create a list of items available in the shop\n// In a real app, this would come from the API\nconst shopItems=[{id:'bronze_sword',name:'Bronze Sword',type:'equipment',slot:'weapon',quantity:1,buyPrice:50,sellPrice:25,stats:{attackBonus:4,strengthBonus:2,defenseBonus:0}},{id:'leather_armor',name:'Leather Armor',type:'equipment',slot:'armor',quantity:1,buyPrice:60,sellPrice:30,stats:{attackBonus:0,strengthBonus:0,defenseBonus:5}},{id:'health_potion',name:'Health Potion',type:'resource',quantity:1,buyPrice:25,sellPrice:10}];return{shopItems,isLoading,error,buyItem,gold:gameState.player.gold};};","map":{"version":3,"names":["useState","useGameContext","api","useShop","gameState","updateGameState","refreshGameState","isLoading","setIsLoading","error","setError","buyItem","item","quantity","buyPrice","totalCost","player","gold","prevState","newInventory","inventory","id","newGold","apiError","console","err","shopItems","name","type","slot","sellPrice","stats","attackBonus","strengthBonus","defenseBonus"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/hooks/useShop.ts"],"sourcesContent":["import { useState } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { GameState, Item } from '../types';\nimport api from '../services/api';\n\nexport const useShop = () => {\n  const { gameState, updateGameState, refreshGameState } = useGameContext();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const buyItem = async (item: Item, quantity: number) => {\n    if (!item.buyPrice) {\n      setError('This item cannot be purchased');\n      return;\n    }\n    \n    const totalCost = item.buyPrice * quantity;\n    if (gameState.player.gold < totalCost) {\n      setError('Not enough gold to purchase this item');\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      // First optimistically update the UI\n      updateGameState((prevState: GameState) => {\n        const newInventory = { ...prevState.player.inventory };\n        \n        // Add item to inventory\n        if (newInventory[item.id]) {\n          newInventory[item.id] = {\n            ...newInventory[item.id],\n            quantity: newInventory[item.id].quantity + quantity\n          };\n        } else {\n          newInventory[item.id] = {\n            ...item,\n            quantity\n          };\n        }\n        \n        // Deduct gold\n        const newGold = prevState.player.gold - totalCost;\n        \n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: newGold,\n            inventory: newInventory\n          }\n        };\n      });\n      \n      // Then try to update the server\n      try {\n        await api.buyItem(item.id, quantity);\n      } catch (apiError) {\n        console.error('API error when buying item:', apiError);\n        // Continue with the client-side purchase even if API fails\n      }\n      \n    } catch (err) {\n      console.error('Error buying item:', err);\n      setError('Failed to purchase item');\n      \n      // Rollback optimistic update\n      await refreshGameState();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Create a list of items available in the shop\n  // In a real app, this would come from the API\n  const shopItems: Item[] = [\n    {\n      id: 'bronze_sword',\n      name: 'Bronze Sword',\n      type: 'equipment',\n      slot: 'weapon',\n      quantity: 1,\n      buyPrice: 50,\n      sellPrice: 25,\n      stats: {\n        attackBonus: 4,\n        strengthBonus: 2,\n        defenseBonus: 0\n      }\n    },\n    {\n      id: 'leather_armor',\n      name: 'Leather Armor',\n      type: 'equipment',\n      slot: 'armor',\n      quantity: 1,\n      buyPrice: 60,\n      sellPrice: 30,\n      stats: {\n        attackBonus: 0,\n        strengthBonus: 0,\n        defenseBonus: 5\n      }\n    },\n    {\n      id: 'health_potion',\n      name: 'Health Potion',\n      type: 'resource',\n      quantity: 1,\n      buyPrice: 25,\n      sellPrice: 10\n    }\n  ];\n  \n  return {\n    shopItems,\n    isLoading,\n    error,\n    buyItem,\n    gold: gameState.player.gold\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport api from '../services/api';\nexport const useShop = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState,\n    refreshGameState\n  } = useGameContext();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const buyItem = async (item, quantity) => {\n    if (!gameState) return;\n    if (!item.buyPrice) {\n      setError('This item cannot be purchased');\n      return;\n    }\n    const totalCost = item.buyPrice * quantity;\n    if (gameState.player.gold < totalCost) {\n      setError('Not enough gold to purchase this item');\n      return;\n    }\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // First optimistically update the UI\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        const newInventory = {\n          ...prevState.player.inventory\n        };\n\n        // Add item to inventory\n        if (newInventory[item.id]) {\n          newInventory[item.id] = {\n            ...newInventory[item.id],\n            quantity: newInventory[item.id].quantity + quantity\n          };\n        } else {\n          newInventory[item.id] = {\n            ...item,\n            quantity\n          };\n        }\n\n        // Deduct gold\n        const newGold = prevState.player.gold - totalCost;\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: newGold,\n            inventory: newInventory\n          }\n        };\n      });\n\n      // Then try to update the server\n      await api.buyItem(item.id, quantity);\n\n      // Refresh state from server to ensure consistency\n      await refreshGameState();\n    } catch (err) {\n      setError('Failed to buy item. Please try again.');\n      console.error('Buy item error:', err);\n\n      // Refresh state from server to ensure consistency after error\n      await refreshGameState();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    gold: (gameState === null || gameState === void 0 ? void 0 : gameState.player.gold) || 0,\n    buyItem,\n    isLoading,\n    error\n  };\n};\n_s(useShop, \"mszNg6x2NWwbrbFVHAOFIGTl33M=\", false, function () {\n  return [useGameContext];\n});","map":{"version":3,"names":["useState","useGameContext","api","useShop","_s","gameState","updateGameState","refreshGameState","isLoading","setIsLoading","error","setError","buyItem","item","quantity","buyPrice","totalCost","player","gold","prevState","newInventory","inventory","id","newGold","err","console"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/hooks/useShop.ts"],"sourcesContent":["import { useState } from 'react';\r\nimport { useGameContext } from '../context/GameContext';\r\nimport { GameState, Item } from '../types';\r\nimport api from '../services/api';\r\n\r\nexport const useShop = () => {\r\n  const { gameState, updateGameState, refreshGameState } = useGameContext();\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const buyItem = async (item: Item, quantity: number) => {\r\n    if (!gameState) return;\r\n    \r\n    if (!item.buyPrice) {\r\n      setError('This item cannot be purchased');\r\n      return;\r\n    }\r\n    \r\n    const totalCost = item.buyPrice * quantity;\r\n    if (gameState.player.gold < totalCost) {\r\n      setError('Not enough gold to purchase this item');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      // First optimistically update the UI\r\n      updateGameState((prevState: GameState | null) => {\r\n        if (!prevState) return prevState;\r\n        \r\n        const newInventory = { ...prevState.player.inventory };\r\n        \r\n        // Add item to inventory\r\n        if (newInventory[item.id]) {\r\n          newInventory[item.id] = {\r\n            ...newInventory[item.id],\r\n            quantity: newInventory[item.id].quantity + quantity\r\n          };\r\n        } else {\r\n          newInventory[item.id] = {\r\n            ...item,\r\n            quantity\r\n          };\r\n        }\r\n        \r\n        // Deduct gold\r\n        const newGold = prevState.player.gold - totalCost;\r\n        \r\n        return {\r\n          ...prevState,\r\n          player: {\r\n            ...prevState.player,\r\n            gold: newGold,\r\n            inventory: newInventory\r\n          }\r\n        };\r\n      });\r\n      \r\n      // Then try to update the server\r\n      await api.buyItem(item.id, quantity);\r\n      \r\n      // Refresh state from server to ensure consistency\r\n      await refreshGameState();\r\n      \r\n    } catch (err) {\r\n      setError('Failed to buy item. Please try again.');\r\n      console.error('Buy item error:', err);\r\n      \r\n      // Refresh state from server to ensure consistency after error\r\n      await refreshGameState();\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  return {\r\n    gold: gameState?.player.gold || 0,\r\n    buyItem,\r\n    isLoading,\r\n    error\r\n  };\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,wBAAwB;AAEvD,OAAOC,GAAG,MAAM,iBAAiB;AAEjC,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC,SAAS;IAAEC,eAAe;IAAEC;EAAiB,CAAC,GAAGN,cAAc,CAAC,CAAC;EACzE,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMY,OAAO,GAAG,MAAAA,CAAOC,IAAU,EAAEC,QAAgB,KAAK;IACtD,IAAI,CAACT,SAAS,EAAE;IAEhB,IAAI,CAACQ,IAAI,CAACE,QAAQ,EAAE;MAClBJ,QAAQ,CAAC,+BAA+B,CAAC;MACzC;IACF;IAEA,MAAMK,SAAS,GAAGH,IAAI,CAACE,QAAQ,GAAGD,QAAQ;IAC1C,IAAIT,SAAS,CAACY,MAAM,CAACC,IAAI,GAAGF,SAAS,EAAE;MACrCL,QAAQ,CAAC,uCAAuC,CAAC;MACjD;IACF;IAEA,IAAI;MACFF,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACAL,eAAe,CAAEa,SAA2B,IAAK;QAC/C,IAAI,CAACA,SAAS,EAAE,OAAOA,SAAS;QAEhC,MAAMC,YAAY,GAAG;UAAE,GAAGD,SAAS,CAACF,MAAM,CAACI;QAAU,CAAC;;QAEtD;QACA,IAAID,YAAY,CAACP,IAAI,CAACS,EAAE,CAAC,EAAE;UACzBF,YAAY,CAACP,IAAI,CAACS,EAAE,CAAC,GAAG;YACtB,GAAGF,YAAY,CAACP,IAAI,CAACS,EAAE,CAAC;YACxBR,QAAQ,EAAEM,YAAY,CAACP,IAAI,CAACS,EAAE,CAAC,CAACR,QAAQ,GAAGA;UAC7C,CAAC;QACH,CAAC,MAAM;UACLM,YAAY,CAACP,IAAI,CAACS,EAAE,CAAC,GAAG;YACtB,GAAGT,IAAI;YACPC;UACF,CAAC;QACH;;QAEA;QACA,MAAMS,OAAO,GAAGJ,SAAS,CAACF,MAAM,CAACC,IAAI,GAAGF,SAAS;QAEjD,OAAO;UACL,GAAGG,SAAS;UACZF,MAAM,EAAE;YACN,GAAGE,SAAS,CAACF,MAAM;YACnBC,IAAI,EAAEK,OAAO;YACbF,SAAS,EAAED;UACb;QACF,CAAC;MACH,CAAC,CAAC;;MAEF;MACA,MAAMlB,GAAG,CAACU,OAAO,CAACC,IAAI,CAACS,EAAE,EAAER,QAAQ,CAAC;;MAEpC;MACA,MAAMP,gBAAgB,CAAC,CAAC;IAE1B,CAAC,CAAC,OAAOiB,GAAG,EAAE;MACZb,QAAQ,CAAC,uCAAuC,CAAC;MACjDc,OAAO,CAACf,KAAK,CAAC,iBAAiB,EAAEc,GAAG,CAAC;;MAErC;MACA,MAAMjB,gBAAgB,CAAC,CAAC;IAC1B,CAAC,SAAS;MACRE,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IACLS,IAAI,EAAE,CAAAb,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEY,MAAM,CAACC,IAAI,KAAI,CAAC;IACjCN,OAAO;IACPJ,SAAS;IACTE;EACF,CAAC;AACH,CAAC;AAACN,EAAA,CA9EWD,OAAO;EAAA,QACuCF,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
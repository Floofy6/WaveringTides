{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport api from '../services/api';\nexport const useShop = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState,\n    refreshGameState\n  } = useGameContext();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const buyItem = async (item, quantity) => {\n    if (!item.buyPrice) {\n      setError('This item cannot be purchased');\n      return;\n    }\n    const totalCost = item.buyPrice * quantity;\n    if (gameState.player.gold < totalCost) {\n      setError('Not enough gold to purchase this item');\n      return;\n    }\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // First optimistically update the UI\n      updateGameState(prevState => {\n        const newInventory = {\n          ...prevState.player.inventory\n        };\n\n        // Add item to inventory\n        if (newInventory[item.id]) {\n          newInventory[item.id] = {\n            ...newInventory[item.id],\n            quantity: newInventory[item.id].quantity + quantity\n          };\n        } else {\n          newInventory[item.id] = {\n            ...item,\n            quantity\n          };\n        }\n\n        // Deduct gold\n        const newGold = prevState.player.gold - totalCost;\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: newGold,\n            inventory: newInventory\n          }\n        };\n      });\n\n      // Then try to update the server\n      try {\n        await api.buyItem(item.id, quantity);\n      } catch (apiError) {\n        console.error('API error when buying item:', apiError);\n        // Continue with the client-side purchase even if API fails\n      }\n    } catch (err) {\n      console.error('Error buying item:', err);\n      setError('Failed to purchase item');\n\n      // Rollback optimistic update\n      await refreshGameState();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Create a list of items available in the shop\n  // In a real app, this would come from the API\n  const shopItems = [{\n    id: 'bronze_sword',\n    name: 'Bronze Sword',\n    type: 'equipment',\n    slot: 'weapon',\n    quantity: 1,\n    buyPrice: 50,\n    sellPrice: 25,\n    stats: {\n      attackBonus: 4,\n      strengthBonus: 2,\n      defenseBonus: 0\n    }\n  }, {\n    id: 'leather_armor',\n    name: 'Leather Armor',\n    type: 'equipment',\n    slot: 'armor',\n    quantity: 1,\n    buyPrice: 60,\n    sellPrice: 30,\n    stats: {\n      attackBonus: 0,\n      strengthBonus: 0,\n      defenseBonus: 5\n    }\n  }, {\n    id: 'health_potion',\n    name: 'Health Potion',\n    type: 'resource',\n    quantity: 1,\n    buyPrice: 25,\n    sellPrice: 10\n  }];\n  return {\n    shopItems,\n    isLoading,\n    error,\n    buyItem,\n    gold: gameState.player.gold\n  };\n};\n_s(useShop, \"mszNg6x2NWwbrbFVHAOFIGTl33M=\", false, function () {\n  return [useGameContext];\n});","map":{"version":3,"names":["useState","useGameContext","api","useShop","_s","gameState","updateGameState","refreshGameState","isLoading","setIsLoading","error","setError","buyItem","item","quantity","buyPrice","totalCost","player","gold","prevState","newInventory","inventory","id","newGold","apiError","console","err","shopItems","name","type","slot","sellPrice","stats","attackBonus","strengthBonus","defenseBonus"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/hooks/useShop.ts"],"sourcesContent":["import { useState } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { GameState, Item } from '../types';\nimport api from '../services/api';\n\nexport const useShop = () => {\n  const { gameState, updateGameState, refreshGameState } = useGameContext();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const buyItem = async (item: Item, quantity: number) => {\n    if (!item.buyPrice) {\n      setError('This item cannot be purchased');\n      return;\n    }\n    \n    const totalCost = item.buyPrice * quantity;\n    if (gameState.player.gold < totalCost) {\n      setError('Not enough gold to purchase this item');\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      // First optimistically update the UI\n      updateGameState((prevState: GameState) => {\n        const newInventory = { ...prevState.player.inventory };\n        \n        // Add item to inventory\n        if (newInventory[item.id]) {\n          newInventory[item.id] = {\n            ...newInventory[item.id],\n            quantity: newInventory[item.id].quantity + quantity\n          };\n        } else {\n          newInventory[item.id] = {\n            ...item,\n            quantity\n          };\n        }\n        \n        // Deduct gold\n        const newGold = prevState.player.gold - totalCost;\n        \n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            gold: newGold,\n            inventory: newInventory\n          }\n        };\n      });\n      \n      // Then try to update the server\n      try {\n        await api.buyItem(item.id, quantity);\n      } catch (apiError) {\n        console.error('API error when buying item:', apiError);\n        // Continue with the client-side purchase even if API fails\n      }\n      \n    } catch (err) {\n      console.error('Error buying item:', err);\n      setError('Failed to purchase item');\n      \n      // Rollback optimistic update\n      await refreshGameState();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Create a list of items available in the shop\n  // In a real app, this would come from the API\n  const shopItems: Item[] = [\n    {\n      id: 'bronze_sword',\n      name: 'Bronze Sword',\n      type: 'equipment',\n      slot: 'weapon',\n      quantity: 1,\n      buyPrice: 50,\n      sellPrice: 25,\n      stats: {\n        attackBonus: 4,\n        strengthBonus: 2,\n        defenseBonus: 0\n      }\n    },\n    {\n      id: 'leather_armor',\n      name: 'Leather Armor',\n      type: 'equipment',\n      slot: 'armor',\n      quantity: 1,\n      buyPrice: 60,\n      sellPrice: 30,\n      stats: {\n        attackBonus: 0,\n        strengthBonus: 0,\n        defenseBonus: 5\n      }\n    },\n    {\n      id: 'health_potion',\n      name: 'Health Potion',\n      type: 'resource',\n      quantity: 1,\n      buyPrice: 25,\n      sellPrice: 10\n    }\n  ];\n  \n  return {\n    shopItems,\n    isLoading,\n    error,\n    buyItem,\n    gold: gameState.player.gold\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
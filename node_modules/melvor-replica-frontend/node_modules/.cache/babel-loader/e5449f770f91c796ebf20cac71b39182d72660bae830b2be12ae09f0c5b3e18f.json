{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { useSkills } from '../hooks/useSkills';\nimport { useGameContext } from '../context/GameContext';\n\n/**\r\n * GameTick component - Handles game updates at regular intervals\r\n * This component doesn't render anything but creates a game loop\r\n */\nconst GameTick = () => {\n  _s();\n  const {\n    getActiveSkills,\n    addExperience,\n    addMasteryExperience\n  } = useSkills();\n  const {\n    gameState\n  } = useGameContext();\n  const lastUpdateRef = useRef(Date.now());\n\n  // Set up game tick for recurring actions\n  useEffect(() => {\n    const tickInterval = 1000; // Update every second\n\n    const gameLoop = () => {\n      const now = Date.now();\n      const deltaTime = now - lastUpdateRef.current;\n      lastUpdateRef.current = now;\n\n      // Get all active skills\n      const activeSkills = getActiveSkills();\n\n      // Update each active skill\n      activeSkills.forEach(skillId => {\n        const skill = gameState === null || gameState === void 0 ? void 0 : gameState.player.skills[skillId];\n        if (skill) {\n          // Calculate XP gain based on skill's xpPerAction and time elapsed\n          // For simplicity, we're giving XP each second based on xpPerAction\n          const xpGain = skill.xpPerAction * (deltaTime / 1000);\n\n          // Add XP to the skill\n          addExperience(skillId, xpGain);\n\n          // If the skill has mastery, add mastery experience as well\n          if (skill.mastery) {\n            // Mastery XP is typically a fraction of regular XP\n            const masteryXpGain = xpGain * 0.5;\n            addMasteryExperience(skillId, masteryXpGain);\n          }\n        }\n      });\n    };\n\n    // Start the game loop\n    const timer = setInterval(gameLoop, tickInterval);\n\n    // Clean up on unmount\n    return () => clearInterval(timer);\n  }, [gameState, getActiveSkills, addExperience, addMasteryExperience]);\n\n  // This component doesn't render anything\n  return null;\n};\n_s(GameTick, \"VAB1MYmuL91fAed0TnsLcj4i/JA=\", false, function () {\n  return [useSkills, useGameContext];\n});\n_c = GameTick;\nexport default GameTick;\nvar _c;\n$RefreshReg$(_c, \"GameTick\");","map":{"version":3,"names":["useEffect","useRef","useSkills","useGameContext","GameTick","_s","getActiveSkills","addExperience","addMasteryExperience","gameState","lastUpdateRef","Date","now","tickInterval","gameLoop","deltaTime","current","activeSkills","forEach","skillId","skill","player","skills","xpGain","xpPerAction","mastery","masteryXpGain","timer","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/components/GameTick.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useSkills } from '../hooks/useSkills';\r\nimport { useGameContext } from '../context/GameContext';\r\n\r\n/**\r\n * GameTick component - Handles game updates at regular intervals\r\n * This component doesn't render anything but creates a game loop\r\n */\r\nconst GameTick: React.FC = () => {\r\n  const { getActiveSkills, addExperience, addMasteryExperience } = useSkills();\r\n  const { gameState } = useGameContext();\r\n  const lastUpdateRef = useRef<number>(Date.now());\r\n  \r\n  // Set up game tick for recurring actions\r\n  useEffect(() => {\r\n    const tickInterval = 1000; // Update every second\r\n    \r\n    const gameLoop = () => {\r\n      const now = Date.now();\r\n      const deltaTime = now - lastUpdateRef.current;\r\n      lastUpdateRef.current = now;\r\n      \r\n      // Get all active skills\r\n      const activeSkills = getActiveSkills();\r\n      \r\n      // Update each active skill\r\n      activeSkills.forEach(skillId => {\r\n        const skill = gameState?.player.skills[skillId];\r\n        if (skill) {\r\n          // Calculate XP gain based on skill's xpPerAction and time elapsed\r\n          // For simplicity, we're giving XP each second based on xpPerAction\r\n          const xpGain = skill.xpPerAction * (deltaTime / 1000);\r\n          \r\n          // Add XP to the skill\r\n          addExperience(skillId, xpGain);\r\n          \r\n          // If the skill has mastery, add mastery experience as well\r\n          if (skill.mastery) {\r\n            // Mastery XP is typically a fraction of regular XP\r\n            const masteryXpGain = xpGain * 0.5;\r\n            addMasteryExperience(skillId, masteryXpGain);\r\n          }\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Start the game loop\r\n    const timer = setInterval(gameLoop, tickInterval);\r\n    \r\n    // Clean up on unmount\r\n    return () => clearInterval(timer);\r\n  }, [gameState, getActiveSkills, addExperience, addMasteryExperience]);\r\n  \r\n  // This component doesn't render anything\r\n  return null;\r\n};\r\n\r\nexport default GameTick; "],"mappings":";AAAA,SAAgBA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,cAAc,QAAQ,wBAAwB;;AAEvD;AACA;AACA;AACA;AACA,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC,eAAe;IAAEC,aAAa;IAAEC;EAAqB,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC5E,MAAM;IAAEO;EAAU,CAAC,GAAGN,cAAc,CAAC,CAAC;EACtC,MAAMO,aAAa,GAAGT,MAAM,CAASU,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;;EAEhD;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMa,YAAY,GAAG,IAAI,CAAC,CAAC;;IAE3B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrB,MAAMF,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;MACtB,MAAMG,SAAS,GAAGH,GAAG,GAAGF,aAAa,CAACM,OAAO;MAC7CN,aAAa,CAACM,OAAO,GAAGJ,GAAG;;MAE3B;MACA,MAAMK,YAAY,GAAGX,eAAe,CAAC,CAAC;;MAEtC;MACAW,YAAY,CAACC,OAAO,CAACC,OAAO,IAAI;QAC9B,MAAMC,KAAK,GAAGX,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEY,MAAM,CAACC,MAAM,CAACH,OAAO,CAAC;QAC/C,IAAIC,KAAK,EAAE;UACT;UACA;UACA,MAAMG,MAAM,GAAGH,KAAK,CAACI,WAAW,IAAIT,SAAS,GAAG,IAAI,CAAC;;UAErD;UACAR,aAAa,CAACY,OAAO,EAAEI,MAAM,CAAC;;UAE9B;UACA,IAAIH,KAAK,CAACK,OAAO,EAAE;YACjB;YACA,MAAMC,aAAa,GAAGH,MAAM,GAAG,GAAG;YAClCf,oBAAoB,CAACW,OAAO,EAAEO,aAAa,CAAC;UAC9C;QACF;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMC,KAAK,GAAGC,WAAW,CAACd,QAAQ,EAAED,YAAY,CAAC;;IAEjD;IACA,OAAO,MAAMgB,aAAa,CAACF,KAAK,CAAC;EACnC,CAAC,EAAE,CAAClB,SAAS,EAAEH,eAAe,EAAEC,aAAa,EAAEC,oBAAoB,CAAC,CAAC;;EAErE;EACA,OAAO,IAAI;AACb,CAAC;AAACH,EAAA,CA/CID,QAAkB;EAAA,QAC2CF,SAAS,EACpDC,cAAc;AAAA;AAAA2B,EAAA,GAFhC1B,QAAkB;AAiDxB,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
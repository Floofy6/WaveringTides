{"ast":null,"code":"import{useGameContext}from'../context/GameContext';import{useCallback}from'react';/**\n * Hook for managing inventory-related state and operations\n */export const useInventory=()=>{const{gameState,updateGameState}=useGameContext();/**\n   * Sell an item from the inventory\n   */const sellItem=(itemId,quantity)=>{const item=gameState.player.inventory[itemId];if(!item||!item.sellPrice)return;updateGameState(prevState=>{const newInventory={...prevState.player.inventory};// Use the non-null assertion since we already checked for the sellPrice above\nconst newGold=prevState.player.gold+item.sellPrice*quantity;if(item.quantity<=quantity){delete newInventory[itemId];}else{newInventory[itemId]={...item,quantity:item.quantity-quantity};}return{...prevState,player:{...prevState.player,gold:newGold,inventory:newInventory}};});};/**\n   * Equip an item from the inventory\n   */const equipItem=itemId=>{const item=gameState.player.inventory[itemId];if(!item||item.type!=='equipment'||!item.slot)return;updateGameState(prevState=>{const newInventory={...prevState.player.inventory};const newEquipment={...prevState.player.equipment};// Type guard to ensure slot is 'weapon' or 'armor'\nif(item.slot==='weapon'||item.slot==='armor'){// Unequip current item if any\nconst currentEquipped=newEquipment[item.slot];if(currentEquipped){if(newInventory[currentEquipped.id]){newInventory[currentEquipped.id].quantity+=1;}else{newInventory[currentEquipped.id]={...currentEquipped,quantity:1};}}// Equip new item\nnewEquipment[item.slot]={...item,quantity:1};}// Remove from inventory\nif(item.quantity<=1){delete newInventory[itemId];}else{newInventory[itemId]={...item,quantity:item.quantity-1};}return{...prevState,player:{...prevState.player,inventory:newInventory,equipment:newEquipment}};});};/**\n   * Unequip an item from equipment slots\n   */const unequipItem=slot=>{const equippedItem=gameState.player.equipment[slot];if(!equippedItem)return;updateGameState(prevState=>{const newInventory={...prevState.player.inventory};const newEquipment={...prevState.player.equipment};// Add to inventory\nif(newInventory[equippedItem.id]){newInventory[equippedItem.id].quantity+=1;}else{newInventory[equippedItem.id]={...equippedItem,quantity:1};}// Remove from equipment\nnewEquipment[slot]=undefined;return{...prevState,player:{...prevState.player,inventory:newInventory,equipment:newEquipment}};});};/**\n   * Add an item to the inventory\n   */const addItem=item=>{updateGameState(prevState=>{const newInventory={...prevState.player.inventory};if(newInventory[item.id]){newInventory[item.id]={...newInventory[item.id],quantity:newInventory[item.id].quantity+item.quantity};}else{newInventory[item.id]={...item};}return{...prevState,player:{...prevState.player,inventory:newInventory}};});};/**\n   * Check if the player has a certain quantity of an item\n   */const checkItemQuantity=useCallback(function(itemId){let quantity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;const item=gameState.player.inventory[itemId];return item&&item.quantity>=quantity;},[gameState]);/**\n   * Get the quantity of a specific item in the inventory\n   */const getItemQuantity=useCallback(itemId=>{const item=gameState.player.inventory[itemId];return item?item.quantity:0;},[gameState]);return{inventory:gameState.player.inventory,equipment:gameState.player.equipment,sellItem,equipItem,unequipItem,addItem,checkItemQuantity,getItemQuantity};};","map":{"version":3,"names":["useGameContext","useCallback","useInventory","gameState","updateGameState","sellItem","itemId","quantity","item","player","inventory","sellPrice","prevState","newInventory","newGold","gold","equipItem","type","slot","newEquipment","equipment","currentEquipped","id","unequipItem","equippedItem","undefined","addItem","checkItemQuantity","arguments","length","getItemQuantity"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/hooks/useInventory.ts"],"sourcesContent":["import { useGameContext } from '../context/GameContext';\nimport { GameState, Item } from '../types';\nimport { useCallback } from 'react';\n\n/**\n * Hook for managing inventory-related state and operations\n */\nexport const useInventory = () => {\n  const { gameState, updateGameState } = useGameContext();\n  \n  /**\n   * Sell an item from the inventory\n   */\n  const sellItem = (itemId: string, quantity: number) => {\n    const item = gameState.player.inventory[itemId];\n    if (!item || !item.sellPrice) return;\n    \n    updateGameState((prevState: GameState) => {\n      const newInventory = { ...prevState.player.inventory };\n      // Use the non-null assertion since we already checked for the sellPrice above\n      const newGold = prevState.player.gold + (item.sellPrice! * quantity);\n      \n      if (item.quantity <= quantity) {\n        delete newInventory[itemId];\n      } else {\n        newInventory[itemId] = {\n          ...item,\n          quantity: item.quantity - quantity\n        };\n      }\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          gold: newGold,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n\n  /**\n   * Equip an item from the inventory\n   */\n  const equipItem = (itemId: string) => {\n    const item = gameState.player.inventory[itemId];\n    if (!item || item.type !== 'equipment' || !item.slot) return;\n    \n    updateGameState((prevState: GameState) => {\n      const newInventory = { ...prevState.player.inventory };\n      const newEquipment = { ...prevState.player.equipment };\n      \n      // Type guard to ensure slot is 'weapon' or 'armor'\n      if (item.slot === 'weapon' || item.slot === 'armor') {\n        // Unequip current item if any\n        const currentEquipped = newEquipment[item.slot];\n        if (currentEquipped) {\n          if (newInventory[currentEquipped.id]) {\n            newInventory[currentEquipped.id].quantity += 1;\n          } else {\n            newInventory[currentEquipped.id] = {\n              ...currentEquipped,\n              quantity: 1\n            };\n          }\n        }\n      \n        // Equip new item\n        newEquipment[item.slot] = { ...item, quantity: 1 };\n      }\n      \n      // Remove from inventory\n      if (item.quantity <= 1) {\n        delete newInventory[itemId];\n      } else {\n        newInventory[itemId] = {\n          ...item,\n          quantity: item.quantity - 1\n        };\n      }\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          inventory: newInventory,\n          equipment: newEquipment\n        }\n      };\n    });\n  };\n  \n  /**\n   * Unequip an item from equipment slots\n   */\n  const unequipItem = (slot: 'weapon' | 'armor') => {\n    const equippedItem = gameState.player.equipment[slot];\n    if (!equippedItem) return;\n    \n    updateGameState((prevState: GameState) => {\n      const newInventory = { ...prevState.player.inventory };\n      const newEquipment = { ...prevState.player.equipment };\n      \n      // Add to inventory\n      if (newInventory[equippedItem.id]) {\n        newInventory[equippedItem.id].quantity += 1;\n      } else {\n        newInventory[equippedItem.id] = {\n          ...equippedItem,\n          quantity: 1\n        };\n      }\n      \n      // Remove from equipment\n      newEquipment[slot] = undefined;\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          inventory: newInventory,\n          equipment: newEquipment\n        }\n      };\n    });\n  };\n  \n  /**\n   * Add an item to the inventory\n   */\n  const addItem = (item: Item) => {\n    updateGameState((prevState: GameState) => {\n      const newInventory = { ...prevState.player.inventory };\n      \n      if (newInventory[item.id]) {\n        newInventory[item.id] = {\n          ...newInventory[item.id],\n          quantity: newInventory[item.id].quantity + item.quantity\n        };\n      } else {\n        newInventory[item.id] = { ...item };\n      }\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n  \n  /**\n   * Check if the player has a certain quantity of an item\n   */\n  const checkItemQuantity = useCallback((itemId: string, quantity: number = 1) => {\n    const item = gameState.player.inventory[itemId];\n    return item && item.quantity >= quantity;\n  }, [gameState]);\n  \n  /**\n   * Get the quantity of a specific item in the inventory\n   */\n  const getItemQuantity = useCallback((itemId: string) => {\n    const item = gameState.player.inventory[itemId];\n    return item ? item.quantity : 0;\n  }, [gameState]);\n  \n  return {\n    inventory: gameState.player.inventory,\n    equipment: gameState.player.equipment,\n    sellItem,\n    equipItem,\n    unequipItem,\n    addItem,\n    checkItemQuantity,\n    getItemQuantity\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
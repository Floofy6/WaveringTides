{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { useGameContext } from '../context/GameContext';\n\n/**\n * Calculate the XP required for the next level based on OSRS formula\n * In OSRS, level 99 requires about 13 million XP\n */\nconst calculateXpForNextLevel = currentLevel => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  // This is a simplified implementation that closely mimics OSRS XP curve\n  const MAX_LEVEL = 99;\n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n\n  // Get points required for next level\n  return Math.floor(Math.pow(2, currentLevel / 7) * currentLevel * 300 / 4);\n};\n\n/**\n * Calculate the total XP needed to reach a specific level in OSRS\n */\nconst totalXpForLevel = level => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Get the level based on total XP earned (OSRS style)\n */\nconst getLevelFromXp = totalXp => {\n  let level = 1;\n  while (level < 99 && totalXp >= totalXpForLevel(level + 1)) {\n    level++;\n  }\n  return level;\n};\n\n/**\n * Calculate the XP required for a specific mastery level\n * This uses a different formula than regular skill levels\n */\nexport const calculateMasteryXpForLevel = level => {\n  // Example formula: steeper curve for mastery levels\n  return Math.floor(150 * Math.pow(level, 1.8));\n};\n\n/**\n * useSkills hook - Manages skill-related state and operations\n */\nexport const useSkills = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState\n  } = useGameContext();\n  const [currentSkillId, setCurrentSkillId] = useState(null);\n\n  // Use gameState.player which is guaranteed to exist now\n  const skills = gameState.player.skills || {};\n  const currentSkill = currentSkillId ? skills[currentSkillId] : null;\n\n  /**\n   * Select a skill to view its details\n   */\n  const selectSkill = useCallback(skillId => {\n    setCurrentSkillId(skillId);\n  }, []);\n\n  /**\n   * Start a skill activity\n   */\n  const startSkill = useCallback(skillId => {\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: true,\n        lastActiveTime: Date.now()\n      }\n    };\n    updateGameState(prevState => {\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\n   * Stop a skill activity\n   */\n  const stopSkill = useCallback(skillId => {\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: false\n      }\n    };\n    updateGameState(prevState => {\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\n   * Add experience to a skill\n   */\n  const addExperience = useCallback((skillId, amount) => {\n    console.log(`Adding ${amount} XP to skill ${skillId}`);\n    updateGameState(prevState => {\n      // Create a deep copy of the previous state\n      const newState = JSON.parse(JSON.stringify(prevState));\n\n      // Get the skill\n      const skill = newState.player.skills[skillId];\n      if (!skill) {\n        console.error(`Skill ${skillId} not found`);\n        return prevState;\n      }\n\n      // Initialize totalXp if it doesn't exist\n      if (typeof skill.totalXp !== 'number') {\n        // If we don't have totalXp yet, initialize it based on current level and xp\n        const levelBaseXp = totalXpForLevel(skill.level);\n        skill.totalXp = levelBaseXp + (skill.xp || 0);\n      }\n\n      // Add the experience to total XP counter\n      skill.totalXp += amount;\n\n      // Calculate the new level based on total XP\n      const newLevel = getLevelFromXp(skill.totalXp);\n\n      // Check if we leveled up\n      if (newLevel > skill.level) {\n        const oldLevel = skill.level;\n        skill.level = newLevel;\n\n        // Calculate XP within the new level\n        const newLevelBaseXp = totalXpForLevel(newLevel);\n        skill.xp = skill.totalXp - newLevelBaseXp;\n        console.log(`LEVEL UP! ${skill.name} from ${oldLevel} to ${newLevel} (${skill.xp} XP into new level)`);\n      } else {\n        // No level up, just update XP within current level\n        const currentLevelBaseXp = totalXpForLevel(skill.level);\n        skill.xp = skill.totalXp - currentLevelBaseXp;\n        console.log(`Added XP to ${skill.name}: now ${skill.xp}/${calculateXpForNextLevel(skill.level)} within current level`);\n      }\n      return newState;\n    });\n  }, [updateGameState]);\n\n  /**\n   * Get a list of all active skills\n   */\n  const getActiveSkills = useCallback(() => {\n    return Object.keys(gameState.player.skills).filter(skillId => gameState.player.skills[skillId].isActive);\n  }, [gameState]);\n\n  /**\n   * Check if a skill has reached a specific level\n   */\n  const hasReachedLevel = useCallback((skillId, level) => {\n    const skill = gameState.player.skills[skillId];\n    return skill ? skill.level >= level : false;\n  }, [gameState]);\n\n  /**\n   * Add experience to a skill's mastery and handle level ups\n   */\n  const addMasteryExperience = useCallback((skillId, amount) => {\n    updateGameState(prevState => {\n      // Create a deep copy of the previous state\n      const newState = JSON.parse(JSON.stringify(prevState));\n      const skill = newState.player.skills[skillId];\n      if (!skill || !skill.mastery) return prevState;\n      const mastery = skill.mastery;\n      let newXp = mastery.xp + amount;\n      let newLevel = mastery.level;\n\n      // Check for level up\n      while (newXp >= calculateMasteryXpForLevel(newLevel + 1)) {\n        newLevel++;\n        console.log(`MASTERY LEVEL UP! ${skill.name} mastery is now level ${newLevel}`);\n      }\n\n      // Update the mastery in the skill\n      skill.mastery = {\n        ...mastery,\n        level: newLevel,\n        xp: newXp\n      };\n      return newState;\n    });\n  }, [updateGameState]);\n  return {\n    skills,\n    currentSkill,\n    selectSkill,\n    startSkill,\n    stopSkill,\n    addExperience,\n    addMasteryExperience,\n    getActiveSkills,\n    hasReachedLevel\n  };\n};\n_s(useSkills, \"+hBLNFR0jkqlYWzQH6+oGjuMUVE=\", false, function () {\n  return [useGameContext];\n});","map":{"version":3,"names":["useState","useCallback","useGameContext","calculateXpForNextLevel","currentLevel","MAX_LEVEL","Number","MAX_SAFE_INTEGER","Math","floor","pow","totalXpForLevel","level","total","i","getLevelFromXp","totalXp","calculateMasteryXpForLevel","useSkills","_s","gameState","updateGameState","currentSkillId","setCurrentSkillId","skills","player","currentSkill","selectSkill","skillId","startSkill","updatedSkills","isActive","lastActiveTime","Date","now","prevState","stopSkill","addExperience","amount","console","log","newState","JSON","parse","stringify","skill","error","levelBaseXp","xp","newLevel","oldLevel","newLevelBaseXp","name","currentLevelBaseXp","getActiveSkills","Object","keys","filter","hasReachedLevel","addMasteryExperience","mastery","newXp"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/hooks/useSkills.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { useGameContext } from '../context/GameContext';\n\n/**\n * Calculate the XP required for the next level based on OSRS formula\n * In OSRS, level 99 requires about 13 million XP\n */\nconst calculateXpForNextLevel = (currentLevel: number): number => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  // This is a simplified implementation that closely mimics OSRS XP curve\n  const MAX_LEVEL = 99;\n  \n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  \n  // Get points required for next level\n  return Math.floor((Math.pow(2, (currentLevel) / 7) * currentLevel * 300) / 4);\n};\n\n/**\n * Calculate the total XP needed to reach a specific level in OSRS\n */\nconst totalXpForLevel = (level: number): number => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Get the level based on total XP earned (OSRS style)\n */\nconst getLevelFromXp = (totalXp: number): number => {\n  let level = 1;\n  while (level < 99 && totalXp >= totalXpForLevel(level + 1)) {\n    level++;\n  }\n  return level;\n};\n\n/**\n * Calculate the XP required for a specific mastery level\n * This uses a different formula than regular skill levels\n */\nexport const calculateMasteryXpForLevel = (level: number): number => {\n  // Example formula: steeper curve for mastery levels\n  return Math.floor(150 * Math.pow(level, 1.8));\n};\n\n/**\n * useSkills hook - Manages skill-related state and operations\n */\nexport const useSkills = () => {\n  const { gameState, updateGameState } = useGameContext();\n  const [currentSkillId, setCurrentSkillId] = useState<string | null>(null);\n  \n  // Use gameState.player which is guaranteed to exist now\n  const skills = gameState.player.skills || {};\n  const currentSkill = currentSkillId ? skills[currentSkillId] : null;\n  \n  /**\n   * Select a skill to view its details\n   */\n  const selectSkill = useCallback((skillId: string) => {\n    setCurrentSkillId(skillId);\n  }, []);\n  \n  /**\n   * Start a skill activity\n   */\n  const startSkill = useCallback((skillId: string) => {\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: true,\n        lastActiveTime: Date.now()\n      }\n    };\n    \n    updateGameState((prevState) => {\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n  \n  /**\n   * Stop a skill activity\n   */\n  const stopSkill = useCallback((skillId: string) => {\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: false\n      }\n    };\n    \n    updateGameState((prevState) => {\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n  \n  /**\n   * Add experience to a skill\n   */\n  const addExperience = useCallback((skillId: string, amount: number): void => {\n    console.log(`Adding ${amount} XP to skill ${skillId}`);\n    \n    updateGameState((prevState) => {\n      // Create a deep copy of the previous state\n      const newState = JSON.parse(JSON.stringify(prevState));\n      \n      // Get the skill\n      const skill = newState.player.skills[skillId];\n      if (!skill) {\n        console.error(`Skill ${skillId} not found`);\n        return prevState;\n      }\n      \n      // Initialize totalXp if it doesn't exist\n      if (typeof skill.totalXp !== 'number') {\n        // If we don't have totalXp yet, initialize it based on current level and xp\n        const levelBaseXp = totalXpForLevel(skill.level);\n        skill.totalXp = levelBaseXp + (skill.xp || 0);\n      }\n      \n      // Add the experience to total XP counter\n      skill.totalXp += amount;\n      \n      // Calculate the new level based on total XP\n      const newLevel = getLevelFromXp(skill.totalXp);\n      \n      // Check if we leveled up\n      if (newLevel > skill.level) {\n        const oldLevel = skill.level;\n        skill.level = newLevel;\n        \n        // Calculate XP within the new level\n        const newLevelBaseXp = totalXpForLevel(newLevel);\n        skill.xp = skill.totalXp - newLevelBaseXp;\n        \n        console.log(`LEVEL UP! ${skill.name} from ${oldLevel} to ${newLevel} (${skill.xp} XP into new level)`);\n      } else {\n        // No level up, just update XP within current level\n        const currentLevelBaseXp = totalXpForLevel(skill.level);\n        skill.xp = skill.totalXp - currentLevelBaseXp;\n        \n        console.log(`Added XP to ${skill.name}: now ${skill.xp}/${calculateXpForNextLevel(skill.level)} within current level`);\n      }\n      \n      return newState;\n    });\n  }, [updateGameState]);\n  \n  /**\n   * Get a list of all active skills\n   */\n  const getActiveSkills = useCallback(() => {\n    return Object.keys(gameState.player.skills).filter(\n      skillId => gameState.player.skills[skillId].isActive\n    );\n  }, [gameState]);\n  \n  /**\n   * Check if a skill has reached a specific level\n   */\n  const hasReachedLevel = useCallback((skillId: string, level: number) => {\n    const skill = gameState.player.skills[skillId];\n    return skill ? skill.level >= level : false;\n  }, [gameState]);\n  \n  /**\n   * Add experience to a skill's mastery and handle level ups\n   */\n  const addMasteryExperience = useCallback((skillId: string, amount: number) => {\n    updateGameState((prevState) => {\n      // Create a deep copy of the previous state\n      const newState = JSON.parse(JSON.stringify(prevState));\n      \n      const skill = newState.player.skills[skillId];\n      if (!skill || !skill.mastery) return prevState;\n      \n      const mastery = skill.mastery;\n      let newXp = mastery.xp + amount;\n      let newLevel = mastery.level;\n      \n      // Check for level up\n      while (newXp >= calculateMasteryXpForLevel(newLevel + 1)) {\n        newLevel++;\n        console.log(`MASTERY LEVEL UP! ${skill.name} mastery is now level ${newLevel}`);\n      }\n      \n      // Update the mastery in the skill\n      skill.mastery = {\n        ...mastery,\n        level: newLevel,\n        xp: newXp\n      };\n      \n      return newState;\n    });\n  }, [updateGameState]);\n  \n  return {\n    skills,\n    currentSkill,\n    selectSkill,\n    startSkill,\n    stopSkill,\n    addExperience,\n    addMasteryExperience,\n    getActiveSkills,\n    hasReachedLevel\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
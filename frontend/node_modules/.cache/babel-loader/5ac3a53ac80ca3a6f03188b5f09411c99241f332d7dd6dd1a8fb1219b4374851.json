{"ast":null,"code":"import { ITEMS, SKILL_IDS, ENEMIES } from '../constants';\n\n/**\r\n * Creates properly typed mock Item objects from constants\r\n */\nexport const createMockItems = () => {\n  const itemsWithProperType = {};\n\n  // Process each item from the constants\n  Object.entries(ITEMS).forEach(([key, itemData]) => {\n    // Create base item without optional properties\n    const baseItemData = {\n      id: itemData.id,\n      name: itemData.name,\n      quantity: itemData.quantity || 1,\n      type: itemData.type === 'resource' ? 'resource' : 'equipment'\n    };\n\n    // Add optional properties only if they exist\n    if (itemData.sellPrice !== undefined) {\n      baseItemData.sellPrice = itemData.sellPrice;\n    }\n    if (itemData.buyPrice !== undefined) {\n      baseItemData.buyPrice = itemData.buyPrice;\n    }\n\n    // Handle slot carefully\n    if (itemData.slot === 'weapon' || itemData.slot === 'armor') {\n      baseItemData.slot = itemData.slot;\n    }\n\n    // Add stats if they exist\n    if (itemData.stats) {\n      baseItemData.stats = {\n        ...itemData.stats\n      };\n    }\n\n    // Add crafting recipe if it exists - using type assertion to avoid TypeScript error\n    if (itemData.craftingRecipe) {\n      baseItemData.craftingRecipe = itemData.craftingRecipe;\n    }\n\n    // Cast to Item type\n    itemsWithProperType[key] = baseItemData;\n  });\n  return itemsWithProperType;\n};\n\n/**\r\n * Creates mock skill data with proper types\r\n */\nexport const createMockSkills = () => {\n  return {\n    [SKILL_IDS.WOODCUTTING]: {\n      id: SKILL_IDS.WOODCUTTING,\n      name: 'Woodcutting',\n      level: 1,\n      xp: 0,\n      xpPerAction: 5,\n      isActive: false,\n      mastery: createMastery([{\n        level: 5,\n        description: 'Faster woodcutting speed'\n      }, {\n        level: 10,\n        description: 'Double logs chance (10%)'\n      }])\n    },\n    [SKILL_IDS.FISHING]: {\n      id: SKILL_IDS.FISHING,\n      name: 'Fishing',\n      level: 1,\n      xp: 0,\n      xpPerAction: 7,\n      isActive: false,\n      mastery: createMastery([{\n        level: 5,\n        description: 'Better fish quality'\n      }, {\n        level: 10,\n        description: 'Double fish chance (10%)'\n      }])\n    },\n    [SKILL_IDS.MINING]: {\n      id: SKILL_IDS.MINING,\n      name: 'Mining',\n      level: 1,\n      xp: 0,\n      xpPerAction: 6,\n      isActive: false,\n      mastery: createMastery([])\n    }\n  };\n};\n\n/**\r\n * Helper to create mastery objects\r\n */\n\nconst createMastery = unlocks => {\n  const unlocksMap = {};\n  unlocks.forEach(unlock => {\n    unlocksMap[unlock.level.toString()] = unlock.description;\n  });\n  return {\n    level: 1,\n    xp: 0,\n    unlocks: unlocksMap\n  };\n};\n\n/**\r\n * Create properly typed enemy objects\r\n */\nexport const createMockEnemies = () => {\n  const enemies = {};\n  Object.entries(ENEMIES).forEach(([key, enemyData]) => {\n    enemies[key] = {\n      id: enemyData.id,\n      name: enemyData.name,\n      attack: enemyData.attack,\n      defense: enemyData.defense,\n      health: enemyData.health,\n      maxHealth: enemyData.maxHealth,\n      lootTable: enemyData.lootTable\n    };\n  });\n  return enemies;\n};","map":{"version":3,"names":["ITEMS","SKILL_IDS","ENEMIES","createMockItems","itemsWithProperType","Object","entries","forEach","key","itemData","baseItemData","id","name","quantity","type","sellPrice","undefined","buyPrice","slot","stats","craftingRecipe","createMockSkills","WOODCUTTING","level","xp","xpPerAction","isActive","mastery","createMastery","description","FISHING","MINING","unlocks","unlocksMap","unlock","toString","createMockEnemies","enemies","enemyData","attack","defense","health","maxHealth","lootTable"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/utils/mockData.ts"],"sourcesContent":["import { Item, Skill, Mastery, Enemy } from '../types';\r\nimport { ITEMS, ITEM_IDS, SKILL_IDS, ENEMIES } from '../constants';\r\n\r\n/**\r\n * Creates properly typed mock Item objects from constants\r\n */\r\nexport const createMockItems = (): { [id: string]: Item } => {\r\n  const itemsWithProperType: { [id: string]: Item } = {};\r\n  \r\n  // Process each item from the constants\r\n  Object.entries(ITEMS).forEach(([key, itemData]) => {\r\n    // Create base item without optional properties\r\n    const baseItemData: any = {\r\n      id: itemData.id,\r\n      name: itemData.name,\r\n      quantity: itemData.quantity || 1,\r\n      type: itemData.type === 'resource' ? 'resource' : 'equipment',\r\n    };\r\n    \r\n    // Add optional properties only if they exist\r\n    if (itemData.sellPrice !== undefined) {\r\n      baseItemData.sellPrice = itemData.sellPrice;\r\n    }\r\n    \r\n    if (itemData.buyPrice !== undefined) {\r\n      baseItemData.buyPrice = itemData.buyPrice;\r\n    }\r\n    \r\n    // Handle slot carefully\r\n    if (itemData.slot === 'weapon' || itemData.slot === 'armor') {\r\n      baseItemData.slot = itemData.slot;\r\n    }\r\n    \r\n    // Add stats if they exist\r\n    if (itemData.stats) {\r\n      baseItemData.stats = {\r\n        ...itemData.stats\r\n      };\r\n    }\r\n    \r\n    // Add crafting recipe if it exists - using type assertion to avoid TypeScript error\r\n    if ((itemData as any).craftingRecipe) {\r\n      baseItemData.craftingRecipe = (itemData as any).craftingRecipe;\r\n    }\r\n    \r\n    // Cast to Item type\r\n    itemsWithProperType[key] = baseItemData as Item;\r\n  });\r\n  \r\n  return itemsWithProperType;\r\n};\r\n\r\n/**\r\n * Creates mock skill data with proper types\r\n */\r\nexport const createMockSkills = (): { [id: string]: Skill } => {\r\n  return {\r\n    [SKILL_IDS.WOODCUTTING]: {\r\n      id: SKILL_IDS.WOODCUTTING,\r\n      name: 'Woodcutting',\r\n      level: 1,\r\n      xp: 0,\r\n      xpPerAction: 5,\r\n      isActive: false,\r\n      mastery: createMastery([\r\n        { level: 5, description: 'Faster woodcutting speed' },\r\n        { level: 10, description: 'Double logs chance (10%)' }\r\n      ])\r\n    },\r\n    [SKILL_IDS.FISHING]: {\r\n      id: SKILL_IDS.FISHING,\r\n      name: 'Fishing',\r\n      level: 1,\r\n      xp: 0,\r\n      xpPerAction: 7,\r\n      isActive: false,\r\n      mastery: createMastery([\r\n        { level: 5, description: 'Better fish quality' },\r\n        { level: 10, description: 'Double fish chance (10%)' }\r\n      ])\r\n    },\r\n    [SKILL_IDS.MINING]: {\r\n      id: SKILL_IDS.MINING,\r\n      name: 'Mining',\r\n      level: 1,\r\n      xp: 0,\r\n      xpPerAction: 6,\r\n      isActive: false,\r\n      mastery: createMastery([])\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Helper to create mastery objects\r\n */\r\ninterface MasteryUnlock {\r\n  level: number;\r\n  description: string;\r\n}\r\n\r\nconst createMastery = (unlocks: MasteryUnlock[]): Mastery => {\r\n  const unlocksMap: { [level: string]: string } = {};\r\n  \r\n  unlocks.forEach(unlock => {\r\n    unlocksMap[unlock.level.toString()] = unlock.description;\r\n  });\r\n  \r\n  return {\r\n    level: 1,\r\n    xp: 0,\r\n    unlocks: unlocksMap\r\n  };\r\n};\r\n\r\n/**\r\n * Create properly typed enemy objects\r\n */\r\nexport const createMockEnemies = (): { [id: string]: Enemy } => {\r\n  const enemies: { [id: string]: Enemy } = {};\r\n  \r\n  Object.entries(ENEMIES).forEach(([key, enemyData]) => {\r\n    enemies[key] = {\r\n      id: enemyData.id,\r\n      name: enemyData.name,\r\n      attack: enemyData.attack,\r\n      defense: enemyData.defense,\r\n      health: enemyData.health,\r\n      maxHealth: enemyData.maxHealth,\r\n      lootTable: enemyData.lootTable\r\n    };\r\n  });\r\n  \r\n  return enemies;\r\n}; "],"mappings":"AACA,SAASA,KAAK,EAAYC,SAAS,EAAEC,OAAO,QAAQ,cAAc;;AAElE;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAA8B;EAC3D,MAAMC,mBAA2C,GAAG,CAAC,CAAC;;EAEtD;EACAC,MAAM,CAACC,OAAO,CAACN,KAAK,CAAC,CAACO,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,QAAQ,CAAC,KAAK;IACjD;IACA,MAAMC,YAAiB,GAAG;MACxBC,EAAE,EAAEF,QAAQ,CAACE,EAAE;MACfC,IAAI,EAAEH,QAAQ,CAACG,IAAI;MACnBC,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ,IAAI,CAAC;MAChCC,IAAI,EAAEL,QAAQ,CAACK,IAAI,KAAK,UAAU,GAAG,UAAU,GAAG;IACpD,CAAC;;IAED;IACA,IAAIL,QAAQ,CAACM,SAAS,KAAKC,SAAS,EAAE;MACpCN,YAAY,CAACK,SAAS,GAAGN,QAAQ,CAACM,SAAS;IAC7C;IAEA,IAAIN,QAAQ,CAACQ,QAAQ,KAAKD,SAAS,EAAE;MACnCN,YAAY,CAACO,QAAQ,GAAGR,QAAQ,CAACQ,QAAQ;IAC3C;;IAEA;IACA,IAAIR,QAAQ,CAACS,IAAI,KAAK,QAAQ,IAAIT,QAAQ,CAACS,IAAI,KAAK,OAAO,EAAE;MAC3DR,YAAY,CAACQ,IAAI,GAAGT,QAAQ,CAACS,IAAI;IACnC;;IAEA;IACA,IAAIT,QAAQ,CAACU,KAAK,EAAE;MAClBT,YAAY,CAACS,KAAK,GAAG;QACnB,GAAGV,QAAQ,CAACU;MACd,CAAC;IACH;;IAEA;IACA,IAAKV,QAAQ,CAASW,cAAc,EAAE;MACpCV,YAAY,CAACU,cAAc,GAAIX,QAAQ,CAASW,cAAc;IAChE;;IAEA;IACAhB,mBAAmB,CAACI,GAAG,CAAC,GAAGE,YAAoB;EACjD,CAAC,CAAC;EAEF,OAAON,mBAAmB;AAC5B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMiB,gBAAgB,GAAGA,CAAA,KAA+B;EAC7D,OAAO;IACL,CAACpB,SAAS,CAACqB,WAAW,GAAG;MACvBX,EAAE,EAAEV,SAAS,CAACqB,WAAW;MACzBV,IAAI,EAAE,aAAa;MACnBW,KAAK,EAAE,CAAC;MACRC,EAAE,EAAE,CAAC;MACLC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEC,aAAa,CAAC,CACrB;QAAEL,KAAK,EAAE,CAAC;QAAEM,WAAW,EAAE;MAA2B,CAAC,EACrD;QAAEN,KAAK,EAAE,EAAE;QAAEM,WAAW,EAAE;MAA2B,CAAC,CACvD;IACH,CAAC;IACD,CAAC5B,SAAS,CAAC6B,OAAO,GAAG;MACnBnB,EAAE,EAAEV,SAAS,CAAC6B,OAAO;MACrBlB,IAAI,EAAE,SAAS;MACfW,KAAK,EAAE,CAAC;MACRC,EAAE,EAAE,CAAC;MACLC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEC,aAAa,CAAC,CACrB;QAAEL,KAAK,EAAE,CAAC;QAAEM,WAAW,EAAE;MAAsB,CAAC,EAChD;QAAEN,KAAK,EAAE,EAAE;QAAEM,WAAW,EAAE;MAA2B,CAAC,CACvD;IACH,CAAC;IACD,CAAC5B,SAAS,CAAC8B,MAAM,GAAG;MAClBpB,EAAE,EAAEV,SAAS,CAAC8B,MAAM;MACpBnB,IAAI,EAAE,QAAQ;MACdW,KAAK,EAAE,CAAC;MACRC,EAAE,EAAE,CAAC;MACLC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEC,aAAa,CAAC,EAAE;IAC3B;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;;AAMA,MAAMA,aAAa,GAAII,OAAwB,IAAc;EAC3D,MAAMC,UAAuC,GAAG,CAAC,CAAC;EAElDD,OAAO,CAACzB,OAAO,CAAC2B,MAAM,IAAI;IACxBD,UAAU,CAACC,MAAM,CAACX,KAAK,CAACY,QAAQ,CAAC,CAAC,CAAC,GAAGD,MAAM,CAACL,WAAW;EAC1D,CAAC,CAAC;EAEF,OAAO;IACLN,KAAK,EAAE,CAAC;IACRC,EAAE,EAAE,CAAC;IACLQ,OAAO,EAAEC;EACX,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,iBAAiB,GAAGA,CAAA,KAA+B;EAC9D,MAAMC,OAAgC,GAAG,CAAC,CAAC;EAE3ChC,MAAM,CAACC,OAAO,CAACJ,OAAO,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,GAAG,EAAE8B,SAAS,CAAC,KAAK;IACpDD,OAAO,CAAC7B,GAAG,CAAC,GAAG;MACbG,EAAE,EAAE2B,SAAS,CAAC3B,EAAE;MAChBC,IAAI,EAAE0B,SAAS,CAAC1B,IAAI;MACpB2B,MAAM,EAAED,SAAS,CAACC,MAAM;MACxBC,OAAO,EAAEF,SAAS,CAACE,OAAO;MAC1BC,MAAM,EAAEH,SAAS,CAACG,MAAM;MACxBC,SAAS,EAAEJ,SAAS,CAACI,SAAS;MAC9BC,SAAS,EAAEL,SAAS,CAACK;IACvB,CAAC;EACH,CAAC,CAAC;EAEF,OAAON,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\Desktop\\\\coding\\\\WaveringTides-master\\\\frontend\\\\src\\\\features\\\\skills\\\\SkillProgressBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Import these functions from a shared location\nconst calculateXpForNextLevel = currentLevel => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  const MAX_LEVEL = 99;\n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  return Math.floor(Math.pow(2, currentLevel / 7) * currentLevel * 300 / 4);\n};\nconst totalXpForLevel = level => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Format a number with commas for better readability\n */\nconst formatNumber = num => {\n  return num.toLocaleString();\n};\n\n/**\n * SkillProgressBar component - Visual representation of skill progression\n */\nconst SkillProgressBar = ({\n  skill\n}) => {\n  _s();\n  // Debug logging\n  useEffect(() => {\n    console.log(`SkillProgressBar rendering for ${skill.name}:`, {\n      level: skill.level,\n      totalXp: skill.totalXp,\n      xp: skill.xp,\n      isActive: skill.isActive,\n      actionProgress: skill.actionProgress\n    });\n  }, [skill]);\n\n  // Validate inputs to prevent errors\n  if (!skill) {\n    console.error('SkillProgressBar: No skill data provided');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error: Skill data missing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check level bounds\n  const level = Math.max(1, Math.min(99, skill.level));\n\n  // If we're at max level, show 100%\n  if (level >= 99) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"skill-progress-fill\",\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-text\",\n        children: \"Max Level (13,034,431 XP)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If the skill is active, show action progress instead of XP progress\n  if (skill.isActive && typeof skill.actionProgress === 'number') {\n    const actionProgressPercentage = Math.min(Math.floor(skill.actionProgress * 100), 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-action-progress-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"skill-progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"skill-action-progress-fill\",\n            style: {\n              width: `${actionProgressPercentage}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"skill-progress-text\",\n          children: [\"Working... \", actionProgressPercentage, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-xp-progress-container\",\n        style: {\n          marginTop: '8px'\n        },\n        children: renderXpProgress()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n  // For non-active skills, just show XP progress\n  return renderXpProgress();\n\n  // Helper function to render the XP progress display\n  function renderXpProgress() {\n    // Get XP thresholds for current level and next level\n    const currentLevelTotalXp = totalXpForLevel(level);\n    const nextLevelTotalXp = totalXpForLevel(level + 1);\n\n    // Calculate XP needed for next level from current level\n    const xpForNextLevel = nextLevelTotalXp - currentLevelTotalXp;\n\n    // Current XP progress within this level\n    let currentLevelXp = 0;\n\n    // Make sure we have a valid totalXp value\n    if (typeof skill.totalXp === 'number') {\n      // Calculate how much XP we've earned within this level\n      currentLevelXp = skill.totalXp - currentLevelTotalXp;\n    } else if (typeof skill.xp === 'number') {\n      // Directly use the level's xp if totalXp is not available\n      currentLevelXp = skill.xp;\n    }\n\n    // Ensure currentLevelXp is not negative\n    currentLevelXp = Math.max(0, currentLevelXp);\n\n    // Ensure currentLevelXp doesn't exceed what's needed for next level\n    const displayXp = Math.min(xpForNextLevel, currentLevelXp);\n\n    // Calculate percentage progress toward next level\n    const progressPercentage = Math.min(Math.floor(displayXp / xpForNextLevel * 100), 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"skill-progress-fill\",\n          style: {\n            width: `${progressPercentage}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-text\",\n        children: [formatNumber(Math.floor(displayXp)), \" / \", formatNumber(xpForNextLevel), \" XP (\", progressPercentage, \"%)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), skill.totalXp && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-total-xp\",\n        children: [\"Total XP: \", formatNumber(Math.floor(skill.totalXp))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(SkillProgressBar, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SkillProgressBar;\nexport default SkillProgressBar;\nvar _c;\n$RefreshReg$(_c, \"SkillProgressBar\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","calculateXpForNextLevel","currentLevel","MAX_LEVEL","Number","MAX_SAFE_INTEGER","Math","floor","pow","totalXpForLevel","level","total","i","formatNumber","num","toLocaleString","SkillProgressBar","skill","_s","console","log","name","totalXp","xp","isActive","actionProgress","error","children","fileName","_jsxFileName","lineNumber","columnNumber","max","min","className","style","width","actionProgressPercentage","marginTop","renderXpProgress","currentLevelTotalXp","nextLevelTotalXp","xpForNextLevel","currentLevelXp","displayXp","progressPercentage","_c","$RefreshReg$"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/features/skills/SkillProgressBar.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Skill } from '../../types';\n\ninterface SkillProgressBarProps {\n  skill: Skill;\n}\n\n// Import these functions from a shared location\nconst calculateXpForNextLevel = (currentLevel: number): number => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  const MAX_LEVEL = 99;\n  \n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  \n  return Math.floor((Math.pow(2, (currentLevel) / 7) * currentLevel * 300) / 4);\n};\n\nconst totalXpForLevel = (level: number): number => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Format a number with commas for better readability\n */\nconst formatNumber = (num: number): string => {\n  return num.toLocaleString();\n};\n\n/**\n * SkillProgressBar component - Visual representation of skill progression\n */\nconst SkillProgressBar: React.FC<SkillProgressBarProps> = ({ skill }) => {\n  // Debug logging\n  useEffect(() => {\n    console.log(`SkillProgressBar rendering for ${skill.name}:`, {\n      level: skill.level,\n      totalXp: skill.totalXp,\n      xp: skill.xp,\n      isActive: skill.isActive,\n      actionProgress: skill.actionProgress\n    });\n  }, [skill]);\n  \n  // Validate inputs to prevent errors\n  if (!skill) {\n    console.error('SkillProgressBar: No skill data provided');\n    return <div>Error: Skill data missing</div>;\n  }\n  \n  // Check level bounds\n  const level = Math.max(1, Math.min(99, skill.level));\n  \n  // If we're at max level, show 100%\n  if (level >= 99) {\n    return (\n      <div>\n        <div className=\"skill-progress-bar\">\n          <div className=\"skill-progress-fill\" style={{ width: '100%' }} />\n        </div>\n        <div className=\"skill-progress-text\">\n          Max Level (13,034,431 XP)\n        </div>\n      </div>\n    );\n  }\n  \n  // If the skill is active, show action progress instead of XP progress\n  if (skill.isActive && typeof skill.actionProgress === 'number') {\n    const actionProgressPercentage = Math.min(Math.floor(skill.actionProgress * 100), 100);\n    \n    return (\n      <div>\n        <div className=\"skill-action-progress-container\">\n          <div className=\"skill-progress-bar\">\n            <div \n              className=\"skill-action-progress-fill\"\n              style={{ width: `${actionProgressPercentage}%` }} \n            />\n          </div>\n          <div className=\"skill-progress-text\">\n            Working... {actionProgressPercentage}%\n          </div>\n        </div>\n\n        {/* Still show XP progress below the action progress */}\n        <div className=\"skill-xp-progress-container\" style={{ marginTop: '8px' }}>\n          {renderXpProgress()}\n        </div>\n      </div>\n    );\n  }\n  \n  // For non-active skills, just show XP progress\n  return renderXpProgress();\n  \n  // Helper function to render the XP progress display\n  function renderXpProgress() {\n    // Get XP thresholds for current level and next level\n    const currentLevelTotalXp = totalXpForLevel(level);\n    const nextLevelTotalXp = totalXpForLevel(level + 1);\n    \n    // Calculate XP needed for next level from current level\n    const xpForNextLevel = nextLevelTotalXp - currentLevelTotalXp;\n    \n    // Current XP progress within this level\n    let currentLevelXp = 0;\n    \n    // Make sure we have a valid totalXp value\n    if (typeof skill.totalXp === 'number') {\n      // Calculate how much XP we've earned within this level\n      currentLevelXp = skill.totalXp - currentLevelTotalXp;\n    } else if (typeof skill.xp === 'number') {\n      // Directly use the level's xp if totalXp is not available\n      currentLevelXp = skill.xp;\n    }\n    \n    // Ensure currentLevelXp is not negative\n    currentLevelXp = Math.max(0, currentLevelXp);\n    \n    // Ensure currentLevelXp doesn't exceed what's needed for next level\n    const displayXp = Math.min(xpForNextLevel, currentLevelXp);\n    \n    // Calculate percentage progress toward next level\n    const progressPercentage = Math.min(Math.floor((displayXp / xpForNextLevel) * 100), 100);\n    \n    return (\n      <div>\n        <div className=\"skill-progress-bar\">\n          <div \n            className=\"skill-progress-fill\"\n            style={{ width: `${progressPercentage}%` }} \n          />\n        </div>\n        <div className=\"skill-progress-text\">\n          {formatNumber(Math.floor(displayXp))} / {formatNumber(xpForNextLevel)} XP ({progressPercentage}%)\n        </div>\n        {skill.totalXp && (\n          <div className=\"skill-total-xp\">\n            Total XP: {formatNumber(Math.floor(skill.totalXp))}\n          </div>\n        )}\n      </div>\n    );\n  }\n};\n\nexport default SkillProgressBar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
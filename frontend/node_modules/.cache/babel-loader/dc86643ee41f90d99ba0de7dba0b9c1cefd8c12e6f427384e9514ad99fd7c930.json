{"ast":null,"code":"import{useState,useCallback}from'react';import{useGameContext}from'../context/GameContext';/**\r\n * Calculate the XP required for the next level\r\n * This is a simple formula that can be adjusted as needed\r\n */const calculateXpForNextLevel=currentLevel=>{// Example formula: base 100 XP with 10% increase per level\nreturn Math.floor(100*Math.pow(1.1,currentLevel-1));};/**\r\n * useSkills hook - Manages skill-related state and operations\r\n */export const useSkills=()=>{const{gameState,updateGameState}=useGameContext();const[currentSkillId,setCurrentSkillId]=useState(null);const skills=(gameState===null||gameState===void 0?void 0:gameState.player.skills)||{};const currentSkill=currentSkillId?skills[currentSkillId]:null;/**\r\n   * Select a skill to view its details\r\n   */const selectSkill=useCallback(skillId=>{setCurrentSkillId(skillId);},[]);/**\r\n   * Start a skill activity\r\n   */const startSkill=useCallback(skillId=>{if(!gameState)return;const updatedSkills={...gameState.player.skills,[skillId]:{...gameState.player.skills[skillId],isActive:true,lastActiveTime:Date.now()}};updateGameState(prevState=>{if(!prevState)return null;return{...prevState,player:{...prevState.player,skills:updatedSkills}};});},[gameState,updateGameState]);/**\r\n   * Stop a skill activity\r\n   */const stopSkill=useCallback(skillId=>{if(!gameState)return;const updatedSkills={...gameState.player.skills,[skillId]:{...gameState.player.skills[skillId],isActive:false}};updateGameState(prevState=>{if(!prevState)return null;return{...prevState,player:{...prevState.player,skills:updatedSkills}};});},[gameState,updateGameState]);/**\r\n   * Add experience to a skill and handle level ups\r\n   */const addExperience=useCallback((skillId,amount)=>{if(!gameState)return;const skill=gameState.player.skills[skillId];if(!skill)return;let newXp=skill.xp+amount;let newLevel=skill.level;// Check for level up\nconst xpRequired=calculateXpForNextLevel(newLevel);while(newXp>=xpRequired){newXp-=xpRequired;newLevel++;}const updatedSkills={...gameState.player.skills,[skillId]:{...skill,level:newLevel,xp:newXp}};updateGameState(prevState=>{if(!prevState)return null;return{...prevState,player:{...prevState.player,skills:updatedSkills}};});},[gameState,updateGameState]);/**\r\n   * Get a list of all active skills\r\n   */const getActiveSkills=useCallback(()=>{if(!gameState)return[];return Object.keys(gameState.player.skills).filter(skillId=>gameState.player.skills[skillId].isActive);},[gameState]);/**\r\n   * Check if a skill has reached a specific level\r\n   */const hasReachedLevel=useCallback((skillId,level)=>{if(!gameState)return false;const skill=gameState.player.skills[skillId];return skill?skill.level>=level:false;},[gameState]);return{skills,currentSkill,selectSkill,startSkill,stopSkill,addExperience,getActiveSkills,hasReachedLevel};};","map":{"version":3,"names":["useState","useCallback","useGameContext","calculateXpForNextLevel","currentLevel","Math","floor","pow","useSkills","gameState","updateGameState","currentSkillId","setCurrentSkillId","skills","player","currentSkill","selectSkill","skillId","startSkill","updatedSkills","isActive","lastActiveTime","Date","now","prevState","stopSkill","addExperience","amount","skill","newXp","xp","newLevel","level","xpRequired","getActiveSkills","Object","keys","filter","hasReachedLevel"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/hooks/useSkills.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { useGameContext } from '../context/GameContext';\r\nimport { Skill } from '../types';\r\n\r\n/**\r\n * Calculate the XP required for the next level\r\n * This is a simple formula that can be adjusted as needed\r\n */\r\nconst calculateXpForNextLevel = (currentLevel: number): number => {\r\n  // Example formula: base 100 XP with 10% increase per level\r\n  return Math.floor(100 * Math.pow(1.1, currentLevel - 1));\r\n};\r\n\r\n/**\r\n * useSkills hook - Manages skill-related state and operations\r\n */\r\nexport const useSkills = () => {\r\n  const { gameState, updateGameState } = useGameContext();\r\n  const [currentSkillId, setCurrentSkillId] = useState<string | null>(null);\r\n  \r\n  const skills = gameState?.player.skills || {};\r\n  const currentSkill = currentSkillId ? skills[currentSkillId] : null;\r\n  \r\n  /**\r\n   * Select a skill to view its details\r\n   */\r\n  const selectSkill = useCallback((skillId: string) => {\r\n    setCurrentSkillId(skillId);\r\n  }, []);\r\n  \r\n  /**\r\n   * Start a skill activity\r\n   */\r\n  const startSkill = useCallback((skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...gameState.player.skills[skillId],\r\n        isActive: true,\r\n        lastActiveTime: Date.now()\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Stop a skill activity\r\n   */\r\n  const stopSkill = useCallback((skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...gameState.player.skills[skillId],\r\n        isActive: false\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Add experience to a skill and handle level ups\r\n   */\r\n  const addExperience = useCallback((skillId: string, amount: number) => {\r\n    if (!gameState) return;\r\n    \r\n    const skill = gameState.player.skills[skillId];\r\n    if (!skill) return;\r\n    \r\n    let newXp = skill.xp + amount;\r\n    let newLevel = skill.level;\r\n    \r\n    // Check for level up\r\n    const xpRequired = calculateXpForNextLevel(newLevel);\r\n    while (newXp >= xpRequired) {\r\n      newXp -= xpRequired;\r\n      newLevel++;\r\n    }\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...skill,\r\n        level: newLevel,\r\n        xp: newXp\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Get a list of all active skills\r\n   */\r\n  const getActiveSkills = useCallback(() => {\r\n    if (!gameState) return [];\r\n    \r\n    return Object.keys(gameState.player.skills).filter(\r\n      skillId => gameState.player.skills[skillId].isActive\r\n    );\r\n  }, [gameState]);\r\n  \r\n  /**\r\n   * Check if a skill has reached a specific level\r\n   */\r\n  const hasReachedLevel = useCallback((skillId: string, level: number) => {\r\n    if (!gameState) return false;\r\n    \r\n    const skill = gameState.player.skills[skillId];\r\n    return skill ? skill.level >= level : false;\r\n  }, [gameState]);\r\n  \r\n  return {\r\n    skills,\r\n    currentSkill,\r\n    selectSkill,\r\n    startSkill,\r\n    stopSkill,\r\n    addExperience,\r\n    getActiveSkills,\r\n    hasReachedLevel\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
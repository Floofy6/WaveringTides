{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { useInventory } from './useInventory';\nimport { SKILL_IDS } from '../constants';\n\n/**\n * useCombat hook - Manages combat-related state and operations\n */\nexport const useCombat = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState\n  } = useGameContext();\n  const {\n    addItem\n  } = useInventory();\n\n  // Mock enemies for now - in a real app, these would come from the game state or API\n  const [enemies] = useState([{\n    id: 'enemy_goblin',\n    name: 'Goblin',\n    attack: 5,\n    defense: 3,\n    health: 20,\n    maxHealth: 20,\n    lootTable: [{\n      itemId: 'item_gold_coin',\n      quantity: 5,\n      chance: 1.0\n    }, {\n      itemId: 'item_goblin_ear',\n      quantity: 1,\n      chance: 0.5\n    }]\n  }, {\n    id: 'enemy_wolf',\n    name: 'Wolf',\n    attack: 7,\n    defense: 2,\n    health: 15,\n    maxHealth: 15,\n    lootTable: [{\n      itemId: 'item_wolf_pelt',\n      quantity: 1,\n      chance: 0.8\n    }, {\n      itemId: 'item_wolf_fang',\n      quantity: 1,\n      chance: 0.3\n    }]\n  }, {\n    id: 'enemy_bandit',\n    name: 'Bandit',\n    attack: 8,\n    defense: 5,\n    health: 25,\n    maxHealth: 25,\n    lootTable: [{\n      itemId: 'item_gold_coin',\n      quantity: 10,\n      chance: 1.0\n    }, {\n      itemId: 'item_dagger',\n      quantity: 1,\n      chance: 0.2\n    }]\n  }]);\n\n  // Local state for combat\n  const [currentEnemy, setCurrentEnemy] = useState(null);\n  const [combatLog, setCombatLog] = useState([]);\n  const [combatInterval, setCombatInterval] = useState(null);\n\n  // Compute player stats from the game state\n  const getPlayerStats = useCallback(() => {\n    var _gameState$player$ski, _gameState$player$ski2, _gameState$player$ski3, _gameState$player$ski4, _gameState$player$ski5, _gameState$player$equ, _gameState$player$equ2, _gameState$player$equ3, _gameState$player$equ4, _gameState$player$equ5, _gameState$player$equ6;\n    if (!(gameState !== null && gameState !== void 0 && gameState.player)) return {\n      attack: 1,\n      strength: 1,\n      defense: 1,\n      health: 10,\n      maxHealth: 10\n    };\n    const attack = ((_gameState$player$ski = gameState.player.skills[SKILL_IDS.ATTACK]) === null || _gameState$player$ski === void 0 ? void 0 : _gameState$player$ski.level) || 1;\n    const strength = ((_gameState$player$ski2 = gameState.player.skills[SKILL_IDS.STRENGTH]) === null || _gameState$player$ski2 === void 0 ? void 0 : _gameState$player$ski2.level) || 1;\n    const defense = ((_gameState$player$ski3 = gameState.player.skills[SKILL_IDS.DEFENCE]) === null || _gameState$player$ski3 === void 0 ? void 0 : _gameState$player$ski3.level) || 1;\n    const health = ((_gameState$player$ski4 = gameState.player.skills[SKILL_IDS.HITPOINTS]) === null || _gameState$player$ski4 === void 0 ? void 0 : _gameState$player$ski4.xp) || 10;\n    const maxHealth = 10 + (((_gameState$player$ski5 = gameState.player.skills[SKILL_IDS.HITPOINTS]) === null || _gameState$player$ski5 === void 0 ? void 0 : _gameState$player$ski5.level) || 1) * 4;\n\n    // Add equipment bonuses\n    const attackBonus = ((_gameState$player$equ = gameState.player.equipment.weapon) === null || _gameState$player$equ === void 0 ? void 0 : (_gameState$player$equ2 = _gameState$player$equ.stats) === null || _gameState$player$equ2 === void 0 ? void 0 : _gameState$player$equ2.attackBonus) || 0;\n    const strengthBonus = ((_gameState$player$equ3 = gameState.player.equipment.weapon) === null || _gameState$player$equ3 === void 0 ? void 0 : (_gameState$player$equ4 = _gameState$player$equ3.stats) === null || _gameState$player$equ4 === void 0 ? void 0 : _gameState$player$equ4.strengthBonus) || 0;\n    const defenseBonus = ((_gameState$player$equ5 = gameState.player.equipment.armor) === null || _gameState$player$equ5 === void 0 ? void 0 : (_gameState$player$equ6 = _gameState$player$equ5.stats) === null || _gameState$player$equ6 === void 0 ? void 0 : _gameState$player$equ6.defenseBonus) || 0;\n    return {\n      attack: attack + attackBonus,\n      strength: strength + strengthBonus,\n      defense: defense + defenseBonus,\n      health,\n      maxHealth\n    };\n  }, [gameState]);\n\n  // Calculate combat stats\n  const playerStats = getPlayerStats();\n\n  /**\n   * Add a message to the combat log\n   */\n  const addLogMessage = useCallback(message => {\n    setCombatLog(prevLog => [message, ...prevLog].slice(0, 50)); // Keep last 50 messages\n  }, []);\n\n  /**\n   * Calculate damage based on attacker and defender stats\n   */\n  const calculateDamage = useCallback((attackerAttack, attackerStrength, defenderDefense) => {\n    // Calculate hit chance - higher attack = better chance to hit\n    const hitChance = 0.5 + (attackerAttack - defenderDefense) * 0.03;\n    const didHit = Math.random() < Math.min(0.95, Math.max(0.1, hitChance));\n    if (!didHit) return 0;\n\n    // Base damage from strength\n    const baseDamage = Math.max(1, Math.floor(attackerStrength / 2));\n\n    // Add randomness (80% to 120% of base damage)\n    const randomFactor = 0.8 + Math.random() * 0.4;\n    return Math.max(1, Math.floor(baseDamage * randomFactor));\n  }, []);\n\n  /**\n   * Process a single combat round\n   */\n  const processCombatRound = useCallback(() => {\n    if (!currentEnemy || !(gameState !== null && gameState !== void 0 && gameState.player)) return;\n\n    // Get current player stats\n    const stats = getPlayerStats();\n\n    // Player attacks enemy\n    const playerDamage = calculateDamage(stats.attack, stats.strength, currentEnemy.defense);\n    if (playerDamage > 0) {\n      // Update enemy health\n      const newEnemyHealth = Math.max(0, currentEnemy.health - playerDamage);\n      setCurrentEnemy(prev => prev ? {\n        ...prev,\n        health: newEnemyHealth\n      } : null);\n\n      // Add attack message to combat log\n      addLogMessage(`You hit the ${currentEnemy.name} for ${playerDamage} damage!`);\n\n      // Award combat XP\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        const newState = {\n          ...prevState\n        };\n        // Add XP to Attack and Strength\n        if (newState.player.skills[SKILL_IDS.ATTACK]) {\n          newState.player.skills[SKILL_IDS.ATTACK] = {\n            ...newState.player.skills[SKILL_IDS.ATTACK],\n            xp: newState.player.skills[SKILL_IDS.ATTACK].xp + playerDamage * 4\n          };\n        }\n        if (newState.player.skills[SKILL_IDS.STRENGTH]) {\n          newState.player.skills[SKILL_IDS.STRENGTH] = {\n            ...newState.player.skills[SKILL_IDS.STRENGTH],\n            xp: newState.player.skills[SKILL_IDS.STRENGTH].xp + playerDamage * 4\n          };\n        }\n        return newState;\n      });\n\n      // Check if enemy is defeated\n      if (newEnemyHealth <= 0) {\n        handleEnemyDefeated(currentEnemy);\n        return;\n      }\n    } else {\n      addLogMessage(`Your attack missed the ${currentEnemy.name}!`);\n    }\n\n    // Enemy attacks player\n    const enemyDamage = calculateDamage(currentEnemy.attack, currentEnemy.attack, stats.defense);\n    if (enemyDamage > 0) {\n      addLogMessage(`The ${currentEnemy.name} hits you for ${enemyDamage} damage!`);\n\n      // Update player health and award Defense XP\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        const newState = {\n          ...prevState\n        };\n\n        // Add XP to Defense (positive XP for being hit)\n        if (newState.player.skills[SKILL_IDS.DEFENCE]) {\n          newState.player.skills[SKILL_IDS.DEFENCE] = {\n            ...newState.player.skills[SKILL_IDS.DEFENCE],\n            xp: newState.player.skills[SKILL_IDS.DEFENCE].xp + enemyDamage * 4\n          };\n        }\n\n        // Reduce Hitpoints XP (as damage)\n        if (newState.player.skills[SKILL_IDS.HITPOINTS]) {\n          const newHitpointsXp = Math.max(0, newState.player.skills[SKILL_IDS.HITPOINTS].xp - enemyDamage);\n          newState.player.skills[SKILL_IDS.HITPOINTS] = {\n            ...newState.player.skills[SKILL_IDS.HITPOINTS],\n            xp: newHitpointsXp\n          };\n\n          // Check if player is defeated\n          if (newHitpointsXp <= 0) {\n            handlePlayerDefeated();\n          }\n        }\n        return newState;\n      });\n    } else {\n      addLogMessage(`The ${currentEnemy.name}'s attack missed you!`);\n    }\n  }, [currentEnemy, gameState, getPlayerStats, calculateDamage, addLogMessage, updateGameState]);\n\n  /**\n   * Start combat with an enemy\n   */\n  const startCombat = useCallback(enemyId => {\n    // Stop any existing combat\n    if (combatInterval) {\n      clearInterval(combatInterval);\n    }\n\n    // Find the enemy\n    const enemy = enemies.find(e => e.id === enemyId);\n    if (!enemy) return;\n\n    // Clone the enemy to avoid modifying the original\n    const enemyClone = {\n      ...enemy,\n      health: enemy.maxHealth // Reset health\n    };\n    setCurrentEnemy(enemyClone);\n    setCombatLog([`Combat started with ${enemyClone.name}!`]);\n\n    // Update game state\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          combat: {\n            currentEnemy: enemyClone,\n            isFighting: true\n          }\n        }\n      };\n    });\n\n    // Start combat loop - process combat every 2 seconds\n    const interval = setInterval(processCombatRound, 2000);\n    setCombatInterval(interval);\n    return () => clearInterval(interval);\n  }, [enemies, combatInterval, updateGameState, processCombatRound]);\n\n  /**\n   * Handle enemy defeat and loot\n   */\n  const handleEnemyDefeated = useCallback(enemy => {\n    // Stop combat loop\n    if (combatInterval) {\n      clearInterval(combatInterval);\n      setCombatInterval(null);\n    }\n    addLogMessage(`You defeated the ${enemy.name}!`);\n\n    // Process loot drops\n    const lootMessages = [];\n    const lootItems = [];\n    enemy.lootTable.forEach(loot => {\n      if (Math.random() <= loot.chance) {\n        lootMessages.push(`You found ${loot.quantity} ${loot.itemId.replace('item_', '').replace('_', ' ')}!`);\n        lootItems.push({\n          id: loot.itemId,\n          name: loot.itemId.replace('item_', '').replace('_', ' '),\n          quantity: loot.quantity,\n          type: 'resource',\n          sellPrice: 5 // Mock value for now\n        });\n      }\n    });\n\n    // Award gold\n    const goldAmount = Math.floor(Math.random() * (enemy.maxHealth / 2)) + 5;\n    lootMessages.push(`You found ${goldAmount} gold!`);\n\n    // Update player state with loot and gold\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      const newState = {\n        ...prevState\n      };\n\n      // Add gold\n      newState.player.gold += goldAmount;\n\n      // Add items to inventory\n      lootItems.forEach(item => {\n        // Use the addItem from our inventory hook\n        addItem(item);\n      });\n\n      // Reset combat state\n      newState.player.combat = {\n        isFighting: false,\n        currentEnemy: undefined\n      };\n      return newState;\n    });\n\n    // Display loot messages\n    lootMessages.forEach(msg => addLogMessage(msg));\n\n    // Reset current enemy\n    setCurrentEnemy(null);\n  }, [combatInterval, addLogMessage, updateGameState, addItem]);\n\n  /**\n   * Handle player defeat\n   */\n  const handlePlayerDefeated = useCallback(() => {\n    // Stop combat loop\n    if (combatInterval) {\n      clearInterval(combatInterval);\n      setCombatInterval(null);\n    }\n    addLogMessage('You have been defeated!');\n\n    // Update player state - reset combat and restore some health\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      const newState = {\n        ...prevState\n      };\n\n      // Reset combat state\n      newState.player.combat = {\n        isFighting: false,\n        currentEnemy: undefined\n      };\n\n      // Restore some hitpoints\n      if (newState.player.skills[SKILL_IDS.HITPOINTS]) {\n        newState.player.skills[SKILL_IDS.HITPOINTS] = {\n          ...newState.player.skills[SKILL_IDS.HITPOINTS],\n          xp: 10 // Small amount of health to recover\n        };\n      }\n      return newState;\n    });\n\n    // Reset current enemy\n    setCurrentEnemy(null);\n  }, [combatInterval, addLogMessage, updateGameState]);\n\n  /**\n   * Flee from combat\n   */\n  const fleeCombat = useCallback(() => {\n    if (!currentEnemy) return;\n\n    // 70% chance to successfully flee\n    if (Math.random() <= 0.7) {\n      addLogMessage('You successfully fled from combat!');\n\n      // Stop combat loop\n      if (combatInterval) {\n        clearInterval(combatInterval);\n        setCombatInterval(null);\n      }\n\n      // Update player state\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            combat: {\n              isFighting: false,\n              currentEnemy: undefined\n            }\n          }\n        };\n      });\n\n      // Reset current enemy\n      setCurrentEnemy(null);\n    } else {\n      addLogMessage('You failed to flee!');\n\n      // Enemy gets a free attack\n      processCombatRound();\n    }\n  }, [currentEnemy, combatInterval, addLogMessage, updateGameState, processCombatRound]);\n\n  // Clean up interval on unmount\n  useEffect(() => {\n    return () => {\n      if (combatInterval) {\n        clearInterval(combatInterval);\n      }\n    };\n  }, [combatInterval]);\n  return {\n    enemies,\n    currentEnemy,\n    isFighting: !!currentEnemy,\n    playerStats,\n    combatLog,\n    startCombat,\n    fleeCombat,\n    processCombatRound // Exposed for manual combat if needed\n  };\n};\n_s(useCombat, \"qCGtN7GUKTqhWHIpcia8WVtyNiU=\", false, function () {\n  return [useGameContext, useInventory];\n});","map":{"version":3,"names":["useState","useCallback","useEffect","useGameContext","useInventory","SKILL_IDS","useCombat","_s","gameState","updateGameState","addItem","enemies","id","name","attack","defense","health","maxHealth","lootTable","itemId","quantity","chance","currentEnemy","setCurrentEnemy","combatLog","setCombatLog","combatInterval","setCombatInterval","getPlayerStats","_gameState$player$ski","_gameState$player$ski2","_gameState$player$ski3","_gameState$player$ski4","_gameState$player$ski5","_gameState$player$equ","_gameState$player$equ2","_gameState$player$equ3","_gameState$player$equ4","_gameState$player$equ5","_gameState$player$equ6","player","strength","skills","ATTACK","level","STRENGTH","DEFENCE","HITPOINTS","xp","attackBonus","equipment","weapon","stats","strengthBonus","defenseBonus","armor","playerStats","addLogMessage","message","prevLog","slice","calculateDamage","attackerAttack","attackerStrength","defenderDefense","hitChance","didHit","Math","random","min","max","baseDamage","floor","randomFactor","processCombatRound","playerDamage","newEnemyHealth","prev","prevState","newState","handleEnemyDefeated","enemyDamage","newHitpointsXp","handlePlayerDefeated","startCombat","enemyId","clearInterval","enemy","find","e","enemyClone","combat","isFighting","interval","setInterval","lootMessages","lootItems","forEach","loot","push","replace","type","sellPrice","goldAmount","gold","item","undefined","msg","fleeCombat"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/hooks/useCombat.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { useInventory } from './useInventory';\nimport { Enemy } from '../types';\nimport { SKILL_IDS } from '../constants';\n\n/**\n * useCombat hook - Manages combat-related state and operations\n */\nexport const useCombat = () => {\n  const { gameState, updateGameState } = useGameContext();\n  const { addItem } = useInventory();\n  \n  // Mock enemies for now - in a real app, these would come from the game state or API\n  const [enemies] = useState<Enemy[]>([\n    {\n      id: 'enemy_goblin',\n      name: 'Goblin',\n      attack: 5,\n      defense: 3,\n      health: 20,\n      maxHealth: 20,\n      lootTable: [\n        { itemId: 'item_gold_coin', quantity: 5, chance: 1.0 },\n        { itemId: 'item_goblin_ear', quantity: 1, chance: 0.5 }\n      ]\n    },\n    {\n      id: 'enemy_wolf',\n      name: 'Wolf',\n      attack: 7,\n      defense: 2,\n      health: 15,\n      maxHealth: 15,\n      lootTable: [\n        { itemId: 'item_wolf_pelt', quantity: 1, chance: 0.8 },\n        { itemId: 'item_wolf_fang', quantity: 1, chance: 0.3 }\n      ]\n    },\n    {\n      id: 'enemy_bandit',\n      name: 'Bandit',\n      attack: 8,\n      defense: 5,\n      health: 25,\n      maxHealth: 25,\n      lootTable: [\n        { itemId: 'item_gold_coin', quantity: 10, chance: 1.0 },\n        { itemId: 'item_dagger', quantity: 1, chance: 0.2 }\n      ]\n    }\n  ]);\n  \n  // Local state for combat\n  const [currentEnemy, setCurrentEnemy] = useState<Enemy | null>(null);\n  const [combatLog, setCombatLog] = useState<string[]>([]);\n  const [combatInterval, setCombatInterval] = useState<NodeJS.Timeout | null>(null);\n  \n  // Compute player stats from the game state\n  const getPlayerStats = useCallback(() => {\n    if (!gameState?.player) return { attack: 1, strength: 1, defense: 1, health: 10, maxHealth: 10 };\n    \n    const attack = gameState.player.skills[SKILL_IDS.ATTACK]?.level || 1;\n    const strength = gameState.player.skills[SKILL_IDS.STRENGTH]?.level || 1;\n    const defense = gameState.player.skills[SKILL_IDS.DEFENCE]?.level || 1;\n    const health = gameState.player.skills[SKILL_IDS.HITPOINTS]?.xp || 10;\n    const maxHealth = 10 + (gameState.player.skills[SKILL_IDS.HITPOINTS]?.level || 1) * 4;\n    \n    // Add equipment bonuses\n    const attackBonus = gameState.player.equipment.weapon?.stats?.attackBonus || 0;\n    const strengthBonus = gameState.player.equipment.weapon?.stats?.strengthBonus || 0;\n    const defenseBonus = gameState.player.equipment.armor?.stats?.defenseBonus || 0;\n    \n    return {\n      attack: attack + attackBonus,\n      strength: strength + strengthBonus,\n      defense: defense + defenseBonus,\n      health,\n      maxHealth\n    };\n  }, [gameState]);\n  \n  // Calculate combat stats\n  const playerStats = getPlayerStats();\n  \n  /**\n   * Add a message to the combat log\n   */\n  const addLogMessage = useCallback((message: string) => {\n    setCombatLog(prevLog => [message, ...prevLog].slice(0, 50)); // Keep last 50 messages\n  }, []);\n  \n  /**\n   * Calculate damage based on attacker and defender stats\n   */\n  const calculateDamage = useCallback((attackerAttack: number, attackerStrength: number, defenderDefense: number) => {\n    // Calculate hit chance - higher attack = better chance to hit\n    const hitChance = 0.5 + (attackerAttack - defenderDefense) * 0.03;\n    const didHit = Math.random() < Math.min(0.95, Math.max(0.1, hitChance));\n    \n    if (!didHit) return 0;\n    \n    // Base damage from strength\n    const baseDamage = Math.max(1, Math.floor(attackerStrength / 2));\n    \n    // Add randomness (80% to 120% of base damage)\n    const randomFactor = 0.8 + Math.random() * 0.4;\n    \n    return Math.max(1, Math.floor(baseDamage * randomFactor));\n  }, []);\n  \n  /**\n   * Process a single combat round\n   */\n  const processCombatRound = useCallback(() => {\n    if (!currentEnemy || !gameState?.player) return;\n    \n    // Get current player stats\n    const stats = getPlayerStats();\n    \n    // Player attacks enemy\n    const playerDamage = calculateDamage(stats.attack, stats.strength, currentEnemy.defense);\n    \n    if (playerDamage > 0) {\n      // Update enemy health\n      const newEnemyHealth = Math.max(0, currentEnemy.health - playerDamage);\n      setCurrentEnemy(prev => prev ? { ...prev, health: newEnemyHealth } : null);\n      \n      // Add attack message to combat log\n      addLogMessage(`You hit the ${currentEnemy.name} for ${playerDamage} damage!`);\n      \n      // Award combat XP\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        \n        const newState = { ...prevState };\n        // Add XP to Attack and Strength\n        if (newState.player.skills[SKILL_IDS.ATTACK]) {\n          newState.player.skills[SKILL_IDS.ATTACK] = {\n            ...newState.player.skills[SKILL_IDS.ATTACK],\n            xp: newState.player.skills[SKILL_IDS.ATTACK].xp + playerDamage * 4\n          };\n        }\n        \n        if (newState.player.skills[SKILL_IDS.STRENGTH]) {\n          newState.player.skills[SKILL_IDS.STRENGTH] = {\n            ...newState.player.skills[SKILL_IDS.STRENGTH],\n            xp: newState.player.skills[SKILL_IDS.STRENGTH].xp + playerDamage * 4\n          };\n        }\n        \n        return newState;\n      });\n      \n      // Check if enemy is defeated\n      if (newEnemyHealth <= 0) {\n        handleEnemyDefeated(currentEnemy);\n        return;\n      }\n    } else {\n      addLogMessage(`Your attack missed the ${currentEnemy.name}!`);\n    }\n    \n    // Enemy attacks player\n    const enemyDamage = calculateDamage(currentEnemy.attack, currentEnemy.attack, stats.defense);\n    \n    if (enemyDamage > 0) {\n      addLogMessage(`The ${currentEnemy.name} hits you for ${enemyDamage} damage!`);\n      \n      // Update player health and award Defense XP\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        \n        const newState = { ...prevState };\n        \n        // Add XP to Defense (positive XP for being hit)\n        if (newState.player.skills[SKILL_IDS.DEFENCE]) {\n          newState.player.skills[SKILL_IDS.DEFENCE] = {\n            ...newState.player.skills[SKILL_IDS.DEFENCE],\n            xp: newState.player.skills[SKILL_IDS.DEFENCE].xp + enemyDamage * 4\n          };\n        }\n        \n        // Reduce Hitpoints XP (as damage)\n        if (newState.player.skills[SKILL_IDS.HITPOINTS]) {\n          const newHitpointsXp = Math.max(0, newState.player.skills[SKILL_IDS.HITPOINTS].xp - enemyDamage);\n          newState.player.skills[SKILL_IDS.HITPOINTS] = {\n            ...newState.player.skills[SKILL_IDS.HITPOINTS],\n            xp: newHitpointsXp\n          };\n          \n          // Check if player is defeated\n          if (newHitpointsXp <= 0) {\n            handlePlayerDefeated();\n          }\n        }\n        \n        return newState;\n      });\n    } else {\n      addLogMessage(`The ${currentEnemy.name}'s attack missed you!`);\n    }\n  }, [currentEnemy, gameState, getPlayerStats, calculateDamage, addLogMessage, updateGameState]);\n  \n  /**\n   * Start combat with an enemy\n   */\n  const startCombat = useCallback((enemyId: string) => {\n    // Stop any existing combat\n    if (combatInterval) {\n      clearInterval(combatInterval);\n    }\n    \n    // Find the enemy\n    const enemy = enemies.find(e => e.id === enemyId);\n    if (!enemy) return;\n    \n    // Clone the enemy to avoid modifying the original\n    const enemyClone: Enemy = {\n      ...enemy,\n      health: enemy.maxHealth // Reset health\n    };\n    \n    setCurrentEnemy(enemyClone);\n    setCombatLog([`Combat started with ${enemyClone.name}!`]);\n    \n    // Update game state\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          combat: {\n            currentEnemy: enemyClone,\n            isFighting: true\n          }\n        }\n      };\n    });\n    \n    // Start combat loop - process combat every 2 seconds\n    const interval = setInterval(processCombatRound, 2000);\n    setCombatInterval(interval);\n    \n    return () => clearInterval(interval);\n  }, [enemies, combatInterval, updateGameState, processCombatRound]);\n  \n  /**\n   * Handle enemy defeat and loot\n   */\n  const handleEnemyDefeated = useCallback((enemy: Enemy) => {\n    // Stop combat loop\n    if (combatInterval) {\n      clearInterval(combatInterval);\n      setCombatInterval(null);\n    }\n    \n    addLogMessage(`You defeated the ${enemy.name}!`);\n    \n    // Process loot drops\n    const lootMessages: string[] = [];\n    const lootItems: any[] = [];\n    \n    enemy.lootTable.forEach(loot => {\n      if (Math.random() <= loot.chance) {\n        lootMessages.push(`You found ${loot.quantity} ${loot.itemId.replace('item_', '').replace('_', ' ')}!`);\n        lootItems.push({\n          id: loot.itemId,\n          name: loot.itemId.replace('item_', '').replace('_', ' '),\n          quantity: loot.quantity,\n          type: 'resource',\n          sellPrice: 5 // Mock value for now\n        });\n      }\n    });\n    \n    // Award gold\n    const goldAmount = Math.floor(Math.random() * (enemy.maxHealth / 2)) + 5;\n    lootMessages.push(`You found ${goldAmount} gold!`);\n    \n    // Update player state with loot and gold\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      \n      const newState = { ...prevState };\n      \n      // Add gold\n      newState.player.gold += goldAmount;\n      \n      // Add items to inventory\n      lootItems.forEach(item => {\n        // Use the addItem from our inventory hook\n        addItem(item);\n      });\n      \n      // Reset combat state\n      newState.player.combat = {\n        isFighting: false,\n        currentEnemy: undefined\n      };\n      \n      return newState;\n    });\n    \n    // Display loot messages\n    lootMessages.forEach(msg => addLogMessage(msg));\n    \n    // Reset current enemy\n    setCurrentEnemy(null);\n  }, [combatInterval, addLogMessage, updateGameState, addItem]);\n  \n  /**\n   * Handle player defeat\n   */\n  const handlePlayerDefeated = useCallback(() => {\n    // Stop combat loop\n    if (combatInterval) {\n      clearInterval(combatInterval);\n      setCombatInterval(null);\n    }\n    \n    addLogMessage('You have been defeated!');\n    \n    // Update player state - reset combat and restore some health\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      \n      const newState = { ...prevState };\n      \n      // Reset combat state\n      newState.player.combat = {\n        isFighting: false,\n        currentEnemy: undefined\n      };\n      \n      // Restore some hitpoints\n      if (newState.player.skills[SKILL_IDS.HITPOINTS]) {\n        newState.player.skills[SKILL_IDS.HITPOINTS] = {\n          ...newState.player.skills[SKILL_IDS.HITPOINTS],\n          xp: 10 // Small amount of health to recover\n        };\n      }\n      \n      return newState;\n    });\n    \n    // Reset current enemy\n    setCurrentEnemy(null);\n  }, [combatInterval, addLogMessage, updateGameState]);\n  \n  /**\n   * Flee from combat\n   */\n  const fleeCombat = useCallback(() => {\n    if (!currentEnemy) return;\n    \n    // 70% chance to successfully flee\n    if (Math.random() <= 0.7) {\n      addLogMessage('You successfully fled from combat!');\n      \n      // Stop combat loop\n      if (combatInterval) {\n        clearInterval(combatInterval);\n        setCombatInterval(null);\n      }\n      \n      // Update player state\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        \n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            combat: {\n              isFighting: false,\n              currentEnemy: undefined\n            }\n          }\n        };\n      });\n      \n      // Reset current enemy\n      setCurrentEnemy(null);\n    } else {\n      addLogMessage('You failed to flee!');\n      \n      // Enemy gets a free attack\n      processCombatRound();\n    }\n  }, [currentEnemy, combatInterval, addLogMessage, updateGameState, processCombatRound]);\n  \n  // Clean up interval on unmount\n  useEffect(() => {\n    return () => {\n      if (combatInterval) {\n        clearInterval(combatInterval);\n      }\n    };\n  }, [combatInterval]);\n  \n  return {\n    enemies,\n    currentEnemy,\n    isFighting: !!currentEnemy,\n    playerStats,\n    combatLog,\n    startCombat,\n    fleeCombat,\n    processCombatRound // Exposed for manual combat if needed\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACxD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,SAASC,SAAS,QAAQ,cAAc;;AAExC;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGN,cAAc,CAAC,CAAC;EACvD,MAAM;IAAEO;EAAQ,CAAC,GAAGN,YAAY,CAAC,CAAC;;EAElC;EACA,MAAM,CAACO,OAAO,CAAC,GAAGX,QAAQ,CAAU,CAClC;IACEY,EAAE,EAAE,cAAc;IAClBC,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE,CAAC;IACVC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE,CACT;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,QAAQ,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAI,CAAC,EACtD;MAAEF,MAAM,EAAE,iBAAiB;MAAEC,QAAQ,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAI,CAAC;EAE3D,CAAC,EACD;IACET,EAAE,EAAE,YAAY;IAChBC,IAAI,EAAE,MAAM;IACZC,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE,CAAC;IACVC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE,CACT;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,QAAQ,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAI,CAAC,EACtD;MAAEF,MAAM,EAAE,gBAAgB;MAAEC,QAAQ,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAI,CAAC;EAE1D,CAAC,EACD;IACET,EAAE,EAAE,cAAc;IAClBC,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE,CAAC;IACVC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE,CACT;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,QAAQ,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,EACvD;MAAEF,MAAM,EAAE,aAAa;MAAEC,QAAQ,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAI,CAAC;EAEvD,CAAC,CACF,CAAC;;EAEF;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAe,IAAI,CAAC;EACpE,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAW,EAAE,CAAC;EACxD,MAAM,CAAC0B,cAAc,EAAEC,iBAAiB,CAAC,GAAG3B,QAAQ,CAAwB,IAAI,CAAC;;EAEjF;EACA,MAAM4B,cAAc,GAAG3B,WAAW,CAAC,MAAM;IAAA,IAAA4B,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IACvC,IAAI,EAAC/B,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEgC,MAAM,GAAE,OAAO;MAAE1B,MAAM,EAAE,CAAC;MAAE2B,QAAQ,EAAE,CAAC;MAAE1B,OAAO,EAAE,CAAC;MAAEC,MAAM,EAAE,EAAE;MAAEC,SAAS,EAAE;IAAG,CAAC;IAEhG,MAAMH,MAAM,GAAG,EAAAe,qBAAA,GAAArB,SAAS,CAACgC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACsC,MAAM,CAAC,cAAAd,qBAAA,uBAAzCA,qBAAA,CAA2Ce,KAAK,KAAI,CAAC;IACpE,MAAMH,QAAQ,GAAG,EAAAX,sBAAA,GAAAtB,SAAS,CAACgC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACwC,QAAQ,CAAC,cAAAf,sBAAA,uBAA3CA,sBAAA,CAA6Cc,KAAK,KAAI,CAAC;IACxE,MAAM7B,OAAO,GAAG,EAAAgB,sBAAA,GAAAvB,SAAS,CAACgC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACyC,OAAO,CAAC,cAAAf,sBAAA,uBAA1CA,sBAAA,CAA4Ca,KAAK,KAAI,CAAC;IACtE,MAAM5B,MAAM,GAAG,EAAAgB,sBAAA,GAAAxB,SAAS,CAACgC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAAC0C,SAAS,CAAC,cAAAf,sBAAA,uBAA5CA,sBAAA,CAA8CgB,EAAE,KAAI,EAAE;IACrE,MAAM/B,SAAS,GAAG,EAAE,GAAG,CAAC,EAAAgB,sBAAA,GAAAzB,SAAS,CAACgC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAAC0C,SAAS,CAAC,cAAAd,sBAAA,uBAA5CA,sBAAA,CAA8CW,KAAK,KAAI,CAAC,IAAI,CAAC;;IAErF;IACA,MAAMK,WAAW,GAAG,EAAAf,qBAAA,GAAA1B,SAAS,CAACgC,MAAM,CAACU,SAAS,CAACC,MAAM,cAAAjB,qBAAA,wBAAAC,sBAAA,GAAjCD,qBAAA,CAAmCkB,KAAK,cAAAjB,sBAAA,uBAAxCA,sBAAA,CAA0Cc,WAAW,KAAI,CAAC;IAC9E,MAAMI,aAAa,GAAG,EAAAjB,sBAAA,GAAA5B,SAAS,CAACgC,MAAM,CAACU,SAAS,CAACC,MAAM,cAAAf,sBAAA,wBAAAC,sBAAA,GAAjCD,sBAAA,CAAmCgB,KAAK,cAAAf,sBAAA,uBAAxCA,sBAAA,CAA0CgB,aAAa,KAAI,CAAC;IAClF,MAAMC,YAAY,GAAG,EAAAhB,sBAAA,GAAA9B,SAAS,CAACgC,MAAM,CAACU,SAAS,CAACK,KAAK,cAAAjB,sBAAA,wBAAAC,sBAAA,GAAhCD,sBAAA,CAAkCc,KAAK,cAAAb,sBAAA,uBAAvCA,sBAAA,CAAyCe,YAAY,KAAI,CAAC;IAE/E,OAAO;MACLxC,MAAM,EAAEA,MAAM,GAAGmC,WAAW;MAC5BR,QAAQ,EAAEA,QAAQ,GAAGY,aAAa;MAClCtC,OAAO,EAAEA,OAAO,GAAGuC,YAAY;MAC/BtC,MAAM;MACNC;IACF,CAAC;EACH,CAAC,EAAE,CAACT,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMgD,WAAW,GAAG5B,cAAc,CAAC,CAAC;;EAEpC;AACF;AACA;EACE,MAAM6B,aAAa,GAAGxD,WAAW,CAAEyD,OAAe,IAAK;IACrDjC,YAAY,CAACkC,OAAO,IAAI,CAACD,OAAO,EAAE,GAAGC,OAAO,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;EAC/D,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAMC,eAAe,GAAG5D,WAAW,CAAC,CAAC6D,cAAsB,EAAEC,gBAAwB,EAAEC,eAAuB,KAAK;IACjH;IACA,MAAMC,SAAS,GAAG,GAAG,GAAG,CAACH,cAAc,GAAGE,eAAe,IAAI,IAAI;IACjE,MAAME,MAAM,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,GAAG,CAAC,IAAI,EAAEF,IAAI,CAACG,GAAG,CAAC,GAAG,EAAEL,SAAS,CAAC,CAAC;IAEvE,IAAI,CAACC,MAAM,EAAE,OAAO,CAAC;;IAErB;IACA,MAAMK,UAAU,GAAGJ,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEH,IAAI,CAACK,KAAK,CAACT,gBAAgB,GAAG,CAAC,CAAC,CAAC;;IAEhE;IACA,MAAMU,YAAY,GAAG,GAAG,GAAGN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;IAE9C,OAAOD,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEH,IAAI,CAACK,KAAK,CAACD,UAAU,GAAGE,YAAY,CAAC,CAAC;EAC3D,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAMC,kBAAkB,GAAGzE,WAAW,CAAC,MAAM;IAC3C,IAAI,CAACqB,YAAY,IAAI,EAACd,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEgC,MAAM,GAAE;;IAEzC;IACA,MAAMY,KAAK,GAAGxB,cAAc,CAAC,CAAC;;IAE9B;IACA,MAAM+C,YAAY,GAAGd,eAAe,CAACT,KAAK,CAACtC,MAAM,EAAEsC,KAAK,CAACX,QAAQ,EAAEnB,YAAY,CAACP,OAAO,CAAC;IAExF,IAAI4D,YAAY,GAAG,CAAC,EAAE;MACpB;MACA,MAAMC,cAAc,GAAGT,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEhD,YAAY,CAACN,MAAM,GAAG2D,YAAY,CAAC;MACtEpD,eAAe,CAACsD,IAAI,IAAIA,IAAI,GAAG;QAAE,GAAGA,IAAI;QAAE7D,MAAM,EAAE4D;MAAe,CAAC,GAAG,IAAI,CAAC;;MAE1E;MACAnB,aAAa,CAAC,eAAenC,YAAY,CAACT,IAAI,QAAQ8D,YAAY,UAAU,CAAC;;MAE7E;MACAlE,eAAe,CAACqE,SAAS,IAAI;QAC3B,IAAI,CAACA,SAAS,EAAE,OAAOA,SAAS;QAEhC,MAAMC,QAAQ,GAAG;UAAE,GAAGD;QAAU,CAAC;QACjC;QACA,IAAIC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACsC,MAAM,CAAC,EAAE;UAC5CoC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACsC,MAAM,CAAC,GAAG;YACzC,GAAGoC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACsC,MAAM,CAAC;YAC3CK,EAAE,EAAE+B,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACsC,MAAM,CAAC,CAACK,EAAE,GAAG2B,YAAY,GAAG;UACnE,CAAC;QACH;QAEA,IAAII,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACwC,QAAQ,CAAC,EAAE;UAC9CkC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACwC,QAAQ,CAAC,GAAG;YAC3C,GAAGkC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACwC,QAAQ,CAAC;YAC7CG,EAAE,EAAE+B,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACwC,QAAQ,CAAC,CAACG,EAAE,GAAG2B,YAAY,GAAG;UACrE,CAAC;QACH;QAEA,OAAOI,QAAQ;MACjB,CAAC,CAAC;;MAEF;MACA,IAAIH,cAAc,IAAI,CAAC,EAAE;QACvBI,mBAAmB,CAAC1D,YAAY,CAAC;QACjC;MACF;IACF,CAAC,MAAM;MACLmC,aAAa,CAAC,0BAA0BnC,YAAY,CAACT,IAAI,GAAG,CAAC;IAC/D;;IAEA;IACA,MAAMoE,WAAW,GAAGpB,eAAe,CAACvC,YAAY,CAACR,MAAM,EAAEQ,YAAY,CAACR,MAAM,EAAEsC,KAAK,CAACrC,OAAO,CAAC;IAE5F,IAAIkE,WAAW,GAAG,CAAC,EAAE;MACnBxB,aAAa,CAAC,OAAOnC,YAAY,CAACT,IAAI,iBAAiBoE,WAAW,UAAU,CAAC;;MAE7E;MACAxE,eAAe,CAACqE,SAAS,IAAI;QAC3B,IAAI,CAACA,SAAS,EAAE,OAAOA,SAAS;QAEhC,MAAMC,QAAQ,GAAG;UAAE,GAAGD;QAAU,CAAC;;QAEjC;QACA,IAAIC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACyC,OAAO,CAAC,EAAE;UAC7CiC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACyC,OAAO,CAAC,GAAG;YAC1C,GAAGiC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACyC,OAAO,CAAC;YAC5CE,EAAE,EAAE+B,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAACyC,OAAO,CAAC,CAACE,EAAE,GAAGiC,WAAW,GAAG;UACnE,CAAC;QACH;;QAEA;QACA,IAAIF,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAAC0C,SAAS,CAAC,EAAE;UAC/C,MAAMmC,cAAc,GAAGf,IAAI,CAACG,GAAG,CAAC,CAAC,EAAES,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAAC0C,SAAS,CAAC,CAACC,EAAE,GAAGiC,WAAW,CAAC;UAChGF,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAAC0C,SAAS,CAAC,GAAG;YAC5C,GAAGgC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAAC0C,SAAS,CAAC;YAC9CC,EAAE,EAAEkC;UACN,CAAC;;UAED;UACA,IAAIA,cAAc,IAAI,CAAC,EAAE;YACvBC,oBAAoB,CAAC,CAAC;UACxB;QACF;QAEA,OAAOJ,QAAQ;MACjB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLtB,aAAa,CAAC,OAAOnC,YAAY,CAACT,IAAI,uBAAuB,CAAC;IAChE;EACF,CAAC,EAAE,CAACS,YAAY,EAAEd,SAAS,EAAEoB,cAAc,EAAEiC,eAAe,EAAEJ,aAAa,EAAEhD,eAAe,CAAC,CAAC;;EAE9F;AACF;AACA;EACE,MAAM2E,WAAW,GAAGnF,WAAW,CAAEoF,OAAe,IAAK;IACnD;IACA,IAAI3D,cAAc,EAAE;MAClB4D,aAAa,CAAC5D,cAAc,CAAC;IAC/B;;IAEA;IACA,MAAM6D,KAAK,GAAG5E,OAAO,CAAC6E,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7E,EAAE,KAAKyE,OAAO,CAAC;IACjD,IAAI,CAACE,KAAK,EAAE;;IAEZ;IACA,MAAMG,UAAiB,GAAG;MACxB,GAAGH,KAAK;MACRvE,MAAM,EAAEuE,KAAK,CAACtE,SAAS,CAAC;IAC1B,CAAC;IAEDM,eAAe,CAACmE,UAAU,CAAC;IAC3BjE,YAAY,CAAC,CAAC,uBAAuBiE,UAAU,CAAC7E,IAAI,GAAG,CAAC,CAAC;;IAEzD;IACAJ,eAAe,CAACqE,SAAS,IAAI;MAC3B,IAAI,CAACA,SAAS,EAAE,OAAOA,SAAS;MAEhC,OAAO;QACL,GAAGA,SAAS;QACZtC,MAAM,EAAE;UACN,GAAGsC,SAAS,CAACtC,MAAM;UACnBmD,MAAM,EAAE;YACNrE,YAAY,EAAEoE,UAAU;YACxBE,UAAU,EAAE;UACd;QACF;MACF,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMC,QAAQ,GAAGC,WAAW,CAACpB,kBAAkB,EAAE,IAAI,CAAC;IACtD/C,iBAAiB,CAACkE,QAAQ,CAAC;IAE3B,OAAO,MAAMP,aAAa,CAACO,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAClF,OAAO,EAAEe,cAAc,EAAEjB,eAAe,EAAEiE,kBAAkB,CAAC,CAAC;;EAElE;AACF;AACA;EACE,MAAMM,mBAAmB,GAAG/E,WAAW,CAAEsF,KAAY,IAAK;IACxD;IACA,IAAI7D,cAAc,EAAE;MAClB4D,aAAa,CAAC5D,cAAc,CAAC;MAC7BC,iBAAiB,CAAC,IAAI,CAAC;IACzB;IAEA8B,aAAa,CAAC,oBAAoB8B,KAAK,CAAC1E,IAAI,GAAG,CAAC;;IAEhD;IACA,MAAMkF,YAAsB,GAAG,EAAE;IACjC,MAAMC,SAAgB,GAAG,EAAE;IAE3BT,KAAK,CAACrE,SAAS,CAAC+E,OAAO,CAACC,IAAI,IAAI;MAC9B,IAAI/B,IAAI,CAACC,MAAM,CAAC,CAAC,IAAI8B,IAAI,CAAC7E,MAAM,EAAE;QAChC0E,YAAY,CAACI,IAAI,CAAC,aAAaD,IAAI,CAAC9E,QAAQ,IAAI8E,IAAI,CAAC/E,MAAM,CAACiF,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC;QACtGJ,SAAS,CAACG,IAAI,CAAC;UACbvF,EAAE,EAAEsF,IAAI,CAAC/E,MAAM;UACfN,IAAI,EAAEqF,IAAI,CAAC/E,MAAM,CAACiF,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;UACxDhF,QAAQ,EAAE8E,IAAI,CAAC9E,QAAQ;UACvBiF,IAAI,EAAE,UAAU;UAChBC,SAAS,EAAE,CAAC,CAAC;QACf,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,UAAU,GAAGpC,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,MAAM,CAAC,CAAC,IAAImB,KAAK,CAACtE,SAAS,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACxE8E,YAAY,CAACI,IAAI,CAAC,aAAaI,UAAU,QAAQ,CAAC;;IAElD;IACA9F,eAAe,CAACqE,SAAS,IAAI;MAC3B,IAAI,CAACA,SAAS,EAAE,OAAOA,SAAS;MAEhC,MAAMC,QAAQ,GAAG;QAAE,GAAGD;MAAU,CAAC;;MAEjC;MACAC,QAAQ,CAACvC,MAAM,CAACgE,IAAI,IAAID,UAAU;;MAElC;MACAP,SAAS,CAACC,OAAO,CAACQ,IAAI,IAAI;QACxB;QACA/F,OAAO,CAAC+F,IAAI,CAAC;MACf,CAAC,CAAC;;MAEF;MACA1B,QAAQ,CAACvC,MAAM,CAACmD,MAAM,GAAG;QACvBC,UAAU,EAAE,KAAK;QACjBtE,YAAY,EAAEoF;MAChB,CAAC;MAED,OAAO3B,QAAQ;IACjB,CAAC,CAAC;;IAEF;IACAgB,YAAY,CAACE,OAAO,CAACU,GAAG,IAAIlD,aAAa,CAACkD,GAAG,CAAC,CAAC;;IAE/C;IACApF,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,EAAE,CAACG,cAAc,EAAE+B,aAAa,EAAEhD,eAAe,EAAEC,OAAO,CAAC,CAAC;;EAE7D;AACF;AACA;EACE,MAAMyE,oBAAoB,GAAGlF,WAAW,CAAC,MAAM;IAC7C;IACA,IAAIyB,cAAc,EAAE;MAClB4D,aAAa,CAAC5D,cAAc,CAAC;MAC7BC,iBAAiB,CAAC,IAAI,CAAC;IACzB;IAEA8B,aAAa,CAAC,yBAAyB,CAAC;;IAExC;IACAhD,eAAe,CAACqE,SAAS,IAAI;MAC3B,IAAI,CAACA,SAAS,EAAE,OAAOA,SAAS;MAEhC,MAAMC,QAAQ,GAAG;QAAE,GAAGD;MAAU,CAAC;;MAEjC;MACAC,QAAQ,CAACvC,MAAM,CAACmD,MAAM,GAAG;QACvBC,UAAU,EAAE,KAAK;QACjBtE,YAAY,EAAEoF;MAChB,CAAC;;MAED;MACA,IAAI3B,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAAC0C,SAAS,CAAC,EAAE;QAC/CgC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAAC0C,SAAS,CAAC,GAAG;UAC5C,GAAGgC,QAAQ,CAACvC,MAAM,CAACE,MAAM,CAACrC,SAAS,CAAC0C,SAAS,CAAC;UAC9CC,EAAE,EAAE,EAAE,CAAC;QACT,CAAC;MACH;MAEA,OAAO+B,QAAQ;IACjB,CAAC,CAAC;;IAEF;IACAxD,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,EAAE,CAACG,cAAc,EAAE+B,aAAa,EAAEhD,eAAe,CAAC,CAAC;;EAEpD;AACF;AACA;EACE,MAAMmG,UAAU,GAAG3G,WAAW,CAAC,MAAM;IACnC,IAAI,CAACqB,YAAY,EAAE;;IAEnB;IACA,IAAI6C,IAAI,CAACC,MAAM,CAAC,CAAC,IAAI,GAAG,EAAE;MACxBX,aAAa,CAAC,oCAAoC,CAAC;;MAEnD;MACA,IAAI/B,cAAc,EAAE;QAClB4D,aAAa,CAAC5D,cAAc,CAAC;QAC7BC,iBAAiB,CAAC,IAAI,CAAC;MACzB;;MAEA;MACAlB,eAAe,CAACqE,SAAS,IAAI;QAC3B,IAAI,CAACA,SAAS,EAAE,OAAOA,SAAS;QAEhC,OAAO;UACL,GAAGA,SAAS;UACZtC,MAAM,EAAE;YACN,GAAGsC,SAAS,CAACtC,MAAM;YACnBmD,MAAM,EAAE;cACNC,UAAU,EAAE,KAAK;cACjBtE,YAAY,EAAEoF;YAChB;UACF;QACF,CAAC;MACH,CAAC,CAAC;;MAEF;MACAnF,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACLkC,aAAa,CAAC,qBAAqB,CAAC;;MAEpC;MACAiB,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACpD,YAAY,EAAEI,cAAc,EAAE+B,aAAa,EAAEhD,eAAe,EAAEiE,kBAAkB,CAAC,CAAC;;EAEtF;EACAxE,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIwB,cAAc,EAAE;QAClB4D,aAAa,CAAC5D,cAAc,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,OAAO;IACLf,OAAO;IACPW,YAAY;IACZsE,UAAU,EAAE,CAAC,CAACtE,YAAY;IAC1BkC,WAAW;IACXhC,SAAS;IACT4D,WAAW;IACXwB,UAAU;IACVlC,kBAAkB,CAAC;EACrB,CAAC;AACH,CAAC;AAACnE,EAAA,CApZWD,SAAS;EAAA,QACmBH,cAAc,EACjCC,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
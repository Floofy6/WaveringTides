{"ast":null,"code":"import{useGameContext}from'../context/GameContext';import{useCallback}from'react';/**\r\n * Hook for managing inventory-related state and operations\r\n */export const useInventory=()=>{const{gameState,updateGameState}=useGameContext();/**\r\n   * Sell an item from the inventory\r\n   */const sellItem=(itemId,quantity)=>{if(!gameState)return;const item=gameState.player.inventory[itemId];if(!item||!item.sellPrice)return;updateGameState(prevState=>{if(!prevState)return prevState;const newInventory={...prevState.player.inventory};// Use the non-null assertion since we already checked for the sellPrice above\nconst newGold=prevState.player.gold+item.sellPrice*quantity;if(item.quantity<=quantity){delete newInventory[itemId];}else{newInventory[itemId]={...item,quantity:item.quantity-quantity};}return{...prevState,player:{...prevState.player,gold:newGold,inventory:newInventory}};});};/**\r\n   * Equip an item from the inventory\r\n   */const equipItem=itemId=>{if(!gameState)return;const item=gameState.player.inventory[itemId];if(!item||item.type!=='equipment'||!item.slot)return;updateGameState(prevState=>{if(!prevState)return prevState;const newInventory={...prevState.player.inventory};const newEquipment={...prevState.player.equipment};// Type guard to ensure slot is 'weapon' or 'armor'\nif(item.slot==='weapon'||item.slot==='armor'){// Unequip current item if any\nconst currentEquipped=newEquipment[item.slot];if(currentEquipped){if(newInventory[currentEquipped.id]){newInventory[currentEquipped.id].quantity+=1;}else{newInventory[currentEquipped.id]={...currentEquipped,quantity:1};}}// Equip new item\nnewEquipment[item.slot]={...item,quantity:1};}// Remove from inventory\nif(item.quantity<=1){delete newInventory[itemId];}else{newInventory[itemId]={...item,quantity:item.quantity-1};}return{...prevState,player:{...prevState.player,inventory:newInventory,equipment:newEquipment}};});};/**\r\n   * Unequip an item from equipment slots\r\n   */const unequipItem=slot=>{if(!gameState)return;const equippedItem=gameState.player.equipment[slot];if(!equippedItem)return;updateGameState(prevState=>{if(!prevState)return prevState;const newInventory={...prevState.player.inventory};const newEquipment={...prevState.player.equipment};// Add to inventory\nif(newInventory[equippedItem.id]){newInventory[equippedItem.id].quantity+=1;}else{newInventory[equippedItem.id]={...equippedItem,quantity:1};}// Remove from equipment\nnewEquipment[slot]=undefined;return{...prevState,player:{...prevState.player,inventory:newInventory,equipment:newEquipment}};});};/**\r\n   * Add an item to the inventory\r\n   */const addItem=item=>{if(!gameState)return;updateGameState(prevState=>{if(!prevState)return prevState;const newInventory={...prevState.player.inventory};if(newInventory[item.id]){newInventory[item.id]={...newInventory[item.id],quantity:newInventory[item.id].quantity+item.quantity};}else{newInventory[item.id]={...item};}return{...prevState,player:{...prevState.player,inventory:newInventory}};});};/**\r\n   * Check if the player has a certain quantity of an item\r\n   */const checkItemQuantity=useCallback(function(itemId){let quantity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(!gameState)return false;const item=gameState.player.inventory[itemId];return item&&item.quantity>=quantity;},[gameState]);/**\r\n   * Get the quantity of a specific item in the inventory\r\n   */const getItemQuantity=useCallback(itemId=>{if(!gameState)return 0;const item=gameState.player.inventory[itemId];return item?item.quantity:0;},[gameState]);return{inventory:(gameState===null||gameState===void 0?void 0:gameState.player.inventory)||{},equipment:(gameState===null||gameState===void 0?void 0:gameState.player.equipment)||{},sellItem,equipItem,unequipItem,addItem,checkItemQuantity,getItemQuantity};};","map":{"version":3,"names":["useGameContext","useCallback","useInventory","gameState","updateGameState","sellItem","itemId","quantity","item","player","inventory","sellPrice","prevState","newInventory","newGold","gold","equipItem","type","slot","newEquipment","equipment","currentEquipped","id","unequipItem","equippedItem","undefined","addItem","checkItemQuantity","arguments","length","getItemQuantity"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/hooks/useInventory.ts"],"sourcesContent":["import { useGameContext } from '../context/GameContext';\r\nimport { GameState, Item } from '../types';\r\nimport { useCallback } from 'react';\r\n\r\n/**\r\n * Hook for managing inventory-related state and operations\r\n */\r\nexport const useInventory = () => {\r\n  const { gameState, updateGameState } = useGameContext();\r\n  \r\n  /**\r\n   * Sell an item from the inventory\r\n   */\r\n  const sellItem = (itemId: string, quantity: number) => {\r\n    if (!gameState) return;\r\n    \r\n    const item = gameState.player.inventory[itemId];\r\n    if (!item || !item.sellPrice) return;\r\n    \r\n    updateGameState((prevState: GameState | null) => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newInventory = { ...prevState.player.inventory };\r\n      // Use the non-null assertion since we already checked for the sellPrice above\r\n      const newGold = prevState.player.gold + (item.sellPrice! * quantity);\r\n      \r\n      if (item.quantity <= quantity) {\r\n        delete newInventory[itemId];\r\n      } else {\r\n        newInventory[itemId] = {\r\n          ...item,\r\n          quantity: item.quantity - quantity\r\n        };\r\n      }\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          gold: newGold,\r\n          inventory: newInventory\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Equip an item from the inventory\r\n   */\r\n  const equipItem = (itemId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const item = gameState.player.inventory[itemId];\r\n    if (!item || item.type !== 'equipment' || !item.slot) return;\r\n    \r\n    updateGameState((prevState: GameState | null) => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newInventory = { ...prevState.player.inventory };\r\n      const newEquipment = { ...prevState.player.equipment };\r\n      \r\n      // Type guard to ensure slot is 'weapon' or 'armor'\r\n      if (item.slot === 'weapon' || item.slot === 'armor') {\r\n        // Unequip current item if any\r\n        const currentEquipped = newEquipment[item.slot];\r\n        if (currentEquipped) {\r\n          if (newInventory[currentEquipped.id]) {\r\n            newInventory[currentEquipped.id].quantity += 1;\r\n          } else {\r\n            newInventory[currentEquipped.id] = {\r\n              ...currentEquipped,\r\n              quantity: 1\r\n            };\r\n          }\r\n        }\r\n      \r\n        // Equip new item\r\n        newEquipment[item.slot] = { ...item, quantity: 1 };\r\n      }\r\n      \r\n      // Remove from inventory\r\n      if (item.quantity <= 1) {\r\n        delete newInventory[itemId];\r\n      } else {\r\n        newInventory[itemId] = {\r\n          ...item,\r\n          quantity: item.quantity - 1\r\n        };\r\n      }\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          inventory: newInventory,\r\n          equipment: newEquipment\r\n        }\r\n      };\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Unequip an item from equipment slots\r\n   */\r\n  const unequipItem = (slot: 'weapon' | 'armor') => {\r\n    if (!gameState) return;\r\n    \r\n    const equippedItem = gameState.player.equipment[slot];\r\n    if (!equippedItem) return;\r\n    \r\n    updateGameState((prevState: GameState | null) => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newInventory = { ...prevState.player.inventory };\r\n      const newEquipment = { ...prevState.player.equipment };\r\n      \r\n      // Add to inventory\r\n      if (newInventory[equippedItem.id]) {\r\n        newInventory[equippedItem.id].quantity += 1;\r\n      } else {\r\n        newInventory[equippedItem.id] = {\r\n          ...equippedItem,\r\n          quantity: 1\r\n        };\r\n      }\r\n      \r\n      // Remove from equipment\r\n      newEquipment[slot] = undefined;\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          inventory: newInventory,\r\n          equipment: newEquipment\r\n        }\r\n      };\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Add an item to the inventory\r\n   */\r\n  const addItem = (item: Item) => {\r\n    if (!gameState) return;\r\n    \r\n    updateGameState((prevState: GameState | null) => {\r\n      if (!prevState) return prevState;\r\n      \r\n      const newInventory = { ...prevState.player.inventory };\r\n      \r\n      if (newInventory[item.id]) {\r\n        newInventory[item.id] = {\r\n          ...newInventory[item.id],\r\n          quantity: newInventory[item.id].quantity + item.quantity\r\n        };\r\n      } else {\r\n        newInventory[item.id] = { ...item };\r\n      }\r\n      \r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          inventory: newInventory\r\n        }\r\n      };\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Check if the player has a certain quantity of an item\r\n   */\r\n  const checkItemQuantity = useCallback((itemId: string, quantity: number = 1) => {\r\n    if (!gameState) return false;\r\n    \r\n    const item = gameState.player.inventory[itemId];\r\n    return item && item.quantity >= quantity;\r\n  }, [gameState]);\r\n  \r\n  /**\r\n   * Get the quantity of a specific item in the inventory\r\n   */\r\n  const getItemQuantity = useCallback((itemId: string) => {\r\n    if (!gameState) return 0;\r\n    \r\n    const item = gameState.player.inventory[itemId];\r\n    return item ? item.quantity : 0;\r\n  }, [gameState]);\r\n  \r\n  return {\r\n    inventory: gameState?.player.inventory || {},\r\n    equipment: gameState?.player.equipment || {},\r\n    sellItem,\r\n    equipItem,\r\n    unequipItem,\r\n    addItem,\r\n    checkItemQuantity,\r\n    getItemQuantity\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
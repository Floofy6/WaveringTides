{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";/**\r\n * SkillProgressBar component - Visual representation of skill progression\r\n */const SkillProgressBar=_ref=>{let{skill}=_ref;// Calculate required XP for next level\nconst requiredXp=calculateXpForNextLevel(skill.level);// Calculate percentage progress\nconst progressPercentage=Math.min(Math.floor(skill.xp/requiredXp*100),100);return/*#__PURE__*/_jsxs(\"div\",{className:\"skill-progress\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:`${progressPercentage}%`}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"progress-text\",children:[skill.xp,\" / \",requiredXp,\" XP (\",progressPercentage,\"%)\"]})]});};/**\r\n * Calculate the XP required for the next level\r\n * This is a simple formula that can be adjusted as needed\r\n */const calculateXpForNextLevel=currentLevel=>{// Example formula: base 100 XP with 10% increase per level\nreturn Math.floor(100*Math.pow(1.1,currentLevel-1));};export default SkillProgressBar;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","SkillProgressBar","_ref","skill","requiredXp","calculateXpForNextLevel","level","progressPercentage","Math","min","floor","xp","className","children","style","width","currentLevel","pow"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/features/skills/SkillProgressBar.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Skill } from '../../types';\r\n\r\ninterface SkillProgressBarProps {\r\n  skill: Skill;\r\n}\r\n\r\n/**\r\n * SkillProgressBar component - Visual representation of skill progression\r\n */\r\nconst SkillProgressBar: React.FC<SkillProgressBarProps> = ({ skill }) => {\r\n  // Calculate required XP for next level\r\n  const requiredXp = calculateXpForNextLevel(skill.level);\r\n  \r\n  // Calculate percentage progress\r\n  const progressPercentage = Math.min(Math.floor((skill.xp / requiredXp) * 100), 100);\r\n  \r\n  return (\r\n    <div className=\"skill-progress\">\r\n      <div className=\"progress-bar\">\r\n        <div \r\n          className=\"progress-fill\"\r\n          style={{ width: `${progressPercentage}%` }} \r\n        />\r\n      </div>\r\n      <div className=\"progress-text\">\r\n        {skill.xp} / {requiredXp} XP ({progressPercentage}%)\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Calculate the XP required for the next level\r\n * This is a simple formula that can be adjusted as needed\r\n */\r\nconst calculateXpForNextLevel = (currentLevel: number): number => {\r\n  // Example formula: base 100 XP with 10% increase per level\r\n  return Math.floor(100 * Math.pow(1.1, currentLevel - 1));\r\n};\r\n\r\nexport default SkillProgressBar; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAO1B;AACA;AACA,GACA,KAAM,CAAAC,gBAAiD,CAAGC,IAAA,EAAe,IAAd,CAAEC,KAAM,CAAC,CAAAD,IAAA,CAClE;AACA,KAAM,CAAAE,UAAU,CAAGC,uBAAuB,CAACF,KAAK,CAACG,KAAK,CAAC,CAEvD;AACA,KAAM,CAAAC,kBAAkB,CAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAAEP,KAAK,CAACQ,EAAE,CAAGP,UAAU,CAAI,GAAG,CAAC,CAAE,GAAG,CAAC,CAEnF,mBACEJ,KAAA,QAAKY,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7Bf,IAAA,QAAKc,SAAS,CAAC,cAAc,CAAAC,QAAA,cAC3Bf,IAAA,QACEc,SAAS,CAAC,eAAe,CACzBE,KAAK,CAAE,CAAEC,KAAK,CAAE,GAAGR,kBAAkB,GAAI,CAAE,CAC5C,CAAC,CACC,CAAC,cACNP,KAAA,QAAKY,SAAS,CAAC,eAAe,CAAAC,QAAA,EAC3BV,KAAK,CAACQ,EAAE,CAAC,KAAG,CAACP,UAAU,CAAC,OAAK,CAACG,kBAAkB,CAAC,IACpD,EAAK,CAAC,EACH,CAAC,CAEV,CAAC,CAED;AACA;AACA;AACA,GACA,KAAM,CAAAF,uBAAuB,CAAIW,YAAoB,EAAa,CAChE;AACA,MAAO,CAAAR,IAAI,CAACE,KAAK,CAAC,GAAG,CAAGF,IAAI,CAACS,GAAG,CAAC,GAAG,CAAED,YAAY,CAAG,CAAC,CAAC,CAAC,CAC1D,CAAC,CAED,cAAe,CAAAf,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
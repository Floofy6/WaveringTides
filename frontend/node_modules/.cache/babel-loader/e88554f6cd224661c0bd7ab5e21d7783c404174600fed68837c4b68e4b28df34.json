{"ast":null,"code":"import{useState,useCallback}from'react';import{useGameContext}from'../context/GameContext';/**\n * Calculate the XP required for the next level based on OSRS formula\n * In OSRS, level 99 requires about 13 million XP\n */const calculateXpForNextLevel=currentLevel=>{// OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n// This is a simplified implementation that closely mimics OSRS XP curve\nconst MAX_LEVEL=99;if(currentLevel>=MAX_LEVEL){return Number.MAX_SAFE_INTEGER;// Effectively cap at level 99\n}// Get points required for next level\nreturn Math.floor(Math.pow(2,currentLevel/7)*currentLevel*300/4);};/**\n * Calculate the total XP needed to reach a specific level in OSRS\n */const totalXpForLevel=level=>{let total=0;for(let i=1;i<level;i++){total+=calculateXpForNextLevel(i);}return total;};/**\n * Get the level based on total XP earned (OSRS style)\n */const getLevelFromXp=totalXp=>{let level=1;while(level<99&&totalXp>=totalXpForLevel(level+1)){level++;}return level;};/**\n * Calculate the XP required for a specific mastery level\n * This uses a different formula than regular skill levels\n */export const calculateMasteryXpForLevel=level=>{// Example formula: steeper curve for mastery levels\nreturn Math.floor(150*Math.pow(level,1.8));};/**\n * useSkills hook - Manages skill-related state and operations\n */export const useSkills=()=>{var _gameState$player;const{gameState,updateGameState,loading}=useGameContext();const[currentSkillId,setCurrentSkillId]=useState(null);// Use empty object as fallback if player or skills is not available\nconst skills=(gameState===null||gameState===void 0?void 0:(_gameState$player=gameState.player)===null||_gameState$player===void 0?void 0:_gameState$player.skills)||{};const currentSkill=currentSkillId&&skills[currentSkillId]?skills[currentSkillId]:null;/**\n   * Select a skill to view its details\n   */const selectSkill=useCallback(skillId=>{setCurrentSkillId(skillId);},[]);/**\n   * Start a skill activity\n   */const startSkill=useCallback(skillId=>{// Safety check\nif(!gameState||!gameState.player||!gameState.player.skills||!gameState.player.skills[skillId]){console.error(`Cannot start skill ${skillId}, player data not available`);return;}const updatedSkills={...gameState.player.skills,[skillId]:{...gameState.player.skills[skillId],isActive:true,lastActiveTime:Date.now()}};updateGameState(prevState=>{// Safety check\nif(!prevState||!prevState.player){console.error(\"Cannot update skills, player data not available\");return prevState;}return{...prevState,player:{...prevState.player,skills:updatedSkills}};});},[gameState,updateGameState]);/**\n   * Stop a skill activity\n   */const stopSkill=useCallback(skillId=>{// Safety check\nif(!gameState||!gameState.player||!gameState.player.skills||!gameState.player.skills[skillId]){console.error(`Cannot stop skill ${skillId}, player data not available`);return;}const updatedSkills={...gameState.player.skills,[skillId]:{...gameState.player.skills[skillId],isActive:false}};updateGameState(prevState=>{// Safety check\nif(!prevState||!prevState.player){console.error(\"Cannot update skills, player data not available\");return prevState;}return{...prevState,player:{...prevState.player,skills:updatedSkills}};});},[gameState,updateGameState]);/**\n   * Add experience to a skill\n   */const addExperience=useCallback((skillId,amount)=>{if(loading)return;// Skip if we're loading\nconsole.log(`Adding ${amount} XP to skill ${skillId}`);updateGameState(prevState=>{try{// Safety check\nif(!prevState||!prevState.player||!prevState.player.skills){console.error(\"Cannot add experience, player data not available\");return prevState;}// Safety check for the skill\nif(!prevState.player.skills[skillId]){console.error(`Skill ${skillId} not found`);return prevState;}// Create a deep copy of the previous state\nconst newState=JSON.parse(JSON.stringify(prevState));// Get the skill\nconst skill=newState.player.skills[skillId];// Initialize totalXp if it doesn't exist\nif(typeof skill.totalXp!=='number'){// If we don't have totalXp yet, initialize it based on current level and xp\nconst levelBaseXp=totalXpForLevel(skill.level);skill.totalXp=levelBaseXp+(skill.xp||0);}// Add the experience to total XP counter\nskill.totalXp+=amount;// Calculate the new level based on total XP\nconst newLevel=getLevelFromXp(skill.totalXp);// Check if we leveled up\nif(newLevel>skill.level){const oldLevel=skill.level;skill.level=newLevel;// Calculate XP within the new level\nconst newLevelBaseXp=totalXpForLevel(newLevel);skill.xp=skill.totalXp-newLevelBaseXp;console.log(`LEVEL UP! ${skill.name} from ${oldLevel} to ${newLevel} (${skill.xp} XP into new level)`);}else{// No level up, just update XP within current level\nconst currentLevelBaseXp=totalXpForLevel(skill.level);skill.xp=skill.totalXp-currentLevelBaseXp;console.log(`Added XP to ${skill.name}: now ${skill.xp}/${calculateXpForNextLevel(skill.level)} within current level`);}return newState;}catch(error){console.error(\"Error adding experience:\",error);return prevState;}});},[loading,updateGameState]);/**\n   * Get a list of all active skills\n   */const getActiveSkills=useCallback(()=>{if(!gameState||!gameState.player||!gameState.player.skills){return[];}return Object.keys(gameState.player.skills).filter(skillId=>{var _gameState$player$ski;return(_gameState$player$ski=gameState.player.skills[skillId])===null||_gameState$player$ski===void 0?void 0:_gameState$player$ski.isActive;});},[gameState]);/**\n   * Check if a skill has reached a specific level\n   */const hasReachedLevel=useCallback((skillId,level)=>{if(!gameState||!gameState.player||!gameState.player.skills){return false;}const skill=gameState.player.skills[skillId];return skill?skill.level>=level:false;},[gameState]);/**\n   * Add experience to a skill's mastery and handle level ups\n   */const addMasteryExperience=useCallback((skillId,amount)=>{if(loading)return;// Skip if we're loading\nupdateGameState(prevState=>{try{// Safety check\nif(!prevState||!prevState.player||!prevState.player.skills){console.error(\"Cannot add mastery experience, player data not available\");return prevState;}// Create a deep copy of the previous state\nconst newState=JSON.parse(JSON.stringify(prevState));const skill=newState.player.skills[skillId];if(!skill||!skill.mastery){console.error(`Skill ${skillId} or its mastery not found`);return prevState;}const mastery=skill.mastery;let newXp=mastery.xp+amount;let newLevel=mastery.level;// Check for level up\nwhile(newXp>=calculateMasteryXpForLevel(newLevel+1)){newLevel++;console.log(`MASTERY LEVEL UP! ${skill.name} mastery is now level ${newLevel}`);}// Update the mastery in the skill\nskill.mastery={...mastery,level:newLevel,xp:newXp};return newState;}catch(error){console.error(\"Error adding mastery experience:\",error);return prevState;}});},[loading,updateGameState]);return{skills,currentSkill,selectSkill,startSkill,stopSkill,addExperience,addMasteryExperience,getActiveSkills,hasReachedLevel};};","map":{"version":3,"names":["useState","useCallback","useGameContext","calculateXpForNextLevel","currentLevel","MAX_LEVEL","Number","MAX_SAFE_INTEGER","Math","floor","pow","totalXpForLevel","level","total","i","getLevelFromXp","totalXp","calculateMasteryXpForLevel","useSkills","_gameState$player","gameState","updateGameState","loading","currentSkillId","setCurrentSkillId","skills","player","currentSkill","selectSkill","skillId","startSkill","console","error","updatedSkills","isActive","lastActiveTime","Date","now","prevState","stopSkill","addExperience","amount","log","newState","JSON","parse","stringify","skill","levelBaseXp","xp","newLevel","oldLevel","newLevelBaseXp","name","currentLevelBaseXp","getActiveSkills","Object","keys","filter","_gameState$player$ski","hasReachedLevel","addMasteryExperience","mastery","newXp"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/hooks/useSkills.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { Skill } from '../types';\n\n/**\n * Calculate the XP required for the next level based on OSRS formula\n * In OSRS, level 99 requires about 13 million XP\n */\nconst calculateXpForNextLevel = (currentLevel: number): number => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  // This is a simplified implementation that closely mimics OSRS XP curve\n  const MAX_LEVEL = 99;\n  \n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  \n  // Get points required for next level\n  return Math.floor((Math.pow(2, (currentLevel) / 7) * currentLevel * 300) / 4);\n};\n\n/**\n * Calculate the total XP needed to reach a specific level in OSRS\n */\nconst totalXpForLevel = (level: number): number => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Get the level based on total XP earned (OSRS style)\n */\nconst getLevelFromXp = (totalXp: number): number => {\n  let level = 1;\n  while (level < 99 && totalXp >= totalXpForLevel(level + 1)) {\n    level++;\n  }\n  return level;\n};\n\n/**\n * Calculate the XP required for a specific mastery level\n * This uses a different formula than regular skill levels\n */\nexport const calculateMasteryXpForLevel = (level: number): number => {\n  // Example formula: steeper curve for mastery levels\n  return Math.floor(150 * Math.pow(level, 1.8));\n};\n\n/**\n * useSkills hook - Manages skill-related state and operations\n */\nexport const useSkills = () => {\n  const { gameState, updateGameState, loading } = useGameContext();\n  const [currentSkillId, setCurrentSkillId] = useState<string | null>(null);\n  \n  // Use empty object as fallback if player or skills is not available\n  const skills = gameState?.player?.skills || {};\n  const currentSkill = currentSkillId && skills[currentSkillId] ? skills[currentSkillId] : null;\n  \n  /**\n   * Select a skill to view its details\n   */\n  const selectSkill = useCallback((skillId: string) => {\n    setCurrentSkillId(skillId);\n  }, []);\n  \n  /**\n   * Start a skill activity\n   */\n  const startSkill = useCallback((skillId: string) => {\n    // Safety check\n    if (!gameState || !gameState.player || !gameState.player.skills || !gameState.player.skills[skillId]) {\n      console.error(`Cannot start skill ${skillId}, player data not available`);\n      return;\n    }\n    \n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: true,\n        lastActiveTime: Date.now()\n      }\n    };\n    \n    updateGameState((prevState) => {\n      // Safety check\n      if (!prevState || !prevState.player) {\n        console.error(\"Cannot update skills, player data not available\");\n        return prevState;\n      }\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n  \n  /**\n   * Stop a skill activity\n   */\n  const stopSkill = useCallback((skillId: string) => {\n    // Safety check\n    if (!gameState || !gameState.player || !gameState.player.skills || !gameState.player.skills[skillId]) {\n      console.error(`Cannot stop skill ${skillId}, player data not available`);\n      return;\n    }\n    \n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: false\n      }\n    };\n    \n    updateGameState((prevState) => {\n      // Safety check\n      if (!prevState || !prevState.player) {\n        console.error(\"Cannot update skills, player data not available\");\n        return prevState;\n      }\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n  \n  /**\n   * Add experience to a skill\n   */\n  const addExperience = useCallback((skillId: string, amount: number): void => {\n    if (loading) return; // Skip if we're loading\n    \n    console.log(`Adding ${amount} XP to skill ${skillId}`);\n    \n    updateGameState((prevState) => {\n      try {\n        // Safety check\n        if (!prevState || !prevState.player || !prevState.player.skills) {\n          console.error(\"Cannot add experience, player data not available\");\n          return prevState;\n        }\n        \n        // Safety check for the skill\n        if (!prevState.player.skills[skillId]) {\n          console.error(`Skill ${skillId} not found`);\n          return prevState;\n        }\n        \n        // Create a deep copy of the previous state\n        const newState = JSON.parse(JSON.stringify(prevState));\n        \n        // Get the skill\n        const skill = newState.player.skills[skillId];\n        \n        // Initialize totalXp if it doesn't exist\n        if (typeof skill.totalXp !== 'number') {\n          // If we don't have totalXp yet, initialize it based on current level and xp\n          const levelBaseXp = totalXpForLevel(skill.level);\n          skill.totalXp = levelBaseXp + (skill.xp || 0);\n        }\n        \n        // Add the experience to total XP counter\n        skill.totalXp += amount;\n        \n        // Calculate the new level based on total XP\n        const newLevel = getLevelFromXp(skill.totalXp);\n        \n        // Check if we leveled up\n        if (newLevel > skill.level) {\n          const oldLevel = skill.level;\n          skill.level = newLevel;\n          \n          // Calculate XP within the new level\n          const newLevelBaseXp = totalXpForLevel(newLevel);\n          skill.xp = skill.totalXp - newLevelBaseXp;\n          \n          console.log(`LEVEL UP! ${skill.name} from ${oldLevel} to ${newLevel} (${skill.xp} XP into new level)`);\n        } else {\n          // No level up, just update XP within current level\n          const currentLevelBaseXp = totalXpForLevel(skill.level);\n          skill.xp = skill.totalXp - currentLevelBaseXp;\n          \n          console.log(`Added XP to ${skill.name}: now ${skill.xp}/${calculateXpForNextLevel(skill.level)} within current level`);\n        }\n        \n        return newState;\n      } catch (error) {\n        console.error(\"Error adding experience:\", error);\n        return prevState;\n      }\n    });\n  }, [loading, updateGameState]);\n  \n  /**\n   * Get a list of all active skills\n   */\n  const getActiveSkills = useCallback(() => {\n    if (!gameState || !gameState.player || !gameState.player.skills) {\n      return [];\n    }\n    \n    return Object.keys(gameState.player.skills).filter(\n      skillId => gameState.player.skills[skillId]?.isActive\n    );\n  }, [gameState]);\n  \n  /**\n   * Check if a skill has reached a specific level\n   */\n  const hasReachedLevel = useCallback((skillId: string, level: number) => {\n    if (!gameState || !gameState.player || !gameState.player.skills) {\n      return false;\n    }\n    \n    const skill = gameState.player.skills[skillId];\n    return skill ? skill.level >= level : false;\n  }, [gameState]);\n  \n  /**\n   * Add experience to a skill's mastery and handle level ups\n   */\n  const addMasteryExperience = useCallback((skillId: string, amount: number) => {\n    if (loading) return; // Skip if we're loading\n    \n    updateGameState((prevState) => {\n      try {\n        // Safety check\n        if (!prevState || !prevState.player || !prevState.player.skills) {\n          console.error(\"Cannot add mastery experience, player data not available\");\n          return prevState;\n        }\n        \n        // Create a deep copy of the previous state\n        const newState = JSON.parse(JSON.stringify(prevState));\n        \n        const skill = newState.player.skills[skillId];\n        if (!skill || !skill.mastery) {\n          console.error(`Skill ${skillId} or its mastery not found`);\n          return prevState;\n        }\n        \n        const mastery = skill.mastery;\n        let newXp = mastery.xp + amount;\n        let newLevel = mastery.level;\n        \n        // Check for level up\n        while (newXp >= calculateMasteryXpForLevel(newLevel + 1)) {\n          newLevel++;\n          console.log(`MASTERY LEVEL UP! ${skill.name} mastery is now level ${newLevel}`);\n        }\n        \n        // Update the mastery in the skill\n        skill.mastery = {\n          ...mastery,\n          level: newLevel,\n          xp: newXp\n        };\n        \n        return newState;\n      } catch (error) {\n        console.error(\"Error adding mastery experience:\", error);\n        return prevState;\n      }\n    });\n  }, [loading, updateGameState]);\n  \n  return {\n    skills,\n    currentSkill,\n    selectSkill,\n    startSkill,\n    stopSkill,\n    addExperience,\n    addMasteryExperience,\n    getActiveSkills,\n    hasReachedLevel\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
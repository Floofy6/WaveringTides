{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useGameContext } from '../context/GameContext';\nimport { useCallback } from 'react';\n\n/**\n * Hook for managing inventory-related state and operations\n */\nexport const useInventory = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState\n  } = useGameContext();\n\n  /**\n   * Sell an item from the inventory\n   */\n  const sellItem = (itemId, quantity) => {\n    if (!gameState) return;\n    const item = gameState.player.inventory[itemId];\n    if (!item || !item.sellPrice) return;\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      const newInventory = {\n        ...prevState.player.inventory\n      };\n      // Use the non-null assertion since we already checked for the sellPrice above\n      const newGold = prevState.player.gold + item.sellPrice * quantity;\n      if (item.quantity <= quantity) {\n        delete newInventory[itemId];\n      } else {\n        newInventory[itemId] = {\n          ...item,\n          quantity: item.quantity - quantity\n        };\n      }\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          gold: newGold,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n\n  /**\n   * Equip an item from the inventory\n   */\n  const equipItem = itemId => {\n    if (!gameState) return;\n    const item = gameState.player.inventory[itemId];\n    if (!item || item.type !== 'equipment' || !item.slot) return;\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      const newInventory = {\n        ...prevState.player.inventory\n      };\n      const newEquipment = {\n        ...prevState.player.equipment\n      };\n\n      // Type guard to ensure slot is 'weapon' or 'armor'\n      if (item.slot === 'weapon' || item.slot === 'armor') {\n        // Unequip current item if any\n        const currentEquipped = newEquipment[item.slot];\n        if (currentEquipped) {\n          if (newInventory[currentEquipped.id]) {\n            newInventory[currentEquipped.id].quantity += 1;\n          } else {\n            newInventory[currentEquipped.id] = {\n              ...currentEquipped,\n              quantity: 1\n            };\n          }\n        }\n\n        // Equip new item\n        newEquipment[item.slot] = {\n          ...item,\n          quantity: 1\n        };\n      }\n\n      // Remove from inventory\n      if (item.quantity <= 1) {\n        delete newInventory[itemId];\n      } else {\n        newInventory[itemId] = {\n          ...item,\n          quantity: item.quantity - 1\n        };\n      }\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          inventory: newInventory,\n          equipment: newEquipment\n        }\n      };\n    });\n  };\n\n  /**\n   * Unequip an item from equipment slots\n   */\n  const unequipItem = slot => {\n    if (!gameState) return;\n    const equippedItem = gameState.player.equipment[slot];\n    if (!equippedItem) return;\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      const newInventory = {\n        ...prevState.player.inventory\n      };\n      const newEquipment = {\n        ...prevState.player.equipment\n      };\n\n      // Add to inventory\n      if (newInventory[equippedItem.id]) {\n        newInventory[equippedItem.id].quantity += 1;\n      } else {\n        newInventory[equippedItem.id] = {\n          ...equippedItem,\n          quantity: 1\n        };\n      }\n\n      // Remove from equipment\n      newEquipment[slot] = undefined;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          inventory: newInventory,\n          equipment: newEquipment\n        }\n      };\n    });\n  };\n\n  /**\n   * Add an item to the inventory\n   */\n  const addItem = item => {\n    if (!gameState) return;\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      const newInventory = {\n        ...prevState.player.inventory\n      };\n      if (newInventory[item.id]) {\n        newInventory[item.id] = {\n          ...newInventory[item.id],\n          quantity: newInventory[item.id].quantity + item.quantity\n        };\n      } else {\n        newInventory[item.id] = {\n          ...item\n        };\n      }\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n\n  /**\n   * Check if the player has a certain quantity of an item\n   */\n  const checkItemQuantity = useCallback((itemId, quantity = 1) => {\n    if (!gameState) return false;\n    const item = gameState.player.inventory[itemId];\n    return item && item.quantity >= quantity;\n  }, [gameState]);\n\n  /**\n   * Get the quantity of a specific item in the inventory\n   */\n  const getItemQuantity = useCallback(itemId => {\n    if (!gameState) return 0;\n    const item = gameState.player.inventory[itemId];\n    return item ? item.quantity : 0;\n  }, [gameState]);\n  return {\n    inventory: (gameState === null || gameState === void 0 ? void 0 : gameState.player.inventory) || {},\n    equipment: (gameState === null || gameState === void 0 ? void 0 : gameState.player.equipment) || {},\n    sellItem,\n    equipItem,\n    unequipItem,\n    addItem,\n    checkItemQuantity,\n    getItemQuantity\n  };\n};\n_s(useInventory, \"PJMwBBrfSuxT83g+O0dKq0jZ4iA=\", false, function () {\n  return [useGameContext];\n});","map":{"version":3,"names":["useGameContext","useCallback","useInventory","_s","gameState","updateGameState","sellItem","itemId","quantity","item","player","inventory","sellPrice","prevState","newInventory","newGold","gold","equipItem","type","slot","newEquipment","equipment","currentEquipped","id","unequipItem","equippedItem","undefined","addItem","checkItemQuantity","getItemQuantity"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/hooks/useInventory.ts"],"sourcesContent":["import { useGameContext } from '../context/GameContext';\nimport { GameState, Item } from '../types';\nimport { useCallback } from 'react';\n\n/**\n * Hook for managing inventory-related state and operations\n */\nexport const useInventory = () => {\n  const { gameState, updateGameState } = useGameContext();\n  \n  /**\n   * Sell an item from the inventory\n   */\n  const sellItem = (itemId: string, quantity: number) => {\n    if (!gameState) return;\n    \n    const item = gameState.player.inventory[itemId];\n    if (!item || !item.sellPrice) return;\n    \n    updateGameState((prevState: GameState | null) => {\n      if (!prevState) return prevState;\n      \n      const newInventory = { ...prevState.player.inventory };\n      // Use the non-null assertion since we already checked for the sellPrice above\n      const newGold = prevState.player.gold + (item.sellPrice! * quantity);\n      \n      if (item.quantity <= quantity) {\n        delete newInventory[itemId];\n      } else {\n        newInventory[itemId] = {\n          ...item,\n          quantity: item.quantity - quantity\n        };\n      }\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          gold: newGold,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n\n  /**\n   * Equip an item from the inventory\n   */\n  const equipItem = (itemId: string) => {\n    if (!gameState) return;\n    \n    const item = gameState.player.inventory[itemId];\n    if (!item || item.type !== 'equipment' || !item.slot) return;\n    \n    updateGameState((prevState: GameState | null) => {\n      if (!prevState) return prevState;\n      \n      const newInventory = { ...prevState.player.inventory };\n      const newEquipment = { ...prevState.player.equipment };\n      \n      // Type guard to ensure slot is 'weapon' or 'armor'\n      if (item.slot === 'weapon' || item.slot === 'armor') {\n        // Unequip current item if any\n        const currentEquipped = newEquipment[item.slot];\n        if (currentEquipped) {\n          if (newInventory[currentEquipped.id]) {\n            newInventory[currentEquipped.id].quantity += 1;\n          } else {\n            newInventory[currentEquipped.id] = {\n              ...currentEquipped,\n              quantity: 1\n            };\n          }\n        }\n      \n        // Equip new item\n        newEquipment[item.slot] = { ...item, quantity: 1 };\n      }\n      \n      // Remove from inventory\n      if (item.quantity <= 1) {\n        delete newInventory[itemId];\n      } else {\n        newInventory[itemId] = {\n          ...item,\n          quantity: item.quantity - 1\n        };\n      }\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          inventory: newInventory,\n          equipment: newEquipment\n        }\n      };\n    });\n  };\n  \n  /**\n   * Unequip an item from equipment slots\n   */\n  const unequipItem = (slot: 'weapon' | 'armor') => {\n    if (!gameState) return;\n    \n    const equippedItem = gameState.player.equipment[slot];\n    if (!equippedItem) return;\n    \n    updateGameState((prevState: GameState | null) => {\n      if (!prevState) return prevState;\n      \n      const newInventory = { ...prevState.player.inventory };\n      const newEquipment = { ...prevState.player.equipment };\n      \n      // Add to inventory\n      if (newInventory[equippedItem.id]) {\n        newInventory[equippedItem.id].quantity += 1;\n      } else {\n        newInventory[equippedItem.id] = {\n          ...equippedItem,\n          quantity: 1\n        };\n      }\n      \n      // Remove from equipment\n      newEquipment[slot] = undefined;\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          inventory: newInventory,\n          equipment: newEquipment\n        }\n      };\n    });\n  };\n  \n  /**\n   * Add an item to the inventory\n   */\n  const addItem = (item: Item) => {\n    if (!gameState) return;\n    \n    updateGameState((prevState: GameState | null) => {\n      if (!prevState) return prevState;\n      \n      const newInventory = { ...prevState.player.inventory };\n      \n      if (newInventory[item.id]) {\n        newInventory[item.id] = {\n          ...newInventory[item.id],\n          quantity: newInventory[item.id].quantity + item.quantity\n        };\n      } else {\n        newInventory[item.id] = { ...item };\n      }\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          inventory: newInventory\n        }\n      };\n    });\n  };\n  \n  /**\n   * Check if the player has a certain quantity of an item\n   */\n  const checkItemQuantity = useCallback((itemId: string, quantity: number = 1) => {\n    if (!gameState) return false;\n    \n    const item = gameState.player.inventory[itemId];\n    return item && item.quantity >= quantity;\n  }, [gameState]);\n  \n  /**\n   * Get the quantity of a specific item in the inventory\n   */\n  const getItemQuantity = useCallback((itemId: string) => {\n    if (!gameState) return 0;\n    \n    const item = gameState.player.inventory[itemId];\n    return item ? item.quantity : 0;\n  }, [gameState]);\n  \n  return {\n    inventory: gameState?.player.inventory || {},\n    equipment: gameState?.player.equipment || {},\n    sellItem,\n    equipItem,\n    unequipItem,\n    addItem,\n    checkItemQuantity,\n    getItemQuantity\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback}from'react';import{SKILL_IDS,ITEM_IDS}from'../constants';import{createMockItems}from'../utils/mockData';import{jsx as _jsx}from\"react/jsx-runtime\";const GameContext=/*#__PURE__*/createContext(undefined);/**\r\n * Custom hook to access the GameContext\r\n */export const useGameContext=()=>{const context=useContext(GameContext);if(context===undefined){throw new Error('useGameContext must be used within a GameProvider');}return context;};/**\r\n * GameProvider component - Provides game state and operations to the entire app\r\n */export const GameProvider=_ref=>{let{children}=_ref;const[gameState,setGameState]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);/**\r\n   * Load game data from local storage or API\r\n   */const loadGameData=useCallback(async()=>{try{setLoading(true);// Try to load from localStorage first\nconst savedGame=localStorage.getItem('gameState');if(savedGame){setGameState(JSON.parse(savedGame));setLoading(false);return;}// If no local storage data, create a new game\ncreateNewGame();}catch(err){console.error('Error loading game:',err);setError('Failed to load game data. Please try again.');}finally{setLoading(false);}},[]);/**\r\n   * Create a new game with default values\r\n   */const createNewGame=()=>{// Create mock skills\nconst mockSkills={[SKILL_IDS.WOODCUTTING]:{id:SKILL_IDS.WOODCUTTING,name:'Woodcutting',level:1,xp:0,xpPerAction:5,isActive:false,mastery:{level:1,xp:0,unlocks:{'5':'Faster woodcutting speed','10':'Double logs chance (10%)'}}},[SKILL_IDS.FISHING]:{id:SKILL_IDS.FISHING,name:'Fishing',level:1,xp:0,xpPerAction:7,isActive:false,mastery:{level:1,xp:0,unlocks:{'5':'Better fish quality','10':'Double fish chance (10%)'}}},[SKILL_IDS.MINING]:{id:SKILL_IDS.MINING,name:'Mining',level:1,xp:0,xpPerAction:6,isActive:false,mastery:{level:1,xp:0,unlocks:{}}}};// Convert ITEMS to proper Item type\nconst itemsWithProperType=createMockItems();// Create mock inventory\nconst mockInventory={[ITEM_IDS.LOGS]:{...itemsWithProperType[ITEM_IDS.LOGS],quantity:5},[ITEM_IDS.RAW_FISH]:{...itemsWithProperType[ITEM_IDS.RAW_FISH],quantity:3}};const mockData={player:{id:'player1',gold:100,lastUpdate:Date.now(),skills:mockSkills,inventory:mockInventory,equipment:{},combat:{isFighting:false}}};setGameState(mockData);};/**\r\n   * Initialize the game on component mount\r\n   */useEffect(()=>{loadGameData();// Set up autosave\nconst saveInterval=setInterval(()=>{if(gameState){saveGame();}},60000);// Save every minute\nreturn()=>clearInterval(saveInterval);},[loadGameData,gameState]);/**\r\n   * Update the game state\r\n   */const updateGameState=useCallback(updater=>{setGameState(prev=>{const newState=updater(prev);return newState;});},[]);/**\r\n   * Save the game to localStorage\r\n   */const saveGame=useCallback(()=>{if(!gameState)return;try{// Update last saved timestamp\nconst stateWithTimestamp={...gameState,lastSaved:Date.now()};localStorage.setItem('gameState',JSON.stringify(stateWithTimestamp));}catch(err){console.error('Error saving game:',err);setError('Failed to save game data');}},[gameState]);/**\r\n   * Reset the game to default values\r\n   */const resetGame=useCallback(()=>{localStorage.removeItem('gameState');createNewGame();},[]);return/*#__PURE__*/_jsx(GameContext.Provider,{value:{gameState,loading,error,updateGameState,saveGame,resetGame},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","SKILL_IDS","ITEM_IDS","createMockItems","jsx","_jsx","GameContext","undefined","useGameContext","context","Error","GameProvider","_ref","children","gameState","setGameState","loading","setLoading","error","setError","loadGameData","savedGame","localStorage","getItem","JSON","parse","createNewGame","err","console","mockSkills","WOODCUTTING","id","name","level","xp","xpPerAction","isActive","mastery","unlocks","FISHING","MINING","itemsWithProperType","mockInventory","LOGS","quantity","RAW_FISH","mockData","player","gold","lastUpdate","Date","now","skills","inventory","equipment","combat","isFighting","saveInterval","setInterval","saveGame","clearInterval","updateGameState","updater","prev","newState","stateWithTimestamp","lastSaved","setItem","stringify","resetGame","removeItem","Provider","value"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\r\nimport { GameState, Item, Skill } from '../types';\r\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\r\nimport { createMockItems } from '../utils/mockData';\r\n\r\ninterface GameContextProps {\r\n  gameState: GameState | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  updateGameState: (updater: (prevState: GameState | null) => GameState | null) => void;\r\n  saveGame: () => void;\r\n  resetGame: () => void;\r\n}\r\n\r\nconst GameContext = createContext<GameContextProps | undefined>(undefined);\r\n\r\n/**\r\n * Custom hook to access the GameContext\r\n */\r\nexport const useGameContext = () => {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGameContext must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * GameProvider component - Provides game state and operations to the entire app\r\n */\r\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\r\n  const [gameState, setGameState] = useState<GameState | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  /**\r\n   * Load game data from local storage or API\r\n   */\r\n  const loadGameData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Try to load from localStorage first\r\n      const savedGame = localStorage.getItem('gameState');\r\n      if (savedGame) {\r\n        setGameState(JSON.parse(savedGame));\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // If no local storage data, create a new game\r\n      createNewGame();\r\n    } catch (err) {\r\n      console.error('Error loading game:', err);\r\n      setError('Failed to load game data. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Create a new game with default values\r\n   */\r\n  const createNewGame = () => {\r\n    // Create mock skills\r\n    const mockSkills: { [id: string]: Skill } = {\r\n      [SKILL_IDS.WOODCUTTING]: {\r\n        id: SKILL_IDS.WOODCUTTING,\r\n        name: 'Woodcutting',\r\n        level: 1,\r\n        xp: 0,\r\n        xpPerAction: 5,\r\n        isActive: false,\r\n        mastery: {\r\n          level: 1,\r\n          xp: 0,\r\n          unlocks: {\r\n            '5': 'Faster woodcutting speed',\r\n            '10': 'Double logs chance (10%)'\r\n          }\r\n        }\r\n      },\r\n      [SKILL_IDS.FISHING]: {\r\n        id: SKILL_IDS.FISHING,\r\n        name: 'Fishing',\r\n        level: 1,\r\n        xp: 0,\r\n        xpPerAction: 7,\r\n        isActive: false,\r\n        mastery: {\r\n          level: 1,\r\n          xp: 0,\r\n          unlocks: {\r\n            '5': 'Better fish quality',\r\n            '10': 'Double fish chance (10%)'\r\n          }\r\n        }\r\n      },\r\n      [SKILL_IDS.MINING]: {\r\n        id: SKILL_IDS.MINING,\r\n        name: 'Mining',\r\n        level: 1,\r\n        xp: 0,\r\n        xpPerAction: 6,\r\n        isActive: false,\r\n        mastery: {\r\n          level: 1,\r\n          xp: 0,\r\n          unlocks: {}\r\n        }\r\n      }\r\n    };\r\n\r\n    // Convert ITEMS to proper Item type\r\n    const itemsWithProperType = createMockItems();\r\n\r\n    // Create mock inventory\r\n    const mockInventory: { [id: string]: Item } = {\r\n      [ITEM_IDS.LOGS]: { ...itemsWithProperType[ITEM_IDS.LOGS], quantity: 5 },\r\n      [ITEM_IDS.RAW_FISH]: { ...itemsWithProperType[ITEM_IDS.RAW_FISH], quantity: 3 }\r\n    };\r\n\r\n    const mockData: GameState = {\r\n      player: {\r\n        id: 'player1',\r\n        gold: 100,\r\n        lastUpdate: Date.now(),\r\n        skills: mockSkills,\r\n        inventory: mockInventory,\r\n        equipment: {},\r\n        combat: {\r\n          isFighting: false\r\n        }\r\n      }\r\n    };\r\n    \r\n    setGameState(mockData);\r\n  };\r\n\r\n  /**\r\n   * Initialize the game on component mount\r\n   */\r\n  useEffect(() => {\r\n    loadGameData();\r\n    \r\n    // Set up autosave\r\n    const saveInterval = setInterval(() => {\r\n      if (gameState) {\r\n        saveGame();\r\n      }\r\n    }, 60000); // Save every minute\r\n    \r\n    return () => clearInterval(saveInterval);\r\n  }, [loadGameData, gameState]);\r\n\r\n  /**\r\n   * Update the game state\r\n   */\r\n  const updateGameState = useCallback((updater: (prevState: GameState | null) => GameState | null) => {\r\n    setGameState(prev => {\r\n      const newState = updater(prev);\r\n      return newState;\r\n    });\r\n  }, []);\r\n\r\n  /**\r\n   * Save the game to localStorage\r\n   */\r\n  const saveGame = useCallback(() => {\r\n    if (!gameState) return;\r\n    \r\n    try {\r\n      // Update last saved timestamp\r\n      const stateWithTimestamp = {\r\n        ...gameState,\r\n        lastSaved: Date.now()\r\n      };\r\n      \r\n      localStorage.setItem('gameState', JSON.stringify(stateWithTimestamp));\r\n    } catch (err) {\r\n      console.error('Error saving game:', err);\r\n      setError('Failed to save game data');\r\n    }\r\n  }, [gameState]);\r\n\r\n  /**\r\n   * Reset the game to default values\r\n   */\r\n  const resetGame = useCallback(() => {\r\n    localStorage.removeItem('gameState');\r\n    createNewGame();\r\n  }, []);\r\n\r\n  return (\r\n    <GameContext.Provider \r\n      value={{ \r\n        gameState, \r\n        loading, \r\n        error,\r\n        updateGameState,\r\n        saveGame,\r\n        resetGame\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
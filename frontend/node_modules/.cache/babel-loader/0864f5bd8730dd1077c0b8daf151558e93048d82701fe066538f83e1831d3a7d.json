{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\Desktop\\\\coding\\\\WaveringTides-master\\\\frontend\\\\src\\\\features\\\\skills\\\\SkillProgressBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Import these functions from a shared location\nconst calculateXpForNextLevel = currentLevel => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  const MAX_LEVEL = 99;\n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  return Math.floor(Math.pow(2, currentLevel / 7) * currentLevel * 300 / 4);\n};\nconst totalXpForLevel = level => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Format a number with commas for better readability\n */\nconst formatNumber = num => {\n  return num.toLocaleString();\n};\n\n/**\n * SkillProgressBar component - Visual representation of skill progression\n */\nconst SkillProgressBar = ({\n  skill,\n  showActionProgress = true\n}) => {\n  _s();\n  // Debug logging\n  useEffect(() => {\n    console.log(`SkillProgressBar rendering for ${skill.name}:`, {\n      level: skill.level,\n      totalXp: skill.totalXp,\n      xp: skill.xp\n    });\n  }, [skill]);\n\n  // Validate inputs to prevent errors\n  if (!skill) {\n    console.error('SkillProgressBar: No skill data provided');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      children: \"Error: Skill data missing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check level bounds\n  const level = Math.max(1, Math.min(99, skill.level));\n\n  // If we're at max level, show 100%\n  if (level >= 99) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill bg-primary\",\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-right text-xs text-gray-600 mt-1\",\n        children: \"Max Level (13,034,431 XP)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Get XP thresholds for current level and next level\n  const currentLevelTotalXp = totalXpForLevel(level);\n  const nextLevelTotalXp = totalXpForLevel(level + 1);\n\n  // Calculate XP needed for next level from current level\n  const xpForNextLevel = nextLevelTotalXp - currentLevelTotalXp;\n\n  // Current XP progress within this level\n  let currentLevelXp = 0;\n\n  // Make sure we have a valid totalXp value\n  if (typeof skill.totalXp === 'number') {\n    // Calculate how much XP we've earned within this level\n    currentLevelXp = skill.totalXp - currentLevelTotalXp;\n  } else if (typeof skill.xp === 'number') {\n    // Directly use the level's xp if totalXp is not available\n    currentLevelXp = skill.xp;\n  }\n\n  // Ensure currentLevelXp is not negative\n  currentLevelXp = Math.max(0, currentLevelXp);\n\n  // Ensure currentLevelXp doesn't exceed what's needed for next level\n  const displayXp = Math.min(xpForNextLevel, currentLevelXp);\n\n  // Calculate percentage progress toward next level\n  const progressPercentage = Math.min(Math.floor(displayXp / xpForNextLevel * 100), 100);\n\n  // Calculate action progress percentage if skill is active\n  const actionProgress = skill.isActive && skill.actionProgress ? Math.min(Math.floor(skill.actionProgress * 100), 100) : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-fill bg-primary\",\n        style: {\n          width: `${progressPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right text-xs text-gray-600 mt-1\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tooltip\",\n        \"data-tip\": `${formatNumber(Math.floor(displayXp))} / ${formatNumber(xpForNextLevel)} XP`,\n        children: [formatNumber(Math.floor(displayXp)), \" / \", formatNumber(xpForNextLevel), \" XP (\", progressPercentage, \"%)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), skill.totalXp && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right text-xs text-gray-500 mt-0.5\",\n      children: [\"Total XP: \", formatNumber(Math.floor(skill.totalXp))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), showActionProgress && skill.isActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-action-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-progress-text\",\n        children: \"Action progress:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-progress-fill\",\n          style: {\n            width: `${actionProgress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(SkillProgressBar, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SkillProgressBar;\nexport default SkillProgressBar;\nvar _c;\n$RefreshReg$(_c, \"SkillProgressBar\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","calculateXpForNextLevel","currentLevel","MAX_LEVEL","Number","MAX_SAFE_INTEGER","Math","floor","pow","totalXpForLevel","level","total","i","formatNumber","num","toLocaleString","SkillProgressBar","skill","showActionProgress","_s","console","log","name","totalXp","xp","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","max","min","style","width","currentLevelTotalXp","nextLevelTotalXp","xpForNextLevel","currentLevelXp","displayXp","progressPercentage","actionProgress","isActive","_c","$RefreshReg$"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/features/skills/SkillProgressBar.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Skill } from '../../types';\n\ninterface SkillProgressBarProps {\n  skill: Skill;\n  showActionProgress?: boolean;\n}\n\n// Import these functions from a shared location\nconst calculateXpForNextLevel = (currentLevel: number): number => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  const MAX_LEVEL = 99;\n  \n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  \n  return Math.floor((Math.pow(2, (currentLevel) / 7) * currentLevel * 300) / 4);\n};\n\nconst totalXpForLevel = (level: number): number => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Format a number with commas for better readability\n */\nconst formatNumber = (num: number): string => {\n  return num.toLocaleString();\n};\n\n/**\n * SkillProgressBar component - Visual representation of skill progression\n */\nconst SkillProgressBar: React.FC<SkillProgressBarProps> = ({ \n  skill,\n  showActionProgress = true\n}) => {\n  // Debug logging\n  useEffect(() => {\n    console.log(`SkillProgressBar rendering for ${skill.name}:`, {\n      level: skill.level,\n      totalXp: skill.totalXp,\n      xp: skill.xp\n    });\n  }, [skill]);\n  \n  // Validate inputs to prevent errors\n  if (!skill) {\n    console.error('SkillProgressBar: No skill data provided');\n    return <div className=\"text-danger\">Error: Skill data missing</div>;\n  }\n  \n  // Check level bounds\n  const level = Math.max(1, Math.min(99, skill.level));\n  \n  // If we're at max level, show 100%\n  if (level >= 99) {\n    return (\n      <div>\n        <div className=\"progress-bar\">\n          <div className=\"progress-fill bg-primary\" style={{ width: '100%' }} />\n        </div>\n        <div className=\"text-right text-xs text-gray-600 mt-1\">\n          Max Level (13,034,431 XP)\n        </div>\n      </div>\n    );\n  }\n  \n  // Get XP thresholds for current level and next level\n  const currentLevelTotalXp = totalXpForLevel(level);\n  const nextLevelTotalXp = totalXpForLevel(level + 1);\n  \n  // Calculate XP needed for next level from current level\n  const xpForNextLevel = nextLevelTotalXp - currentLevelTotalXp;\n  \n  // Current XP progress within this level\n  let currentLevelXp = 0;\n  \n  // Make sure we have a valid totalXp value\n  if (typeof skill.totalXp === 'number') {\n    // Calculate how much XP we've earned within this level\n    currentLevelXp = skill.totalXp - currentLevelTotalXp;\n  } else if (typeof skill.xp === 'number') {\n    // Directly use the level's xp if totalXp is not available\n    currentLevelXp = skill.xp;\n  }\n  \n  // Ensure currentLevelXp is not negative\n  currentLevelXp = Math.max(0, currentLevelXp);\n  \n  // Ensure currentLevelXp doesn't exceed what's needed for next level\n  const displayXp = Math.min(xpForNextLevel, currentLevelXp);\n  \n  // Calculate percentage progress toward next level\n  const progressPercentage = Math.min(Math.floor((displayXp / xpForNextLevel) * 100), 100);\n  \n  // Calculate action progress percentage if skill is active\n  const actionProgress = (skill.isActive && skill.actionProgress) \n    ? Math.min(Math.floor((skill.actionProgress) * 100), 100)\n    : 0;\n  \n  return (\n    <div>\n      <div className=\"progress-bar\">\n        <div \n          className=\"progress-fill bg-primary\"\n          style={{ width: `${progressPercentage}%` }} \n        />\n      </div>\n      <div className=\"text-right text-xs text-gray-600 mt-1\">\n        <span className=\"tooltip\" data-tip={`${formatNumber(Math.floor(displayXp))} / ${formatNumber(xpForNextLevel)} XP`}>\n          {formatNumber(Math.floor(displayXp))} / {formatNumber(xpForNextLevel)} XP ({progressPercentage}%)\n        </span>\n      </div>\n      {skill.totalXp && (\n        <div className=\"text-right text-xs text-gray-500 mt-0.5\">\n          Total XP: {formatNumber(Math.floor(skill.totalXp))}\n        </div>\n      )}\n      \n      {/* Add action progress bar for active skills */}\n      {showActionProgress && skill.isActive && (\n        <div className=\"skill-action-progress\">\n          <div className=\"action-progress-text\">Action progress:</div>\n          <div className=\"action-progress-bar\">\n            <div \n              className=\"action-progress-fill\"\n              style={{ width: `${actionProgress}%` }} \n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SkillProgressBar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
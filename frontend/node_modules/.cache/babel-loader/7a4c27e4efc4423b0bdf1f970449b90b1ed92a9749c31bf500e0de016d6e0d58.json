{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { useGameContext } from '../context/GameContext';\n\n/**\r\n * Calculate the XP required for the next level\r\n * This is a simple formula that can be adjusted as needed\r\n */\nconst calculateXpForNextLevel = currentLevel => {\n  // Example formula: base 100 XP with 10% increase per level\n  return Math.floor(100 * Math.pow(1.1, currentLevel - 1));\n};\n\n/**\r\n * Calculate the XP required for a specific mastery level\r\n * This uses a different formula than regular skill levels\r\n */\nexport const calculateMasteryXpForLevel = level => {\n  // Example formula: steeper curve for mastery levels\n  return Math.floor(150 * Math.pow(level, 1.8));\n};\n\n/**\r\n * useSkills hook - Manages skill-related state and operations\r\n */\nexport const useSkills = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState\n  } = useGameContext();\n  const [currentSkillId, setCurrentSkillId] = useState(null);\n  const skills = (gameState === null || gameState === void 0 ? void 0 : gameState.player.skills) || {};\n  const currentSkill = currentSkillId ? skills[currentSkillId] : null;\n\n  /**\r\n   * Select a skill to view its details\r\n   */\n  const selectSkill = useCallback(skillId => {\n    setCurrentSkillId(skillId);\n  }, []);\n\n  /**\r\n   * Start a skill activity\r\n   */\n  const startSkill = useCallback(skillId => {\n    if (!gameState) return;\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: true,\n        lastActiveTime: Date.now()\n      }\n    };\n    updateGameState(prevState => {\n      if (!prevState) return null;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\r\n   * Stop a skill activity\r\n   */\n  const stopSkill = useCallback(skillId => {\n    if (!gameState) return;\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: false\n      }\n    };\n    updateGameState(prevState => {\n      if (!prevState) return null;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\r\n   * Add experience to a skill\r\n   */\n  const addExperience = useCallback((skillId, amount) => {\n    if (!gameState) return;\n    console.log(`Adding ${amount} XP to skill ${skillId}`);\n    updateGameState(prevState => {\n      if (!prevState) return null;\n\n      // Create a deep copy of the previous state\n      const newState = JSON.parse(JSON.stringify(prevState));\n\n      // Get the skill\n      const skill = newState.player.skills[skillId];\n      if (!skill) {\n        console.error(`Skill ${skillId} not found`);\n        return prevState;\n      }\n\n      // Add the experience\n      skill.xp += amount;\n      console.log(`New XP total for ${skill.name}: ${skill.xp}`);\n\n      // Check if we leveled up\n      const requiredXP = calculateXpForNextLevel(skill.level);\n      if (skill.xp >= requiredXP) {\n        skill.level += 1;\n        console.log(`LEVEL UP! ${skill.name} is now level ${skill.level}`);\n\n        // You could add more level-up logic here, like unlocking new abilities\n      }\n      return newState;\n    });\n  }, [gameState, updateGameState]);\n\n  /**\r\n   * Get a list of all active skills\r\n   */\n  const getActiveSkills = useCallback(() => {\n    if (!gameState) return [];\n    return Object.keys(gameState.player.skills).filter(skillId => gameState.player.skills[skillId].isActive);\n  }, [gameState]);\n\n  /**\r\n   * Check if a skill has reached a specific level\r\n   */\n  const hasReachedLevel = useCallback((skillId, level) => {\n    if (!gameState) return false;\n    const skill = gameState.player.skills[skillId];\n    return skill ? skill.level >= level : false;\n  }, [gameState]);\n\n  /**\r\n   * Add experience to a skill's mastery and handle level ups\r\n   */\n  const addMasteryExperience = useCallback((skillId, amount) => {\n    if (!gameState) return;\n    updateGameState(prevState => {\n      if (!prevState) return null;\n\n      // Create a deep copy of the previous state\n      const newState = JSON.parse(JSON.stringify(prevState));\n      const skill = newState.player.skills[skillId];\n      if (!skill || !skill.mastery) return prevState;\n      const mastery = skill.mastery;\n      let newXp = mastery.xp + amount;\n      let newLevel = mastery.level;\n\n      // Check for level up\n      while (newXp >= calculateMasteryXpForLevel(newLevel + 1)) {\n        newLevel++;\n        console.log(`MASTERY LEVEL UP! ${skill.name} mastery is now level ${newLevel}`);\n      }\n\n      // Update the mastery in the skill\n      skill.mastery = {\n        ...mastery,\n        level: newLevel,\n        xp: newXp\n      };\n      return newState;\n    });\n  }, [gameState, updateGameState]);\n  return {\n    skills,\n    currentSkill,\n    selectSkill,\n    startSkill,\n    stopSkill,\n    addExperience,\n    addMasteryExperience,\n    getActiveSkills,\n    hasReachedLevel\n  };\n};\n_s(useSkills, \"+hBLNFR0jkqlYWzQH6+oGjuMUVE=\", false, function () {\n  return [useGameContext];\n});","map":{"version":3,"names":["useState","useCallback","useGameContext","calculateXpForNextLevel","currentLevel","Math","floor","pow","calculateMasteryXpForLevel","level","useSkills","_s","gameState","updateGameState","currentSkillId","setCurrentSkillId","skills","player","currentSkill","selectSkill","skillId","startSkill","updatedSkills","isActive","lastActiveTime","Date","now","prevState","stopSkill","addExperience","amount","console","log","newState","JSON","parse","stringify","skill","error","xp","name","requiredXP","getActiveSkills","Object","keys","filter","hasReachedLevel","addMasteryExperience","mastery","newXp","newLevel"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/hooks/useSkills.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { useGameContext } from '../context/GameContext';\r\n\r\n/**\r\n * Calculate the XP required for the next level\r\n * This is a simple formula that can be adjusted as needed\r\n */\r\nconst calculateXpForNextLevel = (currentLevel: number): number => {\r\n  // Example formula: base 100 XP with 10% increase per level\r\n  return Math.floor(100 * Math.pow(1.1, currentLevel - 1));\r\n};\r\n\r\n/**\r\n * Calculate the XP required for a specific mastery level\r\n * This uses a different formula than regular skill levels\r\n */\r\nexport const calculateMasteryXpForLevel = (level: number): number => {\r\n  // Example formula: steeper curve for mastery levels\r\n  return Math.floor(150 * Math.pow(level, 1.8));\r\n};\r\n\r\n/**\r\n * useSkills hook - Manages skill-related state and operations\r\n */\r\nexport const useSkills = () => {\r\n  const { gameState, updateGameState } = useGameContext();\r\n  const [currentSkillId, setCurrentSkillId] = useState<string | null>(null);\r\n  \r\n  const skills = gameState?.player.skills || {};\r\n  const currentSkill = currentSkillId ? skills[currentSkillId] : null;\r\n  \r\n  /**\r\n   * Select a skill to view its details\r\n   */\r\n  const selectSkill = useCallback((skillId: string) => {\r\n    setCurrentSkillId(skillId);\r\n  }, []);\r\n  \r\n  /**\r\n   * Start a skill activity\r\n   */\r\n  const startSkill = useCallback((skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...gameState.player.skills[skillId],\r\n        isActive: true,\r\n        lastActiveTime: Date.now()\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Stop a skill activity\r\n   */\r\n  const stopSkill = useCallback((skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...gameState.player.skills[skillId],\r\n        isActive: false\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Add experience to a skill\r\n   */\r\n  const addExperience = useCallback((skillId: string, amount: number): void => {\r\n    if (!gameState) return;\r\n    \r\n    console.log(`Adding ${amount} XP to skill ${skillId}`);\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      \r\n      // Create a deep copy of the previous state\r\n      const newState = JSON.parse(JSON.stringify(prevState));\r\n      \r\n      // Get the skill\r\n      const skill = newState.player.skills[skillId];\r\n      if (!skill) {\r\n        console.error(`Skill ${skillId} not found`);\r\n        return prevState;\r\n      }\r\n      \r\n      // Add the experience\r\n      skill.xp += amount;\r\n      \r\n      console.log(`New XP total for ${skill.name}: ${skill.xp}`);\r\n      \r\n      // Check if we leveled up\r\n      const requiredXP = calculateXpForNextLevel(skill.level);\r\n      if (skill.xp >= requiredXP) {\r\n        skill.level += 1;\r\n        console.log(`LEVEL UP! ${skill.name} is now level ${skill.level}`);\r\n        \r\n        // You could add more level-up logic here, like unlocking new abilities\r\n      }\r\n      \r\n      return newState;\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Get a list of all active skills\r\n   */\r\n  const getActiveSkills = useCallback(() => {\r\n    if (!gameState) return [];\r\n    \r\n    return Object.keys(gameState.player.skills).filter(\r\n      skillId => gameState.player.skills[skillId].isActive\r\n    );\r\n  }, [gameState]);\r\n  \r\n  /**\r\n   * Check if a skill has reached a specific level\r\n   */\r\n  const hasReachedLevel = useCallback((skillId: string, level: number) => {\r\n    if (!gameState) return false;\r\n    \r\n    const skill = gameState.player.skills[skillId];\r\n    return skill ? skill.level >= level : false;\r\n  }, [gameState]);\r\n  \r\n  /**\r\n   * Add experience to a skill's mastery and handle level ups\r\n   */\r\n  const addMasteryExperience = useCallback((skillId: string, amount: number) => {\r\n    if (!gameState) return;\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      \r\n      // Create a deep copy of the previous state\r\n      const newState = JSON.parse(JSON.stringify(prevState));\r\n      \r\n      const skill = newState.player.skills[skillId];\r\n      if (!skill || !skill.mastery) return prevState;\r\n      \r\n      const mastery = skill.mastery;\r\n      let newXp = mastery.xp + amount;\r\n      let newLevel = mastery.level;\r\n      \r\n      // Check for level up\r\n      while (newXp >= calculateMasteryXpForLevel(newLevel + 1)) {\r\n        newLevel++;\r\n        console.log(`MASTERY LEVEL UP! ${skill.name} mastery is now level ${newLevel}`);\r\n      }\r\n      \r\n      // Update the mastery in the skill\r\n      skill.mastery = {\r\n        ...mastery,\r\n        level: newLevel,\r\n        xp: newXp\r\n      };\r\n      \r\n      return newState;\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  return {\r\n    skills,\r\n    currentSkill,\r\n    selectSkill,\r\n    startSkill,\r\n    stopSkill,\r\n    addExperience,\r\n    addMasteryExperience,\r\n    getActiveSkills,\r\n    hasReachedLevel\r\n  };\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,cAAc,QAAQ,wBAAwB;;AAEvD;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAIC,YAAoB,IAAa;EAChE;EACA,OAAOC,IAAI,CAACC,KAAK,CAAC,GAAG,GAAGD,IAAI,CAACE,GAAG,CAAC,GAAG,EAAEH,YAAY,GAAG,CAAC,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,0BAA0B,GAAIC,KAAa,IAAa;EACnE;EACA,OAAOJ,IAAI,CAACC,KAAK,CAAC,GAAG,GAAGD,IAAI,CAACE,GAAG,CAACE,KAAK,EAAE,GAAG,CAAC,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGX,cAAc,CAAC,CAAC;EACvD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EAEzE,MAAMgB,MAAM,GAAG,CAAAJ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,MAAM,CAACD,MAAM,KAAI,CAAC,CAAC;EAC7C,MAAME,YAAY,GAAGJ,cAAc,GAAGE,MAAM,CAACF,cAAc,CAAC,GAAG,IAAI;;EAEnE;AACF;AACA;EACE,MAAMK,WAAW,GAAGlB,WAAW,CAAEmB,OAAe,IAAK;IACnDL,iBAAiB,CAACK,OAAO,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAMC,UAAU,GAAGpB,WAAW,CAAEmB,OAAe,IAAK;IAClD,IAAI,CAACR,SAAS,EAAE;IAEhB,MAAMU,aAAa,GAAG;MACpB,GAAGV,SAAS,CAACK,MAAM,CAACD,MAAM;MAC1B,CAACI,OAAO,GAAG;QACT,GAAGR,SAAS,CAACK,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC;QACnCG,QAAQ,EAAE,IAAI;QACdC,cAAc,EAAEC,IAAI,CAACC,GAAG,CAAC;MAC3B;IACF,CAAC;IAEDb,eAAe,CAAEc,SAAS,IAAK;MAC7B,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;MAC3B,OAAO;QACL,GAAGA,SAAS;QACZV,MAAM,EAAE;UACN,GAAGU,SAAS,CAACV,MAAM;UACnBD,MAAM,EAAEM;QACV;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,SAAS,EAAEC,eAAe,CAAC,CAAC;;EAEhC;AACF;AACA;EACE,MAAMe,SAAS,GAAG3B,WAAW,CAAEmB,OAAe,IAAK;IACjD,IAAI,CAACR,SAAS,EAAE;IAEhB,MAAMU,aAAa,GAAG;MACpB,GAAGV,SAAS,CAACK,MAAM,CAACD,MAAM;MAC1B,CAACI,OAAO,GAAG;QACT,GAAGR,SAAS,CAACK,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC;QACnCG,QAAQ,EAAE;MACZ;IACF,CAAC;IAEDV,eAAe,CAAEc,SAAS,IAAK;MAC7B,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;MAC3B,OAAO;QACL,GAAGA,SAAS;QACZV,MAAM,EAAE;UACN,GAAGU,SAAS,CAACV,MAAM;UACnBD,MAAM,EAAEM;QACV;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,SAAS,EAAEC,eAAe,CAAC,CAAC;;EAEhC;AACF;AACA;EACE,MAAMgB,aAAa,GAAG5B,WAAW,CAAC,CAACmB,OAAe,EAAEU,MAAc,KAAW;IAC3E,IAAI,CAAClB,SAAS,EAAE;IAEhBmB,OAAO,CAACC,GAAG,CAAC,UAAUF,MAAM,gBAAgBV,OAAO,EAAE,CAAC;IAEtDP,eAAe,CAAEc,SAAS,IAAK;MAC7B,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;;MAE3B;MACA,MAAMM,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACT,SAAS,CAAC,CAAC;;MAEtD;MACA,MAAMU,KAAK,GAAGJ,QAAQ,CAAChB,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC;MAC7C,IAAI,CAACiB,KAAK,EAAE;QACVN,OAAO,CAACO,KAAK,CAAC,SAASlB,OAAO,YAAY,CAAC;QAC3C,OAAOO,SAAS;MAClB;;MAEA;MACAU,KAAK,CAACE,EAAE,IAAIT,MAAM;MAElBC,OAAO,CAACC,GAAG,CAAC,oBAAoBK,KAAK,CAACG,IAAI,KAAKH,KAAK,CAACE,EAAE,EAAE,CAAC;;MAE1D;MACA,MAAME,UAAU,GAAGtC,uBAAuB,CAACkC,KAAK,CAAC5B,KAAK,CAAC;MACvD,IAAI4B,KAAK,CAACE,EAAE,IAAIE,UAAU,EAAE;QAC1BJ,KAAK,CAAC5B,KAAK,IAAI,CAAC;QAChBsB,OAAO,CAACC,GAAG,CAAC,aAAaK,KAAK,CAACG,IAAI,iBAAiBH,KAAK,CAAC5B,KAAK,EAAE,CAAC;;QAElE;MACF;MAEA,OAAOwB,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACrB,SAAS,EAAEC,eAAe,CAAC,CAAC;;EAEhC;AACF;AACA;EACE,MAAM6B,eAAe,GAAGzC,WAAW,CAAC,MAAM;IACxC,IAAI,CAACW,SAAS,EAAE,OAAO,EAAE;IAEzB,OAAO+B,MAAM,CAACC,IAAI,CAAChC,SAAS,CAACK,MAAM,CAACD,MAAM,CAAC,CAAC6B,MAAM,CAChDzB,OAAO,IAAIR,SAAS,CAACK,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC,CAACG,QAC9C,CAAC;EACH,CAAC,EAAE,CAACX,SAAS,CAAC,CAAC;;EAEf;AACF;AACA;EACE,MAAMkC,eAAe,GAAG7C,WAAW,CAAC,CAACmB,OAAe,EAAEX,KAAa,KAAK;IACtE,IAAI,CAACG,SAAS,EAAE,OAAO,KAAK;IAE5B,MAAMyB,KAAK,GAAGzB,SAAS,CAACK,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC;IAC9C,OAAOiB,KAAK,GAAGA,KAAK,CAAC5B,KAAK,IAAIA,KAAK,GAAG,KAAK;EAC7C,CAAC,EAAE,CAACG,SAAS,CAAC,CAAC;;EAEf;AACF;AACA;EACE,MAAMmC,oBAAoB,GAAG9C,WAAW,CAAC,CAACmB,OAAe,EAAEU,MAAc,KAAK;IAC5E,IAAI,CAAClB,SAAS,EAAE;IAEhBC,eAAe,CAAEc,SAAS,IAAK;MAC7B,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;;MAE3B;MACA,MAAMM,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACT,SAAS,CAAC,CAAC;MAEtD,MAAMU,KAAK,GAAGJ,QAAQ,CAAChB,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC;MAC7C,IAAI,CAACiB,KAAK,IAAI,CAACA,KAAK,CAACW,OAAO,EAAE,OAAOrB,SAAS;MAE9C,MAAMqB,OAAO,GAAGX,KAAK,CAACW,OAAO;MAC7B,IAAIC,KAAK,GAAGD,OAAO,CAACT,EAAE,GAAGT,MAAM;MAC/B,IAAIoB,QAAQ,GAAGF,OAAO,CAACvC,KAAK;;MAE5B;MACA,OAAOwC,KAAK,IAAIzC,0BAA0B,CAAC0C,QAAQ,GAAG,CAAC,CAAC,EAAE;QACxDA,QAAQ,EAAE;QACVnB,OAAO,CAACC,GAAG,CAAC,qBAAqBK,KAAK,CAACG,IAAI,yBAAyBU,QAAQ,EAAE,CAAC;MACjF;;MAEA;MACAb,KAAK,CAACW,OAAO,GAAG;QACd,GAAGA,OAAO;QACVvC,KAAK,EAAEyC,QAAQ;QACfX,EAAE,EAAEU;MACN,CAAC;MAED,OAAOhB,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACrB,SAAS,EAAEC,eAAe,CAAC,CAAC;EAEhC,OAAO;IACLG,MAAM;IACNE,YAAY;IACZC,WAAW;IACXE,UAAU;IACVO,SAAS;IACTC,aAAa;IACbkB,oBAAoB;IACpBL,eAAe;IACfI;EACF,CAAC;AACH,CAAC;AAACnC,EAAA,CA9KWD,SAAS;EAAA,QACmBR,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
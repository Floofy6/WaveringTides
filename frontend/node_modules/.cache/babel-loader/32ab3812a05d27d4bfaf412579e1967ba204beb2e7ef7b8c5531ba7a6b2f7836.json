{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\OneDrive\\\\Desktop\\\\coding\\\\WaveringTides\\\\frontend\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\nimport { createMockItems } from '../utils/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n/**\r\n * Custom hook to access the GameContext\r\n */\nexport const useGameContext = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGameContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/**\r\n * GameProvider component - Provides game state and operations to the entire app\r\n */\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [gameState, setGameState] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  /**\r\n   * Load game data from local storage or API\r\n   */\n  const loadGameData = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Try to load from localStorage first\n      const savedGame = localStorage.getItem('gameState');\n      if (savedGame) {\n        setGameState(JSON.parse(savedGame));\n        setLoading(false);\n        return;\n      }\n\n      // If no local storage data, create a new game\n      createNewGame();\n    } catch (err) {\n      console.error('Error loading game:', err);\n      setError('Failed to load game data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\r\n   * Create a new game with default values\r\n   */\n  const createNewGame = () => {\n    // Create mock skills\n    const mockSkills = {\n      [SKILL_IDS.WOODCUTTING]: {\n        id: SKILL_IDS.WOODCUTTING,\n        name: 'Woodcutting',\n        level: 1,\n        xp: 0,\n        xpPerAction: 5,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Faster woodcutting speed',\n            '10': 'Double logs chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.FISHING]: {\n        id: SKILL_IDS.FISHING,\n        name: 'Fishing',\n        level: 1,\n        xp: 0,\n        xpPerAction: 7,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Better fish quality',\n            '10': 'Double fish chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.MINING]: {\n        id: SKILL_IDS.MINING,\n        name: 'Mining',\n        level: 1,\n        xp: 0,\n        xpPerAction: 6,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {}\n        }\n      }\n    };\n\n    // Convert ITEMS to proper Item type\n    const itemsWithProperType = createMockItems();\n\n    // Create mock inventory\n    const mockInventory = {\n      [ITEM_IDS.LOGS]: {\n        ...itemsWithProperType[ITEM_IDS.LOGS],\n        quantity: 5\n      },\n      [ITEM_IDS.RAW_FISH]: {\n        ...itemsWithProperType[ITEM_IDS.RAW_FISH],\n        quantity: 3\n      }\n    };\n    const mockData = {\n      player: {\n        id: 'player1',\n        gold: 100,\n        lastUpdate: Date.now(),\n        skills: mockSkills,\n        inventory: mockInventory,\n        equipment: {},\n        combat: {\n          isFighting: false\n        }\n      }\n    };\n    setGameState(mockData);\n  };\n\n  /**\r\n   * Initialize the game on component mount\r\n   */\n  useEffect(() => {\n    loadGameData();\n\n    // Set up autosave\n    const saveInterval = setInterval(() => {\n      if (gameState) {\n        saveGame();\n      }\n    }, 60000); // Save every minute\n\n    return () => clearInterval(saveInterval);\n  }, [loadGameData, gameState]);\n\n  /**\r\n   * Update the game state\r\n   */\n  const updateGameState = useCallback(updater => {\n    setGameState(prev => {\n      const newState = updater(prev);\n      return newState;\n    });\n  }, []);\n\n  /**\r\n   * Save the game to localStorage\r\n   */\n  const saveGame = useCallback(() => {\n    if (!gameState) return;\n    try {\n      // Update last saved timestamp\n      const stateWithTimestamp = {\n        ...gameState,\n        lastSaved: Date.now()\n      };\n      localStorage.setItem('gameState', JSON.stringify(stateWithTimestamp));\n    } catch (err) {\n      console.error('Error saving game:', err);\n      setError('Failed to save game data');\n    }\n  }, [gameState]);\n\n  /**\r\n   * Reset the game to default values\r\n   */\n  const resetGame = useCallback(() => {\n    localStorage.removeItem('gameState');\n    createNewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      gameState,\n      loading,\n      error,\n      updateGameState,\n      saveGame,\n      resetGame\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"aahX+h3+Kpej8g8yyJFdl4f3Bak=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","SKILL_IDS","ITEM_IDS","createMockItems","jsxDEV","_jsxDEV","GameContext","undefined","useGameContext","_s","context","Error","GameProvider","children","_s2","gameState","setGameState","loading","setLoading","error","setError","loadGameData","savedGame","localStorage","getItem","JSON","parse","createNewGame","err","console","mockSkills","WOODCUTTING","id","name","level","xp","xpPerAction","isActive","mastery","unlocks","FISHING","MINING","itemsWithProperType","mockInventory","LOGS","quantity","RAW_FISH","mockData","player","gold","lastUpdate","Date","now","skills","inventory","equipment","combat","isFighting","saveInterval","setInterval","saveGame","clearInterval","updateGameState","updater","prev","newState","stateWithTimestamp","lastSaved","setItem","stringify","resetGame","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\r\nimport { GameState, Item, Skill } from '../types';\r\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\r\nimport { createMockItems } from '../utils/mockData';\r\n\r\ninterface GameContextProps {\r\n  gameState: GameState | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  updateGameState: (updater: (prevState: GameState | null) => GameState | null) => void;\r\n  saveGame: () => void;\r\n  resetGame: () => void;\r\n}\r\n\r\nconst GameContext = createContext<GameContextProps | undefined>(undefined);\r\n\r\n/**\r\n * Custom hook to access the GameContext\r\n */\r\nexport const useGameContext = () => {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGameContext must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * GameProvider component - Provides game state and operations to the entire app\r\n */\r\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\r\n  const [gameState, setGameState] = useState<GameState | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  /**\r\n   * Load game data from local storage or API\r\n   */\r\n  const loadGameData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Try to load from localStorage first\r\n      const savedGame = localStorage.getItem('gameState');\r\n      if (savedGame) {\r\n        setGameState(JSON.parse(savedGame));\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // If no local storage data, create a new game\r\n      createNewGame();\r\n    } catch (err) {\r\n      console.error('Error loading game:', err);\r\n      setError('Failed to load game data. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Create a new game with default values\r\n   */\r\n  const createNewGame = () => {\r\n    // Create mock skills\r\n    const mockSkills: { [id: string]: Skill } = {\r\n      [SKILL_IDS.WOODCUTTING]: {\r\n        id: SKILL_IDS.WOODCUTTING,\r\n        name: 'Woodcutting',\r\n        level: 1,\r\n        xp: 0,\r\n        xpPerAction: 5,\r\n        isActive: false,\r\n        mastery: {\r\n          level: 1,\r\n          xp: 0,\r\n          unlocks: {\r\n            '5': 'Faster woodcutting speed',\r\n            '10': 'Double logs chance (10%)'\r\n          }\r\n        }\r\n      },\r\n      [SKILL_IDS.FISHING]: {\r\n        id: SKILL_IDS.FISHING,\r\n        name: 'Fishing',\r\n        level: 1,\r\n        xp: 0,\r\n        xpPerAction: 7,\r\n        isActive: false,\r\n        mastery: {\r\n          level: 1,\r\n          xp: 0,\r\n          unlocks: {\r\n            '5': 'Better fish quality',\r\n            '10': 'Double fish chance (10%)'\r\n          }\r\n        }\r\n      },\r\n      [SKILL_IDS.MINING]: {\r\n        id: SKILL_IDS.MINING,\r\n        name: 'Mining',\r\n        level: 1,\r\n        xp: 0,\r\n        xpPerAction: 6,\r\n        isActive: false,\r\n        mastery: {\r\n          level: 1,\r\n          xp: 0,\r\n          unlocks: {}\r\n        }\r\n      }\r\n    };\r\n\r\n    // Convert ITEMS to proper Item type\r\n    const itemsWithProperType = createMockItems();\r\n\r\n    // Create mock inventory\r\n    const mockInventory: { [id: string]: Item } = {\r\n      [ITEM_IDS.LOGS]: { ...itemsWithProperType[ITEM_IDS.LOGS], quantity: 5 },\r\n      [ITEM_IDS.RAW_FISH]: { ...itemsWithProperType[ITEM_IDS.RAW_FISH], quantity: 3 }\r\n    };\r\n\r\n    const mockData: GameState = {\r\n      player: {\r\n        id: 'player1',\r\n        gold: 100,\r\n        lastUpdate: Date.now(),\r\n        skills: mockSkills,\r\n        inventory: mockInventory,\r\n        equipment: {},\r\n        combat: {\r\n          isFighting: false\r\n        }\r\n      }\r\n    };\r\n    \r\n    setGameState(mockData);\r\n  };\r\n\r\n  /**\r\n   * Initialize the game on component mount\r\n   */\r\n  useEffect(() => {\r\n    loadGameData();\r\n    \r\n    // Set up autosave\r\n    const saveInterval = setInterval(() => {\r\n      if (gameState) {\r\n        saveGame();\r\n      }\r\n    }, 60000); // Save every minute\r\n    \r\n    return () => clearInterval(saveInterval);\r\n  }, [loadGameData, gameState]);\r\n\r\n  /**\r\n   * Update the game state\r\n   */\r\n  const updateGameState = useCallback((updater: (prevState: GameState | null) => GameState | null) => {\r\n    setGameState(prev => {\r\n      const newState = updater(prev);\r\n      return newState;\r\n    });\r\n  }, []);\r\n\r\n  /**\r\n   * Save the game to localStorage\r\n   */\r\n  const saveGame = useCallback(() => {\r\n    if (!gameState) return;\r\n    \r\n    try {\r\n      // Update last saved timestamp\r\n      const stateWithTimestamp = {\r\n        ...gameState,\r\n        lastSaved: Date.now()\r\n      };\r\n      \r\n      localStorage.setItem('gameState', JSON.stringify(stateWithTimestamp));\r\n    } catch (err) {\r\n      console.error('Error saving game:', err);\r\n      setError('Failed to save game data');\r\n    }\r\n  }, [gameState]);\r\n\r\n  /**\r\n   * Reset the game to default values\r\n   */\r\n  const resetGame = useCallback(() => {\r\n    localStorage.removeItem('gameState');\r\n    createNewGame();\r\n  }, []);\r\n\r\n  return (\r\n    <GameContext.Provider \r\n      value={{ \r\n        gameState, \r\n        loading, \r\n        error,\r\n        updateGameState,\r\n        saveGame,\r\n        resetGame\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
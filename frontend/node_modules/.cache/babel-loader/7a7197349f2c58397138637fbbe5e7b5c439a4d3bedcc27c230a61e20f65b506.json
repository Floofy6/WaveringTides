{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\OneDrive\\\\Desktop\\\\coding\\\\WaveringTides\\\\frontend\\\\src\\\\features\\\\skills\\\\SkillProgress.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * SkillProgress component - Displays skill progress with XP bar\r\n * Extracted as a separate component for better reusability\r\n */\nconst SkillProgress = ({\n  skill,\n  showLabel = true\n}) => {\n  const progressPercentage = calculateProgressPercentage(skill);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"skill-progress\",\n    children: [showLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-progress-labels\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"XP: \", skill.xp.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [progressPercentage, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-fill\",\n        style: {\n          width: `${progressPercentage}%`\n        },\n        title: `${progressPercentage}% to next level`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), showLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-next-level\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Next level: \", calculateXpForNextLevel(skill).toLocaleString(), \" XP\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Calculate the percentage progress towards the next level\r\n */\n_c = SkillProgress;\nconst calculateProgressPercentage = skill => {\n  const currentLevelXp = calculateXpForLevel(skill.level);\n  const nextLevelXp = calculateXpForLevel(skill.level + 1);\n  const xpInCurrentLevel = skill.xp - currentLevelXp;\n  const xpRequiredForNextLevel = nextLevelXp - currentLevelXp;\n  return Math.min(100, Math.floor(xpInCurrentLevel / xpRequiredForNextLevel * 100));\n};\n\n/**\r\n * Calculate total XP required for a given level\r\n */\nconst calculateXpForLevel = level => {\n  return Math.floor(100 * Math.pow(level, 1.5));\n};\n\n/**\r\n * Calculate how much XP is needed to reach the next level\r\n */\nconst calculateXpForNextLevel = skill => {\n  const currentLevelXp = calculateXpForLevel(skill.level);\n  const nextLevelXp = calculateXpForLevel(skill.level + 1);\n  return nextLevelXp - skill.xp;\n};\nexport { SkillProgress, calculateProgressPercentage, calculateXpForLevel, calculateXpForNextLevel };\nvar _c;\n$RefreshReg$(_c, \"SkillProgress\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SkillProgress","skill","showLabel","progressPercentage","calculateProgressPercentage","className","children","xp","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","style","width","title","calculateXpForNextLevel","_c","currentLevelXp","calculateXpForLevel","level","nextLevelXp","xpInCurrentLevel","xpRequiredForNextLevel","Math","min","floor","pow","$RefreshReg$"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/features/skills/SkillProgress.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Skill } from '../../types';\r\n\r\ninterface SkillProgressProps {\r\n  skill: Skill;\r\n  showLabel?: boolean;\r\n}\r\n\r\n/**\r\n * SkillProgress component - Displays skill progress with XP bar\r\n * Extracted as a separate component for better reusability\r\n */\r\nconst SkillProgress: React.FC<SkillProgressProps> = ({ \r\n  skill, \r\n  showLabel = true \r\n}) => {\r\n  const progressPercentage = calculateProgressPercentage(skill);\r\n  \r\n  return (\r\n    <div className=\"skill-progress\">\r\n      {showLabel && (\r\n        <div className=\"skill-progress-labels\">\r\n          <span>XP: {skill.xp.toLocaleString()}</span>\r\n          <span>{progressPercentage}%</span>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"progress-bar\">\r\n        <div \r\n          className=\"progress-fill\" \r\n          style={{ width: `${progressPercentage}%` }}\r\n          title={`${progressPercentage}% to next level`}\r\n        />\r\n      </div>\r\n      \r\n      {showLabel && (\r\n        <div className=\"skill-next-level\">\r\n          <span>Next level: {calculateXpForNextLevel(skill).toLocaleString()} XP</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Calculate the percentage progress towards the next level\r\n */\r\nconst calculateProgressPercentage = (skill: Skill): number => {\r\n  const currentLevelXp = calculateXpForLevel(skill.level);\r\n  const nextLevelXp = calculateXpForLevel(skill.level + 1);\r\n  const xpInCurrentLevel = skill.xp - currentLevelXp;\r\n  const xpRequiredForNextLevel = nextLevelXp - currentLevelXp;\r\n  \r\n  return Math.min(100, Math.floor((xpInCurrentLevel / xpRequiredForNextLevel) * 100));\r\n};\r\n\r\n/**\r\n * Calculate total XP required for a given level\r\n */\r\nconst calculateXpForLevel = (level: number): number => {\r\n  return Math.floor(100 * Math.pow(level, 1.5));\r\n};\r\n\r\n/**\r\n * Calculate how much XP is needed to reach the next level\r\n */\r\nconst calculateXpForNextLevel = (skill: Skill): number => {\r\n  const currentLevelXp = calculateXpForLevel(skill.level);\r\n  const nextLevelXp = calculateXpForLevel(skill.level + 1);\r\n  return nextLevelXp - skill.xp;\r\n};\r\n\r\nexport { \r\n  SkillProgress,\r\n  calculateProgressPercentage,\r\n  calculateXpForLevel,\r\n  calculateXpForNextLevel\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
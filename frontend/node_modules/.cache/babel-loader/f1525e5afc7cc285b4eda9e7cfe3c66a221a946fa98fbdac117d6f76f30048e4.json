{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\OneDrive\\\\Desktop\\\\coding\\\\WaveringTides\\\\frontend\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { SKILL_IDS, ITEMS, ITEM_IDS } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(undefined);\nexport const useGameContext = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGameContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [gameState, setGameState] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // In a real app, you would fetch from your API\n    const fetchGameData = async () => {\n      try {\n        // Mock API call with simulated delay\n        setTimeout(() => {\n          // Create mock skills\n          const mockSkills = {\n            [SKILL_IDS.WOODCUTTING]: {\n              id: SKILL_IDS.WOODCUTTING,\n              name: 'Woodcutting',\n              level: 1,\n              xp: 0,\n              xpPerAction: 5,\n              isActive: false,\n              mastery: {\n                level: 1,\n                xp: 0,\n                unlocks: {\n                  '5': 'Faster woodcutting speed',\n                  '10': 'Double logs chance (10%)'\n                }\n              }\n            },\n            [SKILL_IDS.FISHING]: {\n              id: SKILL_IDS.FISHING,\n              name: 'Fishing',\n              level: 1,\n              xp: 0,\n              xpPerAction: 7,\n              isActive: false,\n              mastery: {\n                level: 1,\n                xp: 0,\n                unlocks: {\n                  '5': 'Better fish quality',\n                  '10': 'Double fish chance (10%)'\n                }\n              }\n            },\n            [SKILL_IDS.MINING]: {\n              id: SKILL_IDS.MINING,\n              name: 'Mining',\n              level: 1,\n              xp: 0,\n              xpPerAction: 6,\n              isActive: false,\n              mastery: {\n                level: 1,\n                xp: 0,\n                unlocks: {}\n              }\n            }\n          };\n\n          // Convert ITEMS to proper Item type\n          const itemsWithProperType = {};\n\n          // Process each item from the constants\n          Object.entries(ITEMS).forEach(([key, itemData]) => {\n            // Create base item without optional properties\n            const baseItemData = {\n              id: itemData.id,\n              name: itemData.name,\n              quantity: itemData.quantity || 1,\n              type: itemData.type === 'resource' ? 'resource' : 'equipment'\n            };\n\n            // Add optional properties only if they exist\n            if (itemData.sellPrice !== undefined) {\n              baseItemData.sellPrice = itemData.sellPrice;\n            }\n            if (itemData.buyPrice !== undefined) {\n              baseItemData.buyPrice = itemData.buyPrice;\n            }\n\n            // Handle slot carefully\n            if (itemData.slot === 'weapon' || itemData.slot === 'armor') {\n              baseItemData.slot = itemData.slot;\n            }\n\n            // Add stats if they exist\n            if (itemData.stats) {\n              baseItemData.stats = {\n                ...itemData.stats\n              };\n            }\n\n            // Add crafting recipe if it exists - using type assertion to avoid TypeScript error\n            if (itemData.craftingRecipe) {\n              baseItemData.craftingRecipe = itemData.craftingRecipe;\n            }\n\n            // Cast to Item type\n            itemsWithProperType[key] = baseItemData;\n          });\n\n          // Create mock inventory\n          const mockInventory = {\n            [ITEM_IDS.LOGS]: {\n              ...itemsWithProperType[ITEM_IDS.LOGS],\n              quantity: 5\n            },\n            [ITEM_IDS.RAW_FISH]: {\n              ...itemsWithProperType[ITEM_IDS.RAW_FISH],\n              quantity: 3\n            }\n          };\n          const mockData = {\n            player: {\n              id: 'player1',\n              gold: 100,\n              lastUpdate: Date.now(),\n              skills: mockSkills,\n              inventory: mockInventory,\n              equipment: {},\n              combat: {\n                isFighting: false\n              }\n            }\n          };\n          setGameState(mockData);\n          setLoading(false);\n        }, 500);\n      } catch (error) {\n        console.error('Error fetching game data:', error);\n        setLoading(false);\n      }\n    };\n    fetchGameData();\n  }, []);\n  const updateGameState = updater => {\n    setGameState(updater);\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      gameState,\n      loading,\n      updateGameState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"O8MkwvsOdFeuL9W1nhtG7c5Ims0=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","SKILL_IDS","ITEMS","ITEM_IDS","jsxDEV","_jsxDEV","GameContext","undefined","useGameContext","_s","context","Error","GameProvider","children","_s2","gameState","setGameState","loading","setLoading","fetchGameData","setTimeout","mockSkills","WOODCUTTING","id","name","level","xp","xpPerAction","isActive","mastery","unlocks","FISHING","MINING","itemsWithProperType","Object","entries","forEach","key","itemData","baseItemData","quantity","type","sellPrice","buyPrice","slot","stats","craftingRecipe","mockInventory","LOGS","RAW_FISH","mockData","player","gold","lastUpdate","Date","now","skills","inventory","equipment","combat","isFighting","error","console","updateGameState","updater","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { GameState, Item, Skill, Mastery, CraftingRecipe } from '../types';\r\nimport { ENEMIES, SKILL_IDS, ITEMS, ITEM_IDS } from '../constants';\r\n\r\ninterface GameContextProps {\r\n  gameState: GameState | null;\r\n  loading: boolean;\r\n  updateGameState: (updater: (prevState: GameState | null) => GameState | null) => void;\r\n}\r\n\r\nconst GameContext = createContext<GameContextProps | undefined>(undefined);\r\n\r\nexport const useGameContext = () => {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGameContext must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\r\n  const [gameState, setGameState] = useState<GameState | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // In a real app, you would fetch from your API\r\n    const fetchGameData = async () => {\r\n      try {\r\n        // Mock API call with simulated delay\r\n        setTimeout(() => {\r\n          // Create mock skills\r\n          const mockSkills: { [id: string]: Skill } = {\r\n            [SKILL_IDS.WOODCUTTING]: {\r\n              id: SKILL_IDS.WOODCUTTING,\r\n              name: 'Woodcutting',\r\n              level: 1,\r\n              xp: 0,\r\n              xpPerAction: 5,\r\n              isActive: false,\r\n              mastery: {\r\n                level: 1,\r\n                xp: 0,\r\n                unlocks: {\r\n                  '5': 'Faster woodcutting speed',\r\n                  '10': 'Double logs chance (10%)'\r\n                }\r\n              }\r\n            },\r\n            [SKILL_IDS.FISHING]: {\r\n              id: SKILL_IDS.FISHING,\r\n              name: 'Fishing',\r\n              level: 1,\r\n              xp: 0,\r\n              xpPerAction: 7,\r\n              isActive: false,\r\n              mastery: {\r\n                level: 1,\r\n                xp: 0,\r\n                unlocks: {\r\n                  '5': 'Better fish quality',\r\n                  '10': 'Double fish chance (10%)'\r\n                }\r\n              }\r\n            },\r\n            [SKILL_IDS.MINING]: {\r\n              id: SKILL_IDS.MINING,\r\n              name: 'Mining',\r\n              level: 1,\r\n              xp: 0,\r\n              xpPerAction: 6,\r\n              isActive: false,\r\n              mastery: {\r\n                level: 1,\r\n                xp: 0,\r\n                unlocks: {}\r\n              }\r\n            }\r\n          };\r\n\r\n          // Convert ITEMS to proper Item type\r\n          const itemsWithProperType: { [id: string]: Item } = {};\r\n          \r\n          // Process each item from the constants\r\n          Object.entries(ITEMS).forEach(([key, itemData]) => {\r\n            // Create base item without optional properties\r\n            const baseItemData: any = {\r\n              id: itemData.id,\r\n              name: itemData.name,\r\n              quantity: itemData.quantity || 1,\r\n              type: itemData.type === 'resource' ? 'resource' : 'equipment',\r\n            };\r\n            \r\n            // Add optional properties only if they exist\r\n            if (itemData.sellPrice !== undefined) {\r\n              baseItemData.sellPrice = itemData.sellPrice;\r\n            }\r\n            \r\n            if (itemData.buyPrice !== undefined) {\r\n              baseItemData.buyPrice = itemData.buyPrice;\r\n            }\r\n            \r\n            // Handle slot carefully\r\n            if (itemData.slot === 'weapon' || itemData.slot === 'armor') {\r\n              baseItemData.slot = itemData.slot;\r\n            }\r\n            \r\n            // Add stats if they exist\r\n            if (itemData.stats) {\r\n              baseItemData.stats = {\r\n                ...itemData.stats\r\n              };\r\n            }\r\n            \r\n            // Add crafting recipe if it exists - using type assertion to avoid TypeScript error\r\n            if ((itemData as any).craftingRecipe) {\r\n              baseItemData.craftingRecipe = (itemData as any).craftingRecipe;\r\n            }\r\n            \r\n            // Cast to Item type\r\n            itemsWithProperType[key] = baseItemData as Item;\r\n          });\r\n\r\n          // Create mock inventory\r\n          const mockInventory: { [id: string]: Item } = {\r\n            [ITEM_IDS.LOGS]: { ...itemsWithProperType[ITEM_IDS.LOGS], quantity: 5 },\r\n            [ITEM_IDS.RAW_FISH]: { ...itemsWithProperType[ITEM_IDS.RAW_FISH], quantity: 3 }\r\n          };\r\n\r\n          const mockData: GameState = {\r\n            player: {\r\n              id: 'player1',\r\n              gold: 100,\r\n              lastUpdate: Date.now(),\r\n              skills: mockSkills,\r\n              inventory: mockInventory,\r\n              equipment: {},\r\n              combat: {\r\n                isFighting: false\r\n              }\r\n            }\r\n          };\r\n          \r\n          setGameState(mockData);\r\n          setLoading(false);\r\n        }, 500);\r\n      } catch (error) {\r\n        console.error('Error fetching game data:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchGameData();\r\n  }, []);\r\n\r\n  const updateGameState = (updater: (prevState: GameState | null) => GameState | null) => {\r\n    setGameState(updater);\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState, loading, updateGameState }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
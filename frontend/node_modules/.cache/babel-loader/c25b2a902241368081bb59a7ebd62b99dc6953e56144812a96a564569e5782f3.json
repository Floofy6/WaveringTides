{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { useInventory } from './useInventory';\n/**\r\n * useCombat hook - Manages combat-related state and operations\r\n */\nexport const useCombat = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState\n  } = useGameContext();\n  const {\n    addItem\n  } = useInventory();\n\n  // Mock enemies for now - in a real app, these would come from the game state\n  const [enemies] = useState([{\n    id: 'enemy_goblin',\n    name: 'Goblin',\n    attack: 5,\n    defense: 3,\n    health: 20,\n    maxHealth: 20,\n    lootTable: [{\n      itemId: 'item_gold_coin',\n      quantity: 5,\n      chance: 1.0\n    }, {\n      itemId: 'item_goblin_ear',\n      quantity: 1,\n      chance: 0.5\n    }]\n  }, {\n    id: 'enemy_wolf',\n    name: 'Wolf',\n    attack: 7,\n    defense: 2,\n    health: 15,\n    maxHealth: 15,\n    lootTable: [{\n      itemId: 'item_wolf_pelt',\n      quantity: 1,\n      chance: 0.8\n    }, {\n      itemId: 'item_wolf_fang',\n      quantity: 1,\n      chance: 0.3\n    }]\n  }, {\n    id: 'enemy_bandit',\n    name: 'Bandit',\n    attack: 8,\n    defense: 5,\n    health: 25,\n    maxHealth: 25,\n    lootTable: [{\n      itemId: 'item_gold_coin',\n      quantity: 10,\n      chance: 1.0\n    }, {\n      itemId: 'item_dagger',\n      quantity: 1,\n      chance: 0.2\n    }]\n  }]);\n\n  // Local state for combat\n  const [currentEnemy, setCurrentEnemy] = useState(null);\n  const [isFighting, setIsFighting] = useState(false);\n  const [playerHealth, setPlayerHealth] = useState(100);\n  const [playerMaxHealth, setPlayerMaxHealth] = useState(100);\n  const [combatLog, setCombatLog] = useState([]);\n\n  // Reset player health when not in combat\n  useEffect(() => {\n    if (!isFighting) {\n      setPlayerHealth(playerMaxHealth);\n    }\n  }, [isFighting, playerMaxHealth]);\n\n  /**\r\n   * Add a message to the combat log\r\n   */\n  const addLogMessage = useCallback(message => {\n    setCombatLog(prevLog => [...prevLog, message]);\n  }, []);\n\n  /**\r\n   * Start combat with an enemy\r\n   */\n  const startCombat = useCallback(enemyId => {\n    const enemy = enemies.find(e => e.id === enemyId);\n    if (!enemy) return;\n\n    // Clone the enemy to avoid modifying the original\n    const enemyClone = {\n      ...enemy,\n      health: enemy.maxHealth // Reset health\n    };\n    setCurrentEnemy(enemyClone);\n    setIsFighting(true);\n    setCombatLog([`Combat started with ${enemyClone.name}!`]);\n  }, [enemies]);\n\n  /**\r\n   * Attack the current enemy\r\n   */\n  const attackEnemy = useCallback(() => {\n    if (!currentEnemy || !isFighting) return;\n\n    // Calculate player damage (simplified formula)\n    const playerAttack = 10; // This would come from player stats + equipment\n    const damageToEnemy = Math.max(1, playerAttack - currentEnemy.defense);\n\n    // Update enemy health\n    const updatedEnemy = {\n      ...currentEnemy,\n      health: Math.max(0, currentEnemy.health - damageToEnemy)\n    };\n    addLogMessage(`You hit ${currentEnemy.name} for ${damageToEnemy} damage!`);\n    setCurrentEnemy(updatedEnemy);\n\n    // Check if enemy is defeated\n    if (updatedEnemy.health <= 0) {\n      handleEnemyDefeated(updatedEnemy);\n      return;\n    }\n\n    // Enemy counterattack\n    const enemyDamage = Math.max(1, currentEnemy.attack - 5); // 5 is player defense\n    setPlayerHealth(prev => Math.max(0, prev - enemyDamage));\n    addLogMessage(`${currentEnemy.name} hits you for ${enemyDamage} damage!`);\n\n    // Check if player is defeated\n    if (playerHealth - enemyDamage <= 0) {\n      handlePlayerDefeated();\n    }\n  }, [currentEnemy, isFighting, playerHealth, addLogMessage]);\n\n  /**\r\n   * Handle enemy defeat and loot\r\n   */\n  const handleEnemyDefeated = useCallback(enemy => {\n    addLogMessage(`You defeated ${enemy.name}!`);\n\n    // Process loot drops\n    enemy.lootTable.forEach(loot => {\n      if (Math.random() <= loot.chance) {\n        addLogMessage(`You found ${loot.quantity} ${loot.itemId}!`);\n        // In a real app, you would look up the item details\n        addItem({\n          id: loot.itemId,\n          name: loot.itemId.replace('item_', '').replace('_', ' '),\n          quantity: loot.quantity,\n          type: 'resource',\n          sellPrice: 5 // Mock value\n        });\n      }\n    });\n\n    // End combat\n    setIsFighting(false);\n    setCurrentEnemy(null);\n  }, [addLogMessage, addItem]);\n\n  /**\r\n   * Handle player defeat\r\n   */\n  const handlePlayerDefeated = useCallback(() => {\n    addLogMessage('You have been defeated!');\n    setIsFighting(false);\n    setCurrentEnemy(null);\n  }, [addLogMessage]);\n\n  /**\r\n   * Flee from combat\r\n   */\n  const fleeCombat = useCallback(() => {\n    if (!isFighting) return;\n\n    // 70% chance to successfully flee\n    if (Math.random() <= 0.7) {\n      addLogMessage('You successfully fled from combat!');\n      setIsFighting(false);\n      setCurrentEnemy(null);\n    } else {\n      addLogMessage('You failed to flee!');\n\n      // Enemy gets a free attack\n      if (currentEnemy) {\n        const enemyDamage = Math.max(1, currentEnemy.attack - 5);\n        setPlayerHealth(prev => Math.max(0, prev - enemyDamage));\n        addLogMessage(`${currentEnemy.name} hits you for ${enemyDamage} damage!`);\n\n        // Check if player is defeated\n        if (playerHealth - enemyDamage <= 0) {\n          handlePlayerDefeated();\n        }\n      }\n    }\n  }, [isFighting, currentEnemy, playerHealth, addLogMessage, handlePlayerDefeated]);\n  return {\n    enemies,\n    currentEnemy,\n    isFighting,\n    playerHealth,\n    playerMaxHealth,\n    combatLog,\n    startCombat,\n    attackEnemy,\n    fleeCombat\n  };\n};\n_s(useCombat, \"JNexmVgqKIx+C9MGxIe7qJGSjhY=\", false, function () {\n  return [useGameContext, useInventory];\n});","map":{"version":3,"names":["useState","useCallback","useEffect","useGameContext","useInventory","useCombat","_s","gameState","updateGameState","addItem","enemies","id","name","attack","defense","health","maxHealth","lootTable","itemId","quantity","chance","currentEnemy","setCurrentEnemy","isFighting","setIsFighting","playerHealth","setPlayerHealth","playerMaxHealth","setPlayerMaxHealth","combatLog","setCombatLog","addLogMessage","message","prevLog","startCombat","enemyId","enemy","find","e","enemyClone","attackEnemy","playerAttack","damageToEnemy","Math","max","updatedEnemy","handleEnemyDefeated","enemyDamage","prev","handlePlayerDefeated","forEach","loot","random","replace","type","sellPrice","fleeCombat"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/hooks/useCombat.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\r\nimport { useGameContext } from '../context/GameContext';\r\nimport { useInventory } from './useInventory';\r\nimport { Enemy } from '../types';\r\n\r\n/**\r\n * useCombat hook - Manages combat-related state and operations\r\n */\r\nexport const useCombat = () => {\r\n  const { gameState, updateGameState } = useGameContext();\r\n  const { addItem } = useInventory();\r\n  \r\n  // Mock enemies for now - in a real app, these would come from the game state\r\n  const [enemies] = useState<Enemy[]>([\r\n    {\r\n      id: 'enemy_goblin',\r\n      name: 'Goblin',\r\n      attack: 5,\r\n      defense: 3,\r\n      health: 20,\r\n      maxHealth: 20,\r\n      lootTable: [\r\n        { itemId: 'item_gold_coin', quantity: 5, chance: 1.0 },\r\n        { itemId: 'item_goblin_ear', quantity: 1, chance: 0.5 }\r\n      ]\r\n    },\r\n    {\r\n      id: 'enemy_wolf',\r\n      name: 'Wolf',\r\n      attack: 7,\r\n      defense: 2,\r\n      health: 15,\r\n      maxHealth: 15,\r\n      lootTable: [\r\n        { itemId: 'item_wolf_pelt', quantity: 1, chance: 0.8 },\r\n        { itemId: 'item_wolf_fang', quantity: 1, chance: 0.3 }\r\n      ]\r\n    },\r\n    {\r\n      id: 'enemy_bandit',\r\n      name: 'Bandit',\r\n      attack: 8,\r\n      defense: 5,\r\n      health: 25,\r\n      maxHealth: 25,\r\n      lootTable: [\r\n        { itemId: 'item_gold_coin', quantity: 10, chance: 1.0 },\r\n        { itemId: 'item_dagger', quantity: 1, chance: 0.2 }\r\n      ]\r\n    }\r\n  ]);\r\n  \r\n  // Local state for combat\r\n  const [currentEnemy, setCurrentEnemy] = useState<Enemy | null>(null);\r\n  const [isFighting, setIsFighting] = useState(false);\r\n  const [playerHealth, setPlayerHealth] = useState(100);\r\n  const [playerMaxHealth, setPlayerMaxHealth] = useState(100);\r\n  const [combatLog, setCombatLog] = useState<string[]>([]);\r\n  \r\n  // Reset player health when not in combat\r\n  useEffect(() => {\r\n    if (!isFighting) {\r\n      setPlayerHealth(playerMaxHealth);\r\n    }\r\n  }, [isFighting, playerMaxHealth]);\r\n  \r\n  /**\r\n   * Add a message to the combat log\r\n   */\r\n  const addLogMessage = useCallback((message: string) => {\r\n    setCombatLog(prevLog => [...prevLog, message]);\r\n  }, []);\r\n  \r\n  /**\r\n   * Start combat with an enemy\r\n   */\r\n  const startCombat = useCallback((enemyId: string) => {\r\n    const enemy = enemies.find(e => e.id === enemyId);\r\n    if (!enemy) return;\r\n    \r\n    // Clone the enemy to avoid modifying the original\r\n    const enemyClone: Enemy = {\r\n      ...enemy,\r\n      health: enemy.maxHealth // Reset health\r\n    };\r\n    \r\n    setCurrentEnemy(enemyClone);\r\n    setIsFighting(true);\r\n    setCombatLog([`Combat started with ${enemyClone.name}!`]);\r\n  }, [enemies]);\r\n  \r\n  /**\r\n   * Attack the current enemy\r\n   */\r\n  const attackEnemy = useCallback(() => {\r\n    if (!currentEnemy || !isFighting) return;\r\n    \r\n    // Calculate player damage (simplified formula)\r\n    const playerAttack = 10; // This would come from player stats + equipment\r\n    const damageToEnemy = Math.max(1, playerAttack - currentEnemy.defense);\r\n    \r\n    // Update enemy health\r\n    const updatedEnemy = {\r\n      ...currentEnemy,\r\n      health: Math.max(0, currentEnemy.health - damageToEnemy)\r\n    };\r\n    \r\n    addLogMessage(`You hit ${currentEnemy.name} for ${damageToEnemy} damage!`);\r\n    setCurrentEnemy(updatedEnemy);\r\n    \r\n    // Check if enemy is defeated\r\n    if (updatedEnemy.health <= 0) {\r\n      handleEnemyDefeated(updatedEnemy);\r\n      return;\r\n    }\r\n    \r\n    // Enemy counterattack\r\n    const enemyDamage = Math.max(1, currentEnemy.attack - 5); // 5 is player defense\r\n    setPlayerHealth(prev => Math.max(0, prev - enemyDamage));\r\n    addLogMessage(`${currentEnemy.name} hits you for ${enemyDamage} damage!`);\r\n    \r\n    // Check if player is defeated\r\n    if (playerHealth - enemyDamage <= 0) {\r\n      handlePlayerDefeated();\r\n    }\r\n  }, [currentEnemy, isFighting, playerHealth, addLogMessage]);\r\n  \r\n  /**\r\n   * Handle enemy defeat and loot\r\n   */\r\n  const handleEnemyDefeated = useCallback((enemy: Enemy) => {\r\n    addLogMessage(`You defeated ${enemy.name}!`);\r\n    \r\n    // Process loot drops\r\n    enemy.lootTable.forEach(loot => {\r\n      if (Math.random() <= loot.chance) {\r\n        addLogMessage(`You found ${loot.quantity} ${loot.itemId}!`);\r\n        // In a real app, you would look up the item details\r\n        addItem({\r\n          id: loot.itemId,\r\n          name: loot.itemId.replace('item_', '').replace('_', ' '),\r\n          quantity: loot.quantity,\r\n          type: 'resource',\r\n          sellPrice: 5 // Mock value\r\n        });\r\n      }\r\n    });\r\n    \r\n    // End combat\r\n    setIsFighting(false);\r\n    setCurrentEnemy(null);\r\n  }, [addLogMessage, addItem]);\r\n  \r\n  /**\r\n   * Handle player defeat\r\n   */\r\n  const handlePlayerDefeated = useCallback(() => {\r\n    addLogMessage('You have been defeated!');\r\n    setIsFighting(false);\r\n    setCurrentEnemy(null);\r\n  }, [addLogMessage]);\r\n  \r\n  /**\r\n   * Flee from combat\r\n   */\r\n  const fleeCombat = useCallback(() => {\r\n    if (!isFighting) return;\r\n    \r\n    // 70% chance to successfully flee\r\n    if (Math.random() <= 0.7) {\r\n      addLogMessage('You successfully fled from combat!');\r\n      setIsFighting(false);\r\n      setCurrentEnemy(null);\r\n    } else {\r\n      addLogMessage('You failed to flee!');\r\n      \r\n      // Enemy gets a free attack\r\n      if (currentEnemy) {\r\n        const enemyDamage = Math.max(1, currentEnemy.attack - 5);\r\n        setPlayerHealth(prev => Math.max(0, prev - enemyDamage));\r\n        addLogMessage(`${currentEnemy.name} hits you for ${enemyDamage} damage!`);\r\n        \r\n        // Check if player is defeated\r\n        if (playerHealth - enemyDamage <= 0) {\r\n          handlePlayerDefeated();\r\n        }\r\n      }\r\n    }\r\n  }, [isFighting, currentEnemy, playerHealth, addLogMessage, handlePlayerDefeated]);\r\n  \r\n  return {\r\n    enemies,\r\n    currentEnemy,\r\n    isFighting,\r\n    playerHealth,\r\n    playerMaxHealth,\r\n    combatLog,\r\n    startCombat,\r\n    attackEnemy,\r\n    fleeCombat\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
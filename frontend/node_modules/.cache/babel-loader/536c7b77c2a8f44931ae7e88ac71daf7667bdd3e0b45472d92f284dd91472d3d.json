{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\OneDrive\\\\Desktop\\\\coding\\\\WaveringTides\\\\frontend\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\nimport { createMockItems } from '../utils/mockData';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n/**\r\n * Custom hook to access the GameContext\r\n */\nexport const useGameContext = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGameContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/**\r\n * GameProvider component - Provides game state and operations to the entire app\r\n */\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [gameState, setGameState] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [playerId, setPlayerId] = useState('player1'); // Default player ID\n\n  /**\r\n   * Load game data from API or create a new game\r\n   */\n  const loadGameData = useCallback(async () => {\n    console.log('Loading game data...');\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try to load from localStorage first to get the player ID\n      const savedPlayerId = localStorage.getItem('playerId');\n      if (savedPlayerId) {\n        setPlayerId(savedPlayerId);\n      }\n\n      // Try to fetch from API\n      try {\n        console.log('Attempting to fetch from API...');\n        const gameData = await api.getGame();\n        if (gameData) {\n          console.log('Game data loaded from API:', gameData);\n          setGameState(gameData);\n          setLoading(false);\n          return;\n        }\n      } catch (apiError) {\n        console.log('API not available, falling back to local storage', apiError);\n\n        // Try to load from localStorage if API fails\n        const savedGame = localStorage.getItem('gameState');\n        if (savedGame) {\n          try {\n            const parsedGameState = JSON.parse(savedGame);\n            console.log('Game data loaded from localStorage:', parsedGameState);\n            setGameState(parsedGameState);\n            setLoading(false);\n            return;\n          } catch (parseError) {\n            console.error('Error parsing saved game data:', parseError);\n            // If parsing fails, remove corrupted data\n            localStorage.removeItem('gameState');\n          }\n        }\n      }\n\n      // If no data from API or localStorage, create a new game\n      console.log('Creating new game...');\n      createNewGame();\n    } catch (err) {\n      console.error('Error loading game:', err);\n      setError('Failed to load game data. Please try again.');\n      // Create a new game even if loading fails to prevent a blank screen\n      createNewGame();\n    } finally {\n      // Ensure loading is set to false regardless of the outcome\n      setLoading(false);\n    }\n  }, []);\n\n  /**\r\n   * Create a new game with default values\r\n   */\n  const createNewGame = () => {\n    // Create mock skills\n    const mockSkills = {\n      [SKILL_IDS.WOODCUTTING]: {\n        id: SKILL_IDS.WOODCUTTING,\n        name: 'Woodcutting',\n        level: 1,\n        xp: 0,\n        xpPerAction: 5,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Faster woodcutting speed',\n            '10': 'Double logs chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.FISHING]: {\n        id: SKILL_IDS.FISHING,\n        name: 'Fishing',\n        level: 1,\n        xp: 0,\n        xpPerAction: 7,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Better fish quality',\n            '10': 'Double fish chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.MINING]: {\n        id: SKILL_IDS.MINING,\n        name: 'Mining',\n        level: 1,\n        xp: 0,\n        xpPerAction: 6,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {}\n        }\n      }\n    };\n\n    // Convert ITEMS to proper Item type\n    const itemsWithProperType = createMockItems();\n\n    // Create mock inventory\n    const mockInventory = {\n      [ITEM_IDS.LOGS]: {\n        ...itemsWithProperType[ITEM_IDS.LOGS],\n        quantity: 5\n      },\n      [ITEM_IDS.RAW_FISH]: {\n        ...itemsWithProperType[ITEM_IDS.RAW_FISH],\n        quantity: 3\n      }\n    };\n    const mockData = {\n      player: {\n        id: playerId,\n        gold: 100,\n        lastUpdate: Date.now(),\n        skills: mockSkills,\n        inventory: mockInventory,\n        equipment: {},\n        combat: {\n          isFighting: false\n        }\n      }\n    };\n    console.log('New game created:', mockData);\n    setGameState(mockData);\n    localStorage.setItem('playerId', playerId);\n    localStorage.setItem('gameState', JSON.stringify(mockData));\n    setLoading(false);\n  };\n\n  /**\r\n   * Refresh game state from API\r\n   */\n  const refreshGameState = async () => {\n    try {\n      setLoading(true);\n      const gameData = await api.getGame();\n      if (gameData) {\n        setGameState(gameData);\n      }\n    } catch (err) {\n      console.error('Error refreshing game state:', err);\n      // Don't set an error message here to avoid disrupting the UI\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\r\n   * Initialize the game on component mount\r\n   */\n  useEffect(() => {\n    loadGameData();\n\n    // Set up autosave\n    const saveInterval = setInterval(() => {\n      if (gameState) {\n        saveGame();\n      }\n    }, 60000); // Save every minute\n\n    return () => clearInterval(saveInterval);\n  }, [loadGameData]);\n\n  /**\r\n   * Update the game state\r\n   */\n  const updateGameState = useCallback(updater => {\n    setGameState(prev => {\n      const newState = updater(prev);\n\n      // Save immediately on state update\n      if (newState) {\n        localStorage.setItem('gameState', JSON.stringify(newState));\n      }\n      return newState;\n    });\n  }, []);\n\n  /**\r\n   * Save the game to localStorage and API\r\n   */\n  const saveGame = useCallback(async () => {\n    if (!gameState) return;\n    try {\n      // Update last saved timestamp\n      const stateWithTimestamp = {\n        ...gameState,\n        lastSaved: Date.now()\n      };\n      localStorage.setItem('gameState', JSON.stringify(stateWithTimestamp));\n\n      // Try to save to API\n      try {\n        // This is where we'd call the API to update the game state\n        console.log('Saving game to API...');\n        await api.updateGame(stateWithTimestamp);\n      } catch (apiError) {\n        console.error('Error saving to API, saved locally only:', apiError);\n      }\n    } catch (err) {\n      console.error('Error saving game:', err);\n      setError('Failed to save game data');\n    }\n  }, [gameState]);\n\n  /**\r\n   * Reset the game to default values\r\n   */\n  const resetGame = useCallback(() => {\n    localStorage.removeItem('gameState');\n    createNewGame();\n  }, []);\n\n  // When updating the game state with new skill XP\n  const updateSkillXP = (state, skillId, xpAmount) => {\n    var _newState$player, _newState$player$skil;\n    console.log(`Updating skill ${skillId} XP by ${xpAmount}`);\n\n    // Create a deep copy of the current state\n    const newState = JSON.parse(JSON.stringify(state));\n    if (newState !== null && newState !== void 0 && (_newState$player = newState.player) !== null && _newState$player !== void 0 && (_newState$player$skil = _newState$player.skills) !== null && _newState$player$skil !== void 0 && _newState$player$skil[skillId]) {\n      // Add XP to the skill\n      newState.player.skills[skillId].xp += xpAmount;\n\n      // Log the new XP value\n      console.log(`New XP: ${newState.player.skills[skillId].xp}`);\n\n      // Check if level up is needed\n      const currentLevel = newState.player.skills[skillId].level;\n      const requiredXP = calculateXpForNextLevel(currentLevel);\n      if (newState.player.skills[skillId].xp >= requiredXP) {\n        // Level up the skill\n        newState.player.skills[skillId].level += 1;\n        console.log(`LEVEL UP! Skill ${skillId} is now level ${newState.player.skills[skillId].level}`);\n      }\n\n      // Save changes\n      localStorage.setItem('gameState', JSON.stringify(newState));\n      console.log('Game state updated and saved to localStorage');\n      return newState;\n    } else {\n      console.error(`Skill ${skillId} not found in game state`);\n      return state;\n    }\n  };\n\n  // Helper function to calculate XP required for next level\n  const calculateXpForNextLevel = currentLevel => {\n    return Math.floor(100 * Math.pow(1.1, currentLevel - 1));\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      gameState,\n      loading,\n      error,\n      updateGameState,\n      saveGame,\n      resetGame,\n      refreshGameState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"BwzBH0ULVrj6AiyG0nIQbaBBclI=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","SKILL_IDS","ITEM_IDS","createMockItems","api","jsxDEV","_jsxDEV","GameContext","undefined","useGameContext","_s","context","Error","GameProvider","children","_s2","gameState","setGameState","loading","setLoading","error","setError","playerId","setPlayerId","loadGameData","console","log","savedPlayerId","localStorage","getItem","gameData","getGame","apiError","savedGame","parsedGameState","JSON","parse","parseError","removeItem","createNewGame","err","mockSkills","WOODCUTTING","id","name","level","xp","xpPerAction","isActive","mastery","unlocks","FISHING","MINING","itemsWithProperType","mockInventory","LOGS","quantity","RAW_FISH","mockData","player","gold","lastUpdate","Date","now","skills","inventory","equipment","combat","isFighting","setItem","stringify","refreshGameState","saveInterval","setInterval","saveGame","clearInterval","updateGameState","updater","prev","newState","stateWithTimestamp","lastSaved","updateGame","resetGame","updateSkillXP","state","skillId","xpAmount","_newState$player","_newState$player$skil","currentLevel","requiredXP","calculateXpForNextLevel","Math","floor","pow","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\r\nimport { GameState, Item, Skill } from '../types';\r\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\r\nimport { createMockItems } from '../utils/mockData';\r\nimport api from '../services/api';\r\n\r\ninterface GameContextProps {\r\n  gameState: GameState | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  updateGameState: (updater: (prevState: GameState | null) => GameState | null) => void;\r\n  saveGame: () => void;\r\n  resetGame: () => void;\r\n  refreshGameState: () => Promise<void>;\r\n}\r\n\r\nconst GameContext = createContext<GameContextProps | undefined>(undefined);\r\n\r\n/**\r\n * Custom hook to access the GameContext\r\n */\r\nexport const useGameContext = () => {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGameContext must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * GameProvider component - Provides game state and operations to the entire app\r\n */\r\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\r\n  const [gameState, setGameState] = useState<GameState | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [playerId, setPlayerId] = useState<string>('player1'); // Default player ID\r\n\r\n  /**\r\n   * Load game data from API or create a new game\r\n   */\r\n  const loadGameData = useCallback(async () => {\r\n    console.log('Loading game data...');\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Try to load from localStorage first to get the player ID\r\n      const savedPlayerId = localStorage.getItem('playerId');\r\n      if (savedPlayerId) {\r\n        setPlayerId(savedPlayerId);\r\n      }\r\n      \r\n      // Try to fetch from API\r\n      try {\r\n        console.log('Attempting to fetch from API...');\r\n        const gameData = await api.getGame();\r\n        if (gameData) {\r\n          console.log('Game data loaded from API:', gameData);\r\n          setGameState(gameData);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n      } catch (apiError) {\r\n        console.log('API not available, falling back to local storage', apiError);\r\n        \r\n        // Try to load from localStorage if API fails\r\n        const savedGame = localStorage.getItem('gameState');\r\n        if (savedGame) {\r\n          try {\r\n            const parsedGameState = JSON.parse(savedGame);\r\n            console.log('Game data loaded from localStorage:', parsedGameState);\r\n            setGameState(parsedGameState);\r\n            setLoading(false);\r\n            return;\r\n          } catch (parseError) {\r\n            console.error('Error parsing saved game data:', parseError);\r\n            // If parsing fails, remove corrupted data\r\n            localStorage.removeItem('gameState');\r\n          }\r\n        }\r\n      }\r\n      \r\n      // If no data from API or localStorage, create a new game\r\n      console.log('Creating new game...');\r\n      createNewGame();\r\n    } catch (err) {\r\n      console.error('Error loading game:', err);\r\n      setError('Failed to load game data. Please try again.');\r\n      // Create a new game even if loading fails to prevent a blank screen\r\n      createNewGame();\r\n    } finally {\r\n      // Ensure loading is set to false regardless of the outcome\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Create a new game with default values\r\n   */\r\n  const createNewGame = () => {\r\n    // Create mock skills\r\n    const mockSkills: { [id: string]: Skill } = {\r\n      [SKILL_IDS.WOODCUTTING]: {\r\n        id: SKILL_IDS.WOODCUTTING,\r\n        name: 'Woodcutting',\r\n        level: 1,\r\n        xp: 0,\r\n        xpPerAction: 5,\r\n        isActive: false,\r\n        mastery: {\r\n          level: 1,\r\n          xp: 0,\r\n          unlocks: {\r\n            '5': 'Faster woodcutting speed',\r\n            '10': 'Double logs chance (10%)'\r\n          }\r\n        }\r\n      },\r\n      [SKILL_IDS.FISHING]: {\r\n        id: SKILL_IDS.FISHING,\r\n        name: 'Fishing',\r\n        level: 1,\r\n        xp: 0,\r\n        xpPerAction: 7,\r\n        isActive: false,\r\n        mastery: {\r\n          level: 1,\r\n          xp: 0,\r\n          unlocks: {\r\n            '5': 'Better fish quality',\r\n            '10': 'Double fish chance (10%)'\r\n          }\r\n        }\r\n      },\r\n      [SKILL_IDS.MINING]: {\r\n        id: SKILL_IDS.MINING,\r\n        name: 'Mining',\r\n        level: 1,\r\n        xp: 0,\r\n        xpPerAction: 6,\r\n        isActive: false,\r\n        mastery: {\r\n          level: 1,\r\n          xp: 0,\r\n          unlocks: {}\r\n        }\r\n      }\r\n    };\r\n\r\n    // Convert ITEMS to proper Item type\r\n    const itemsWithProperType = createMockItems();\r\n\r\n    // Create mock inventory\r\n    const mockInventory: { [id: string]: Item } = {\r\n      [ITEM_IDS.LOGS]: { ...itemsWithProperType[ITEM_IDS.LOGS], quantity: 5 },\r\n      [ITEM_IDS.RAW_FISH]: { ...itemsWithProperType[ITEM_IDS.RAW_FISH], quantity: 3 }\r\n    };\r\n\r\n    const mockData: GameState = {\r\n      player: {\r\n        id: playerId,\r\n        gold: 100,\r\n        lastUpdate: Date.now(),\r\n        skills: mockSkills,\r\n        inventory: mockInventory,\r\n        equipment: {},\r\n        combat: {\r\n          isFighting: false\r\n        }\r\n      }\r\n    };\r\n    \r\n    console.log('New game created:', mockData);\r\n    setGameState(mockData);\r\n    localStorage.setItem('playerId', playerId);\r\n    localStorage.setItem('gameState', JSON.stringify(mockData));\r\n    setLoading(false);\r\n  };\r\n\r\n  /**\r\n   * Refresh game state from API\r\n   */\r\n  const refreshGameState = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const gameData = await api.getGame();\r\n      if (gameData) {\r\n        setGameState(gameData);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error refreshing game state:', err);\r\n      // Don't set an error message here to avoid disrupting the UI\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Initialize the game on component mount\r\n   */\r\n  useEffect(() => {\r\n    loadGameData();\r\n    \r\n    // Set up autosave\r\n    const saveInterval = setInterval(() => {\r\n      if (gameState) {\r\n        saveGame();\r\n      }\r\n    }, 60000); // Save every minute\r\n    \r\n    return () => clearInterval(saveInterval);\r\n  }, [loadGameData]);\r\n\r\n  /**\r\n   * Update the game state\r\n   */\r\n  const updateGameState = useCallback((updater: (prevState: GameState | null) => GameState | null) => {\r\n    setGameState(prev => {\r\n      const newState = updater(prev);\r\n      \r\n      // Save immediately on state update\r\n      if (newState) {\r\n        localStorage.setItem('gameState', JSON.stringify(newState));\r\n      }\r\n      \r\n      return newState;\r\n    });\r\n  }, []);\r\n\r\n  /**\r\n   * Save the game to localStorage and API\r\n   */\r\n  const saveGame = useCallback(async () => {\r\n    if (!gameState) return;\r\n    \r\n    try {\r\n      // Update last saved timestamp\r\n      const stateWithTimestamp = {\r\n        ...gameState,\r\n        lastSaved: Date.now()\r\n      };\r\n      \r\n      localStorage.setItem('gameState', JSON.stringify(stateWithTimestamp));\r\n      \r\n      // Try to save to API\r\n      try {\r\n        // This is where we'd call the API to update the game state\r\n        console.log('Saving game to API...');\r\n        await api.updateGame(stateWithTimestamp);\r\n      } catch (apiError) {\r\n        console.error('Error saving to API, saved locally only:', apiError);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error saving game:', err);\r\n      setError('Failed to save game data');\r\n    }\r\n  }, [gameState]);\r\n\r\n  /**\r\n   * Reset the game to default values\r\n   */\r\n  const resetGame = useCallback(() => {\r\n    localStorage.removeItem('gameState');\r\n    createNewGame();\r\n  }, []);\r\n\r\n  // When updating the game state with new skill XP\r\n  const updateSkillXP = (state: any, skillId: string, xpAmount: number) => {\r\n    console.log(`Updating skill ${skillId} XP by ${xpAmount}`);\r\n    \r\n    // Create a deep copy of the current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    \r\n    if (newState?.player?.skills?.[skillId]) {\r\n      // Add XP to the skill\r\n      newState.player.skills[skillId].xp += xpAmount;\r\n      \r\n      // Log the new XP value\r\n      console.log(`New XP: ${newState.player.skills[skillId].xp}`);\r\n      \r\n      // Check if level up is needed\r\n      const currentLevel = newState.player.skills[skillId].level;\r\n      const requiredXP = calculateXpForNextLevel(currentLevel);\r\n      \r\n      if (newState.player.skills[skillId].xp >= requiredXP) {\r\n        // Level up the skill\r\n        newState.player.skills[skillId].level += 1;\r\n        console.log(`LEVEL UP! Skill ${skillId} is now level ${newState.player.skills[skillId].level}`);\r\n      }\r\n      \r\n      // Save changes\r\n      localStorage.setItem('gameState', JSON.stringify(newState));\r\n      console.log('Game state updated and saved to localStorage');\r\n      \r\n      return newState;\r\n    } else {\r\n      console.error(`Skill ${skillId} not found in game state`);\r\n      return state;\r\n    }\r\n  };\r\n\r\n  // Helper function to calculate XP required for next level\r\n  const calculateXpForNextLevel = (currentLevel: number): number => {\r\n    return Math.floor(100 * Math.pow(1.1, currentLevel - 1));\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider \r\n      value={{ \r\n        gameState, \r\n        loading, \r\n        error,\r\n        updateGameState,\r\n        saveGame,\r\n        resetGame,\r\n        refreshGameState\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { useGameContext } from '../context/GameContext';\n/**\r\n * Calculate the XP required for the next level\r\n * This is a simple formula that can be adjusted as needed\r\n */\nconst calculateXpForNextLevel = currentLevel => {\n  // Example formula: base 100 XP with 10% increase per level\n  return Math.floor(100 * Math.pow(1.1, currentLevel - 1));\n};\n\n/**\r\n * useSkills hook - Manages skill-related state and operations\r\n */\nexport const useSkills = () => {\n  _s();\n  const {\n    gameState,\n    updateGameState\n  } = useGameContext();\n  const [currentSkillId, setCurrentSkillId] = useState(null);\n  const skills = (gameState === null || gameState === void 0 ? void 0 : gameState.player.skills) || {};\n  const currentSkill = currentSkillId ? skills[currentSkillId] : null;\n\n  /**\r\n   * Select a skill to view its details\r\n   */\n  const selectSkill = useCallback(skillId => {\n    setCurrentSkillId(skillId);\n  }, []);\n\n  /**\r\n   * Start a skill activity\r\n   */\n  const startSkill = useCallback(skillId => {\n    if (!gameState) return;\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: true,\n        lastActiveTime: Date.now()\n      }\n    };\n    updateGameState(prevState => {\n      if (!prevState) return null;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\r\n   * Stop a skill activity\r\n   */\n  const stopSkill = useCallback(skillId => {\n    if (!gameState) return;\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...gameState.player.skills[skillId],\n        isActive: false\n      }\n    };\n    updateGameState(prevState => {\n      if (!prevState) return null;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\r\n   * Add experience to a skill and handle level ups\r\n   */\n  const addExperience = useCallback((skillId, amount) => {\n    if (!gameState) return;\n    const skill = gameState.player.skills[skillId];\n    if (!skill) return;\n    let newXp = skill.xp + amount;\n    let newLevel = skill.level;\n\n    // Check for level up\n    const xpRequired = calculateXpForNextLevel(newLevel);\n    while (newXp >= xpRequired) {\n      newXp -= xpRequired;\n      newLevel++;\n    }\n    const updatedSkills = {\n      ...gameState.player.skills,\n      [skillId]: {\n        ...skill,\n        level: newLevel,\n        xp: newXp\n      }\n    };\n    updateGameState(prevState => {\n      if (!prevState) return null;\n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          skills: updatedSkills\n        }\n      };\n    });\n  }, [gameState, updateGameState]);\n\n  /**\r\n   * Get a list of all active skills\r\n   */\n  const getActiveSkills = useCallback(() => {\n    if (!gameState) return [];\n    return Object.keys(gameState.player.skills).filter(skillId => gameState.player.skills[skillId].isActive);\n  }, [gameState]);\n\n  /**\r\n   * Check if a skill has reached a specific level\r\n   */\n  const hasReachedLevel = useCallback((skillId, level) => {\n    if (!gameState) return false;\n    const skill = gameState.player.skills[skillId];\n    return skill ? skill.level >= level : false;\n  }, [gameState]);\n  return {\n    skills,\n    currentSkill,\n    selectSkill,\n    startSkill,\n    stopSkill,\n    addExperience,\n    getActiveSkills,\n    hasReachedLevel\n  };\n};\n_s(useSkills, \"vdBqadz/aNhkXCePgvjlzt2KNRc=\", false, function () {\n  return [useGameContext];\n});","map":{"version":3,"names":["useState","useCallback","useGameContext","calculateXpForNextLevel","currentLevel","Math","floor","pow","useSkills","_s","gameState","updateGameState","currentSkillId","setCurrentSkillId","skills","player","currentSkill","selectSkill","skillId","startSkill","updatedSkills","isActive","lastActiveTime","Date","now","prevState","stopSkill","addExperience","amount","skill","newXp","xp","newLevel","level","xpRequired","getActiveSkills","Object","keys","filter","hasReachedLevel"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/hooks/useSkills.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { useGameContext } from '../context/GameContext';\r\nimport { Skill } from '../types';\r\n\r\n/**\r\n * Calculate the XP required for the next level\r\n * This is a simple formula that can be adjusted as needed\r\n */\r\nconst calculateXpForNextLevel = (currentLevel: number): number => {\r\n  // Example formula: base 100 XP with 10% increase per level\r\n  return Math.floor(100 * Math.pow(1.1, currentLevel - 1));\r\n};\r\n\r\n/**\r\n * useSkills hook - Manages skill-related state and operations\r\n */\r\nexport const useSkills = () => {\r\n  const { gameState, updateGameState } = useGameContext();\r\n  const [currentSkillId, setCurrentSkillId] = useState<string | null>(null);\r\n  \r\n  const skills = gameState?.player.skills || {};\r\n  const currentSkill = currentSkillId ? skills[currentSkillId] : null;\r\n  \r\n  /**\r\n   * Select a skill to view its details\r\n   */\r\n  const selectSkill = useCallback((skillId: string) => {\r\n    setCurrentSkillId(skillId);\r\n  }, []);\r\n  \r\n  /**\r\n   * Start a skill activity\r\n   */\r\n  const startSkill = useCallback((skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...gameState.player.skills[skillId],\r\n        isActive: true,\r\n        lastActiveTime: Date.now()\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Stop a skill activity\r\n   */\r\n  const stopSkill = useCallback((skillId: string) => {\r\n    if (!gameState) return;\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...gameState.player.skills[skillId],\r\n        isActive: false\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Add experience to a skill and handle level ups\r\n   */\r\n  const addExperience = useCallback((skillId: string, amount: number) => {\r\n    if (!gameState) return;\r\n    \r\n    const skill = gameState.player.skills[skillId];\r\n    if (!skill) return;\r\n    \r\n    let newXp = skill.xp + amount;\r\n    let newLevel = skill.level;\r\n    \r\n    // Check for level up\r\n    const xpRequired = calculateXpForNextLevel(newLevel);\r\n    while (newXp >= xpRequired) {\r\n      newXp -= xpRequired;\r\n      newLevel++;\r\n    }\r\n    \r\n    const updatedSkills = {\r\n      ...gameState.player.skills,\r\n      [skillId]: {\r\n        ...skill,\r\n        level: newLevel,\r\n        xp: newXp\r\n      }\r\n    };\r\n    \r\n    updateGameState((prevState) => {\r\n      if (!prevState) return null;\r\n      return {\r\n        ...prevState,\r\n        player: {\r\n          ...prevState.player,\r\n          skills: updatedSkills\r\n        }\r\n      };\r\n    });\r\n  }, [gameState, updateGameState]);\r\n  \r\n  /**\r\n   * Get a list of all active skills\r\n   */\r\n  const getActiveSkills = useCallback(() => {\r\n    if (!gameState) return [];\r\n    \r\n    return Object.keys(gameState.player.skills).filter(\r\n      skillId => gameState.player.skills[skillId].isActive\r\n    );\r\n  }, [gameState]);\r\n  \r\n  /**\r\n   * Check if a skill has reached a specific level\r\n   */\r\n  const hasReachedLevel = useCallback((skillId: string, level: number) => {\r\n    if (!gameState) return false;\r\n    \r\n    const skill = gameState.player.skills[skillId];\r\n    return skill ? skill.level >= level : false;\r\n  }, [gameState]);\r\n  \r\n  return {\r\n    skills,\r\n    currentSkill,\r\n    selectSkill,\r\n    startSkill,\r\n    stopSkill,\r\n    addExperience,\r\n    getActiveSkills,\r\n    hasReachedLevel\r\n  };\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,cAAc,QAAQ,wBAAwB;AAGvD;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAIC,YAAoB,IAAa;EAChE;EACA,OAAOC,IAAI,CAACC,KAAK,CAAC,GAAG,GAAGD,IAAI,CAACE,GAAG,CAAC,GAAG,EAAEH,YAAY,GAAG,CAAC,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGT,cAAc,CAAC,CAAC;EACvD,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EAEzE,MAAMc,MAAM,GAAG,CAAAJ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,MAAM,CAACD,MAAM,KAAI,CAAC,CAAC;EAC7C,MAAME,YAAY,GAAGJ,cAAc,GAAGE,MAAM,CAACF,cAAc,CAAC,GAAG,IAAI;;EAEnE;AACF;AACA;EACE,MAAMK,WAAW,GAAGhB,WAAW,CAAEiB,OAAe,IAAK;IACnDL,iBAAiB,CAACK,OAAO,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAMC,UAAU,GAAGlB,WAAW,CAAEiB,OAAe,IAAK;IAClD,IAAI,CAACR,SAAS,EAAE;IAEhB,MAAMU,aAAa,GAAG;MACpB,GAAGV,SAAS,CAACK,MAAM,CAACD,MAAM;MAC1B,CAACI,OAAO,GAAG;QACT,GAAGR,SAAS,CAACK,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC;QACnCG,QAAQ,EAAE,IAAI;QACdC,cAAc,EAAEC,IAAI,CAACC,GAAG,CAAC;MAC3B;IACF,CAAC;IAEDb,eAAe,CAAEc,SAAS,IAAK;MAC7B,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;MAC3B,OAAO;QACL,GAAGA,SAAS;QACZV,MAAM,EAAE;UACN,GAAGU,SAAS,CAACV,MAAM;UACnBD,MAAM,EAAEM;QACV;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,SAAS,EAAEC,eAAe,CAAC,CAAC;;EAEhC;AACF;AACA;EACE,MAAMe,SAAS,GAAGzB,WAAW,CAAEiB,OAAe,IAAK;IACjD,IAAI,CAACR,SAAS,EAAE;IAEhB,MAAMU,aAAa,GAAG;MACpB,GAAGV,SAAS,CAACK,MAAM,CAACD,MAAM;MAC1B,CAACI,OAAO,GAAG;QACT,GAAGR,SAAS,CAACK,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC;QACnCG,QAAQ,EAAE;MACZ;IACF,CAAC;IAEDV,eAAe,CAAEc,SAAS,IAAK;MAC7B,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;MAC3B,OAAO;QACL,GAAGA,SAAS;QACZV,MAAM,EAAE;UACN,GAAGU,SAAS,CAACV,MAAM;UACnBD,MAAM,EAAEM;QACV;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,SAAS,EAAEC,eAAe,CAAC,CAAC;;EAEhC;AACF;AACA;EACE,MAAMgB,aAAa,GAAG1B,WAAW,CAAC,CAACiB,OAAe,EAAEU,MAAc,KAAK;IACrE,IAAI,CAAClB,SAAS,EAAE;IAEhB,MAAMmB,KAAK,GAAGnB,SAAS,CAACK,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC;IAC9C,IAAI,CAACW,KAAK,EAAE;IAEZ,IAAIC,KAAK,GAAGD,KAAK,CAACE,EAAE,GAAGH,MAAM;IAC7B,IAAII,QAAQ,GAAGH,KAAK,CAACI,KAAK;;IAE1B;IACA,MAAMC,UAAU,GAAG/B,uBAAuB,CAAC6B,QAAQ,CAAC;IACpD,OAAOF,KAAK,IAAII,UAAU,EAAE;MAC1BJ,KAAK,IAAII,UAAU;MACnBF,QAAQ,EAAE;IACZ;IAEA,MAAMZ,aAAa,GAAG;MACpB,GAAGV,SAAS,CAACK,MAAM,CAACD,MAAM;MAC1B,CAACI,OAAO,GAAG;QACT,GAAGW,KAAK;QACRI,KAAK,EAAED,QAAQ;QACfD,EAAE,EAAED;MACN;IACF,CAAC;IAEDnB,eAAe,CAAEc,SAAS,IAAK;MAC7B,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;MAC3B,OAAO;QACL,GAAGA,SAAS;QACZV,MAAM,EAAE;UACN,GAAGU,SAAS,CAACV,MAAM;UACnBD,MAAM,EAAEM;QACV;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,SAAS,EAAEC,eAAe,CAAC,CAAC;;EAEhC;AACF;AACA;EACE,MAAMwB,eAAe,GAAGlC,WAAW,CAAC,MAAM;IACxC,IAAI,CAACS,SAAS,EAAE,OAAO,EAAE;IAEzB,OAAO0B,MAAM,CAACC,IAAI,CAAC3B,SAAS,CAACK,MAAM,CAACD,MAAM,CAAC,CAACwB,MAAM,CAChDpB,OAAO,IAAIR,SAAS,CAACK,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC,CAACG,QAC9C,CAAC;EACH,CAAC,EAAE,CAACX,SAAS,CAAC,CAAC;;EAEf;AACF;AACA;EACE,MAAM6B,eAAe,GAAGtC,WAAW,CAAC,CAACiB,OAAe,EAAEe,KAAa,KAAK;IACtE,IAAI,CAACvB,SAAS,EAAE,OAAO,KAAK;IAE5B,MAAMmB,KAAK,GAAGnB,SAAS,CAACK,MAAM,CAACD,MAAM,CAACI,OAAO,CAAC;IAC9C,OAAOW,KAAK,GAAGA,KAAK,CAACI,KAAK,IAAIA,KAAK,GAAG,KAAK;EAC7C,CAAC,EAAE,CAACvB,SAAS,CAAC,CAAC;EAEf,OAAO;IACLI,MAAM;IACNE,YAAY;IACZC,WAAW;IACXE,UAAU;IACVO,SAAS;IACTC,aAAa;IACbQ,eAAe;IACfI;EACF,CAAC;AACH,CAAC;AAAC9B,EAAA,CA1IWD,SAAS;EAAA,QACmBN,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
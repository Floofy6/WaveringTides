{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{SKILL_IDS,ITEMS,ITEM_IDS}from'../constants';import{jsx as _jsx}from\"react/jsx-runtime\";const GameContext=/*#__PURE__*/createContext(undefined);export const useGameContext=()=>{const context=useContext(GameContext);if(context===undefined){throw new Error('useGameContext must be used within a GameProvider');}return context;};export const GameProvider=_ref=>{let{children}=_ref;const[gameState,setGameState]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// In a real app, you would fetch from your API\nconst fetchGameData=async()=>{try{// Mock API call with simulated delay\nsetTimeout(()=>{// Create mock skills\nconst mockSkills={[SKILL_IDS.WOODCUTTING]:{id:SKILL_IDS.WOODCUTTING,name:'Woodcutting',level:1,xp:0,xpPerAction:5,isActive:false,mastery:{level:1,xp:0,unlocks:{'5':'Faster woodcutting speed','10':'Double logs chance (10%)'}}},[SKILL_IDS.FISHING]:{id:SKILL_IDS.FISHING,name:'Fishing',level:1,xp:0,xpPerAction:7,isActive:false,mastery:{level:1,xp:0,unlocks:{'5':'Better fish quality','10':'Double fish chance (10%)'}}},[SKILL_IDS.MINING]:{id:SKILL_IDS.MINING,name:'Mining',level:1,xp:0,xpPerAction:6,isActive:false,mastery:{level:1,xp:0,unlocks:{}}}};// Convert ITEMS to proper Item type\nconst itemsWithProperType={};// Process each item from the constants\nObject.entries(ITEMS).forEach(_ref2=>{let[key,itemData]=_ref2;// Create base item without optional properties\nconst baseItemData={id:itemData.id,name:itemData.name,quantity:itemData.quantity||1,type:itemData.type==='resource'?'resource':'equipment'};// Add optional properties only if they exist\nif(itemData.sellPrice!==undefined){baseItemData.sellPrice=itemData.sellPrice;}if(itemData.buyPrice!==undefined){baseItemData.buyPrice=itemData.buyPrice;}// Handle slot carefully\nif(itemData.slot==='weapon'||itemData.slot==='armor'){baseItemData.slot=itemData.slot;}// Add stats if they exist\nif(itemData.stats){baseItemData.stats={...itemData.stats};}// Add crafting recipe if it exists - using type assertion to avoid TypeScript error\nif(itemData.craftingRecipe){baseItemData.craftingRecipe=itemData.craftingRecipe;}// Cast to Item type\nitemsWithProperType[key]=baseItemData;});// Create mock inventory\nconst mockInventory={[ITEM_IDS.LOGS]:{...itemsWithProperType[ITEM_IDS.LOGS],quantity:5},[ITEM_IDS.RAW_FISH]:{...itemsWithProperType[ITEM_IDS.RAW_FISH],quantity:3}};const mockData={player:{id:'player1',gold:100,lastUpdate:Date.now(),skills:mockSkills,inventory:mockInventory,equipment:{},combat:{isFighting:false}}};setGameState(mockData);setLoading(false);},500);}catch(error){console.error('Error fetching game data:',error);setLoading(false);}};fetchGameData();},[]);const updateGameState=updater=>{setGameState(updater);};return/*#__PURE__*/_jsx(GameContext.Provider,{value:{gameState,loading,updateGameState},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","SKILL_IDS","ITEMS","ITEM_IDS","jsx","_jsx","GameContext","undefined","useGameContext","context","Error","GameProvider","_ref","children","gameState","setGameState","loading","setLoading","fetchGameData","setTimeout","mockSkills","WOODCUTTING","id","name","level","xp","xpPerAction","isActive","mastery","unlocks","FISHING","MINING","itemsWithProperType","Object","entries","forEach","_ref2","key","itemData","baseItemData","quantity","type","sellPrice","buyPrice","slot","stats","craftingRecipe","mockInventory","LOGS","RAW_FISH","mockData","player","gold","lastUpdate","Date","now","skills","inventory","equipment","combat","isFighting","error","console","updateGameState","updater","Provider","value"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { GameState, Item, Skill, Mastery, CraftingRecipe } from '../types';\r\nimport { ENEMIES, SKILL_IDS, ITEMS, ITEM_IDS } from '../constants';\r\n\r\ninterface GameContextProps {\r\n  gameState: GameState | null;\r\n  loading: boolean;\r\n  updateGameState: (updater: (prevState: GameState | null) => GameState | null) => void;\r\n}\r\n\r\nconst GameContext = createContext<GameContextProps | undefined>(undefined);\r\n\r\nexport const useGameContext = () => {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGameContext must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\r\n  const [gameState, setGameState] = useState<GameState | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // In a real app, you would fetch from your API\r\n    const fetchGameData = async () => {\r\n      try {\r\n        // Mock API call with simulated delay\r\n        setTimeout(() => {\r\n          // Create mock skills\r\n          const mockSkills: { [id: string]: Skill } = {\r\n            [SKILL_IDS.WOODCUTTING]: {\r\n              id: SKILL_IDS.WOODCUTTING,\r\n              name: 'Woodcutting',\r\n              level: 1,\r\n              xp: 0,\r\n              xpPerAction: 5,\r\n              isActive: false,\r\n              mastery: {\r\n                level: 1,\r\n                xp: 0,\r\n                unlocks: {\r\n                  '5': 'Faster woodcutting speed',\r\n                  '10': 'Double logs chance (10%)'\r\n                }\r\n              }\r\n            },\r\n            [SKILL_IDS.FISHING]: {\r\n              id: SKILL_IDS.FISHING,\r\n              name: 'Fishing',\r\n              level: 1,\r\n              xp: 0,\r\n              xpPerAction: 7,\r\n              isActive: false,\r\n              mastery: {\r\n                level: 1,\r\n                xp: 0,\r\n                unlocks: {\r\n                  '5': 'Better fish quality',\r\n                  '10': 'Double fish chance (10%)'\r\n                }\r\n              }\r\n            },\r\n            [SKILL_IDS.MINING]: {\r\n              id: SKILL_IDS.MINING,\r\n              name: 'Mining',\r\n              level: 1,\r\n              xp: 0,\r\n              xpPerAction: 6,\r\n              isActive: false,\r\n              mastery: {\r\n                level: 1,\r\n                xp: 0,\r\n                unlocks: {}\r\n              }\r\n            }\r\n          };\r\n\r\n          // Convert ITEMS to proper Item type\r\n          const itemsWithProperType: { [id: string]: Item } = {};\r\n          \r\n          // Process each item from the constants\r\n          Object.entries(ITEMS).forEach(([key, itemData]) => {\r\n            // Create base item without optional properties\r\n            const baseItemData: any = {\r\n              id: itemData.id,\r\n              name: itemData.name,\r\n              quantity: itemData.quantity || 1,\r\n              type: itemData.type === 'resource' ? 'resource' : 'equipment',\r\n            };\r\n            \r\n            // Add optional properties only if they exist\r\n            if (itemData.sellPrice !== undefined) {\r\n              baseItemData.sellPrice = itemData.sellPrice;\r\n            }\r\n            \r\n            if (itemData.buyPrice !== undefined) {\r\n              baseItemData.buyPrice = itemData.buyPrice;\r\n            }\r\n            \r\n            // Handle slot carefully\r\n            if (itemData.slot === 'weapon' || itemData.slot === 'armor') {\r\n              baseItemData.slot = itemData.slot;\r\n            }\r\n            \r\n            // Add stats if they exist\r\n            if (itemData.stats) {\r\n              baseItemData.stats = {\r\n                ...itemData.stats\r\n              };\r\n            }\r\n            \r\n            // Add crafting recipe if it exists - using type assertion to avoid TypeScript error\r\n            if ((itemData as any).craftingRecipe) {\r\n              baseItemData.craftingRecipe = (itemData as any).craftingRecipe;\r\n            }\r\n            \r\n            // Cast to Item type\r\n            itemsWithProperType[key] = baseItemData as Item;\r\n          });\r\n\r\n          // Create mock inventory\r\n          const mockInventory: { [id: string]: Item } = {\r\n            [ITEM_IDS.LOGS]: { ...itemsWithProperType[ITEM_IDS.LOGS], quantity: 5 },\r\n            [ITEM_IDS.RAW_FISH]: { ...itemsWithProperType[ITEM_IDS.RAW_FISH], quantity: 3 }\r\n          };\r\n\r\n          const mockData: GameState = {\r\n            player: {\r\n              id: 'player1',\r\n              gold: 100,\r\n              lastUpdate: Date.now(),\r\n              skills: mockSkills,\r\n              inventory: mockInventory,\r\n              equipment: {},\r\n              combat: {\r\n                isFighting: false\r\n              }\r\n            }\r\n          };\r\n          \r\n          setGameState(mockData);\r\n          setLoading(false);\r\n        }, 500);\r\n      } catch (error) {\r\n        console.error('Error fetching game data:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchGameData();\r\n  }, []);\r\n\r\n  const updateGameState = (updater: (prevState: GameState | null) => GameState | null) => {\r\n    setGameState(updater);\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState, loading, updateGameState }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
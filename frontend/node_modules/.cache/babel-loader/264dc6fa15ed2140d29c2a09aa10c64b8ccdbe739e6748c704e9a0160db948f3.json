{"ast":null,"code":"import{useState,useCallback,useEffect}from'react';import{useGameContext}from'../context/GameContext';import{useInventory}from'./useInventory';import{SKILL_IDS,ENEMIES,ITEMS}from'../constants';/**\n * useCombat hook - Manages combat-related state and operations\n */export const useCombat=()=>{const{gameState,updateGameState}=useGameContext();const{addItem}=useInventory();// Use enemies from constants rather than mock data\nconst[enemies]=useState(Object.values(ENEMIES));// Local state for combat\nconst[currentEnemy,setCurrentEnemy]=useState(null);const[combatLog,setCombatLog]=useState([]);const[combatInterval,setCombatInterval]=useState(null);const[combatTick,setCombatTick]=useState(0);// Used to trigger combat animations\n// Compute player stats from the game state\nconst getPlayerStats=useCallback(()=>{var _gameState$player$ski,_gameState$player$ski2,_gameState$player$ski3,_gameState$player$ski4,_gameState$player$ski5,_gameState$player$equ,_gameState$player$equ2,_gameState$player$equ3,_gameState$player$equ4,_gameState$player$equ5,_gameState$player$equ6;if(!(gameState!==null&&gameState!==void 0&&gameState.player))return{attack:1,strength:1,defense:1,health:10,maxHealth:10};const attack=((_gameState$player$ski=gameState.player.skills[SKILL_IDS.ATTACK])===null||_gameState$player$ski===void 0?void 0:_gameState$player$ski.level)||1;const strength=((_gameState$player$ski2=gameState.player.skills[SKILL_IDS.STRENGTH])===null||_gameState$player$ski2===void 0?void 0:_gameState$player$ski2.level)||1;const defense=((_gameState$player$ski3=gameState.player.skills[SKILL_IDS.DEFENCE])===null||_gameState$player$ski3===void 0?void 0:_gameState$player$ski3.level)||1;// Health is stored as XP in hitpoints skill\n// If not defined or <= 0, default to 10 (minimum health)\nconst health=Math.max(10,((_gameState$player$ski4=gameState.player.skills[SKILL_IDS.HITPOINTS])===null||_gameState$player$ski4===void 0?void 0:_gameState$player$ski4.xp)||10);// Max health calculation: 10 base + 4 per hitpoints level\nconst hitpointsLevel=((_gameState$player$ski5=gameState.player.skills[SKILL_IDS.HITPOINTS])===null||_gameState$player$ski5===void 0?void 0:_gameState$player$ski5.level)||1;const maxHealth=10+hitpointsLevel*4;// Add equipment bonuses\nconst attackBonus=((_gameState$player$equ=gameState.player.equipment.weapon)===null||_gameState$player$equ===void 0?void 0:(_gameState$player$equ2=_gameState$player$equ.stats)===null||_gameState$player$equ2===void 0?void 0:_gameState$player$equ2.attackBonus)||0;const strengthBonus=((_gameState$player$equ3=gameState.player.equipment.weapon)===null||_gameState$player$equ3===void 0?void 0:(_gameState$player$equ4=_gameState$player$equ3.stats)===null||_gameState$player$equ4===void 0?void 0:_gameState$player$equ4.strengthBonus)||0;const defenseBonus=((_gameState$player$equ5=gameState.player.equipment.armor)===null||_gameState$player$equ5===void 0?void 0:(_gameState$player$equ6=_gameState$player$equ5.stats)===null||_gameState$player$equ6===void 0?void 0:_gameState$player$equ6.defenseBonus)||0;return{attack:attack+attackBonus,strength:strength+strengthBonus,defense:defense+defenseBonus,health,maxHealth};},[gameState]);// Calculate combat stats\nconst playerStats=getPlayerStats();/**\n   * Add a message to the combat log\n   */const addLogMessage=useCallback(message=>{setCombatLog(prevLog=>[message,...prevLog].slice(0,50));// Keep last 50 messages\n},[]);/**\n   * Calculate damage based on attacker and defender stats\n   */const calculateDamage=useCallback((attackerAttack,attackerStrength,defenderDefense)=>{// Calculate hit chance - OSRS-like formula\n// Higher attack vs defense = better chance to hit\nconst effectiveAttack=attackerAttack+8;// Add a base value for better early game hit chance\nconst hitChance=Math.min(0.95,Math.max(0.1,effectiveAttack/(effectiveAttack+defenderDefense)));const didHit=Math.random()<hitChance;if(!didHit)return 0;// Base damage calculation - OSRS-inspired\n// Higher strength = higher potential damage\nconst maxHit=Math.floor(0.5+attackerStrength*0.1);const damage=Math.floor(Math.random()*(maxHit+1));return Math.max(1,damage);// Always hit at least 1 if the attack lands\n},[]);/**\n   * Process a single combat round\n   */const processCombatRound=useCallback(()=>{if(!currentEnemy||!(gameState!==null&&gameState!==void 0&&gameState.player))return;// Update combat tick for animations\nsetCombatTick(prev=>prev+1);// Get current player stats\nconst stats=getPlayerStats();// Player attacks enemy\nconst playerDamage=calculateDamage(stats.attack,stats.strength,currentEnemy.defense);if(playerDamage>0){// Update enemy health\nconst newEnemyHealth=Math.max(0,currentEnemy.health-playerDamage);setCurrentEnemy(prev=>prev?{...prev,health:newEnemyHealth}:null);// Add attack message to combat log\naddLogMessage(`You hit the ${currentEnemy.name} for ${playerDamage} damage!`);// Award combat XP\nupdateGameState(prevState=>{if(!prevState)return prevState;const newState=JSON.parse(JSON.stringify(prevState));// Add XP to Attack and Strength\nif(newState.player.skills[SKILL_IDS.ATTACK]){const attackXp=playerDamage*4;// 4 XP per damage point\nconst currentAttackXp=newState.player.skills[SKILL_IDS.ATTACK].xp||0;newState.player.skills[SKILL_IDS.ATTACK].xp=currentAttackXp+attackXp;// Check for level ups\nconst attackLevel=newState.player.skills[SKILL_IDS.ATTACK].level;const xpForNextLevel=calculateXpForNextLevel(attackLevel);if(newState.player.skills[SKILL_IDS.ATTACK].xp>=xpForNextLevel){newState.player.skills[SKILL_IDS.ATTACK].level+=1;addLogMessage(`Congratulations! Your Attack level is now ${newState.player.skills[SKILL_IDS.ATTACK].level}`);}}if(newState.player.skills[SKILL_IDS.STRENGTH]){const strengthXp=playerDamage*4;// 4 XP per damage point\nconst currentStrengthXp=newState.player.skills[SKILL_IDS.STRENGTH].xp||0;newState.player.skills[SKILL_IDS.STRENGTH].xp=currentStrengthXp+strengthXp;// Check for level ups\nconst strengthLevel=newState.player.skills[SKILL_IDS.STRENGTH].level;const xpForNextLevel=calculateXpForNextLevel(strengthLevel);if(newState.player.skills[SKILL_IDS.STRENGTH].xp>=xpForNextLevel){newState.player.skills[SKILL_IDS.STRENGTH].level+=1;addLogMessage(`Congratulations! Your Strength level is now ${newState.player.skills[SKILL_IDS.STRENGTH].level}`);}}return newState;});// Check if enemy is defeated\nif(newEnemyHealth<=0){handleEnemyDefeated(currentEnemy);return;}}else{addLogMessage(`Your attack missed the ${currentEnemy.name}!`);}// Enemy attacks player\nconst enemyDamage=calculateDamage(currentEnemy.attack,currentEnemy.attack,stats.defense);if(enemyDamage>0){addLogMessage(`The ${currentEnemy.name} hits you for ${enemyDamage} damage!`);// Update player health and award Defense XP\nupdateGameState(prevState=>{if(!prevState)return prevState;const newState=JSON.parse(JSON.stringify(prevState));// Add XP to Defense (positive XP for being hit)\nif(newState.player.skills[SKILL_IDS.DEFENCE]){const defenseXp=enemyDamage*4;// 4 XP per damage point\nconst currentDefenseXp=newState.player.skills[SKILL_IDS.DEFENCE].xp||0;newState.player.skills[SKILL_IDS.DEFENCE].xp=currentDefenseXp+defenseXp;// Check for level ups\nconst defenseLevel=newState.player.skills[SKILL_IDS.DEFENCE].level;const xpForNextLevel=calculateXpForNextLevel(defenseLevel);if(newState.player.skills[SKILL_IDS.DEFENCE].xp>=xpForNextLevel){newState.player.skills[SKILL_IDS.DEFENCE].level+=1;addLogMessage(`Congratulations! Your Defense level is now ${newState.player.skills[SKILL_IDS.DEFENCE].level}`);}}// Reduce Hitpoints XP (as damage)\nif(newState.player.skills[SKILL_IDS.HITPOINTS]){const currentHitpointsXp=newState.player.skills[SKILL_IDS.HITPOINTS].xp||10;newState.player.skills[SKILL_IDS.HITPOINTS].xp=Math.max(0,currentHitpointsXp-enemyDamage);// Check if player is defeated\nif(newState.player.skills[SKILL_IDS.HITPOINTS].xp<=0){handlePlayerDefeated();}}return newState;});}else{addLogMessage(`The ${currentEnemy.name}'s attack missed you!`);}},[currentEnemy,gameState,getPlayerStats,calculateDamage,addLogMessage,updateGameState]);/**\n   * Calculate XP required for next level using OSRS-inspired formula\n   */const calculateXpForNextLevel=useCallback(level=>{return Math.floor(100*level**1.5);},[]);/**\n   * Start combat with an enemy\n   */const startCombat=useCallback(enemyId=>{// Stop any existing combat\nif(combatInterval){clearInterval(combatInterval);}// Find the enemy\nconst enemy=enemies.find(e=>e.id===enemyId);if(!enemy)return;// Clone the enemy to avoid modifying the original\nconst enemyClone={...enemy,health:enemy.maxHealth// Reset health\n};setCurrentEnemy(enemyClone);setCombatLog([`Combat started with ${enemyClone.name}!`]);// Update game state\nupdateGameState(prevState=>{if(!prevState)return prevState;return{...prevState,player:{...prevState.player,combat:{currentEnemy:enemyClone,isFighting:true}}};});// Start combat loop - process combat every 2 seconds\nconst interval=setInterval(processCombatRound,2000);setCombatInterval(interval);return()=>clearInterval(interval);},[enemies,combatInterval,updateGameState,processCombatRound]);/**\n   * Handle enemy defeat and loot\n   */const handleEnemyDefeated=useCallback(enemy=>{// Stop combat loop\nif(combatInterval){clearInterval(combatInterval);setCombatInterval(null);}addLogMessage(`You defeated the ${enemy.name}!`);// Process loot drops\nconst lootMessages=[];const lootItems=[];enemy.lootTable.forEach(loot=>{if(Math.random()<=loot.chance){var _ITEMS$loot$itemId,_ITEMS$loot$itemId2,_ITEMS$loot$itemId3,_ITEMS$loot$itemId4;lootMessages.push(`You received ${loot.quantity} ${loot.itemId}!`);// Use the item constants directly\nconst itemName=((_ITEMS$loot$itemId=ITEMS[loot.itemId])===null||_ITEMS$loot$itemId===void 0?void 0:_ITEMS$loot$itemId.name)||loot.itemId;lootItems.push({id:loot.itemId,name:itemName,quantity:loot.quantity,type:((_ITEMS$loot$itemId2=ITEMS[loot.itemId])===null||_ITEMS$loot$itemId2===void 0?void 0:_ITEMS$loot$itemId2.type)||'resource',sellPrice:((_ITEMS$loot$itemId3=ITEMS[loot.itemId])===null||_ITEMS$loot$itemId3===void 0?void 0:_ITEMS$loot$itemId3.sellPrice)||5,stats:(_ITEMS$loot$itemId4=ITEMS[loot.itemId])===null||_ITEMS$loot$itemId4===void 0?void 0:_ITEMS$loot$itemId4.stats});}});// Award gold\nconst goldAmount=Math.floor(Math.random()*(enemy.maxHealth/2))+5;lootMessages.push(`You found ${goldAmount} gold!`);// Update player state with loot and gold\nupdateGameState(prevState=>{if(!prevState)return prevState;const newState=JSON.parse(JSON.stringify(prevState));// Add gold\nnewState.player.gold+=goldAmount;// Add items to inventory - directly update inventory in the state\nlootItems.forEach(item=>{if(newState.player.inventory[item.id]){newState.player.inventory[item.id].quantity+=item.quantity;}else{newState.player.inventory[item.id]=item;}});// Reset combat state\nnewState.player.combat={isFighting:false,currentEnemy:undefined};return newState;});// Display loot messages\nlootMessages.forEach(msg=>addLogMessage(msg));// Reset current enemy\nsetCurrentEnemy(null);},[combatInterval,addLogMessage,updateGameState]);/**\n   * Handle player defeat\n   */const handlePlayerDefeated=useCallback(()=>{// Stop combat loop\nif(combatInterval){clearInterval(combatInterval);setCombatInterval(null);}addLogMessage('You have been defeated!');// Update player state - reset combat and restore some health\nupdateGameState(prevState=>{if(!prevState)return prevState;const newState=JSON.parse(JSON.stringify(prevState));// Reset combat state\nnewState.player.combat={isFighting:false,currentEnemy:undefined};// Restore some hitpoints - 25% of max health\nif(newState.player.skills[SKILL_IDS.HITPOINTS]){const hitpointsLevel=newState.player.skills[SKILL_IDS.HITPOINTS].level||1;const maxHealth=10+hitpointsLevel*4;newState.player.skills[SKILL_IDS.HITPOINTS].xp=Math.floor(maxHealth*0.25);addLogMessage('You wake up with some health restored.');}return newState;});// Reset current enemy\nsetCurrentEnemy(null);},[combatInterval,addLogMessage,updateGameState]);/**\n   * Flee from combat\n   */const fleeCombat=useCallback(()=>{if(!currentEnemy)return;// Higher defense gives better flee chance\nconst playerDefense=playerStats.defense;const enemyAttack=currentEnemy.attack;const baseFleeProbability=0.5;// 50% base chance\n// Defense helps flee, enemy attack makes it harder\nconst fleeChance=Math.min(0.95,Math.max(0.3,baseFleeProbability+(playerDefense-enemyAttack)*0.05));if(Math.random()<=fleeChance){addLogMessage('You successfully fled from combat!');// Stop combat loop\nif(combatInterval){clearInterval(combatInterval);setCombatInterval(null);}// Update player state\nupdateGameState(prevState=>{if(!prevState)return prevState;return{...prevState,player:{...prevState.player,combat:{isFighting:false,currentEnemy:undefined}}};});// Reset current enemy\nsetCurrentEnemy(null);}else{addLogMessage('You failed to flee!');// Enemy gets a free attack\nprocessCombatRound();}},[currentEnemy,playerStats,combatInterval,addLogMessage,updateGameState,processCombatRound]);// Clean up interval on unmount\nuseEffect(()=>{return()=>{if(combatInterval){clearInterval(combatInterval);}};},[combatInterval]);return{enemies,currentEnemy,isFighting:!!currentEnemy,playerStats,combatLog,combatTick,// Expose combat tick for animations\nstartCombat,fleeCombat,processCombatRound// Exposed for manual combat if needed\n};};","map":{"version":3,"names":["useState","useCallback","useEffect","useGameContext","useInventory","SKILL_IDS","ENEMIES","ITEMS","useCombat","gameState","updateGameState","addItem","enemies","Object","values","currentEnemy","setCurrentEnemy","combatLog","setCombatLog","combatInterval","setCombatInterval","combatTick","setCombatTick","getPlayerStats","_gameState$player$ski","_gameState$player$ski2","_gameState$player$ski3","_gameState$player$ski4","_gameState$player$ski5","_gameState$player$equ","_gameState$player$equ2","_gameState$player$equ3","_gameState$player$equ4","_gameState$player$equ5","_gameState$player$equ6","player","attack","strength","defense","health","maxHealth","skills","ATTACK","level","STRENGTH","DEFENCE","Math","max","HITPOINTS","xp","hitpointsLevel","attackBonus","equipment","weapon","stats","strengthBonus","defenseBonus","armor","playerStats","addLogMessage","message","prevLog","slice","calculateDamage","attackerAttack","attackerStrength","defenderDefense","effectiveAttack","hitChance","min","didHit","random","maxHit","floor","damage","processCombatRound","prev","playerDamage","newEnemyHealth","name","prevState","newState","JSON","parse","stringify","attackXp","currentAttackXp","attackLevel","xpForNextLevel","calculateXpForNextLevel","strengthXp","currentStrengthXp","strengthLevel","handleEnemyDefeated","enemyDamage","defenseXp","currentDefenseXp","defenseLevel","currentHitpointsXp","handlePlayerDefeated","startCombat","enemyId","clearInterval","enemy","find","e","id","enemyClone","combat","isFighting","interval","setInterval","lootMessages","lootItems","lootTable","forEach","loot","chance","_ITEMS$loot$itemId","_ITEMS$loot$itemId2","_ITEMS$loot$itemId3","_ITEMS$loot$itemId4","push","quantity","itemId","itemName","type","sellPrice","goldAmount","gold","item","inventory","undefined","msg","fleeCombat","playerDefense","enemyAttack","baseFleeProbability","fleeChance"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/hooks/useCombat.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { useInventory } from './useInventory';\nimport { Enemy } from '../types';\nimport { SKILL_IDS, ENEMIES, ITEM_IDS, ITEMS } from '../constants';\n\n/**\n * useCombat hook - Manages combat-related state and operations\n */\nexport const useCombat = () => {\n  const { gameState, updateGameState } = useGameContext();\n  const { addItem } = useInventory();\n  \n  // Use enemies from constants rather than mock data\n  const [enemies] = useState<Enemy[]>(Object.values(ENEMIES));\n  \n  // Local state for combat\n  const [currentEnemy, setCurrentEnemy] = useState<Enemy | null>(null);\n  const [combatLog, setCombatLog] = useState<string[]>([]);\n  const [combatInterval, setCombatInterval] = useState<NodeJS.Timeout | null>(null);\n  const [combatTick, setCombatTick] = useState<number>(0); // Used to trigger combat animations\n  \n  // Compute player stats from the game state\n  const getPlayerStats = useCallback(() => {\n    if (!gameState?.player) return { attack: 1, strength: 1, defense: 1, health: 10, maxHealth: 10 };\n    \n    const attack = gameState.player.skills[SKILL_IDS.ATTACK]?.level || 1;\n    const strength = gameState.player.skills[SKILL_IDS.STRENGTH]?.level || 1;\n    const defense = gameState.player.skills[SKILL_IDS.DEFENCE]?.level || 1;\n    \n    // Health is stored as XP in hitpoints skill\n    // If not defined or <= 0, default to 10 (minimum health)\n    const health = Math.max(10, gameState.player.skills[SKILL_IDS.HITPOINTS]?.xp || 10);\n    \n    // Max health calculation: 10 base + 4 per hitpoints level\n    const hitpointsLevel = gameState.player.skills[SKILL_IDS.HITPOINTS]?.level || 1;\n    const maxHealth = 10 + (hitpointsLevel * 4);\n    \n    // Add equipment bonuses\n    const attackBonus = gameState.player.equipment.weapon?.stats?.attackBonus || 0;\n    const strengthBonus = gameState.player.equipment.weapon?.stats?.strengthBonus || 0;\n    const defenseBonus = gameState.player.equipment.armor?.stats?.defenseBonus || 0;\n    \n    return {\n      attack: attack + attackBonus,\n      strength: strength + strengthBonus,\n      defense: defense + defenseBonus,\n      health,\n      maxHealth\n    };\n  }, [gameState]);\n  \n  // Calculate combat stats\n  const playerStats = getPlayerStats();\n  \n  /**\n   * Add a message to the combat log\n   */\n  const addLogMessage = useCallback((message: string) => {\n    setCombatLog(prevLog => [message, ...prevLog].slice(0, 50)); // Keep last 50 messages\n  }, []);\n  \n  /**\n   * Calculate damage based on attacker and defender stats\n   */\n  const calculateDamage = useCallback((attackerAttack: number, attackerStrength: number, defenderDefense: number) => {\n    // Calculate hit chance - OSRS-like formula\n    // Higher attack vs defense = better chance to hit\n    const effectiveAttack = attackerAttack + 8; // Add a base value for better early game hit chance\n    const hitChance = Math.min(0.95, Math.max(0.1, effectiveAttack / (effectiveAttack + defenderDefense)));\n    const didHit = Math.random() < hitChance;\n    \n    if (!didHit) return 0;\n    \n    // Base damage calculation - OSRS-inspired\n    // Higher strength = higher potential damage\n    const maxHit = Math.floor(0.5 + (attackerStrength * 0.1));\n    const damage = Math.floor(Math.random() * (maxHit + 1));\n    \n    return Math.max(1, damage); // Always hit at least 1 if the attack lands\n  }, []);\n  \n  /**\n   * Process a single combat round\n   */\n  const processCombatRound = useCallback(() => {\n    if (!currentEnemy || !gameState?.player) return;\n    \n    // Update combat tick for animations\n    setCombatTick(prev => prev + 1);\n    \n    // Get current player stats\n    const stats = getPlayerStats();\n    \n    // Player attacks enemy\n    const playerDamage = calculateDamage(stats.attack, stats.strength, currentEnemy.defense);\n    \n    if (playerDamage > 0) {\n      // Update enemy health\n      const newEnemyHealth = Math.max(0, currentEnemy.health - playerDamage);\n      setCurrentEnemy(prev => prev ? { ...prev, health: newEnemyHealth } : null);\n      \n      // Add attack message to combat log\n      addLogMessage(`You hit the ${currentEnemy.name} for ${playerDamage} damage!`);\n      \n      // Award combat XP\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        \n        const newState = JSON.parse(JSON.stringify(prevState));\n        \n        // Add XP to Attack and Strength\n        if (newState.player.skills[SKILL_IDS.ATTACK]) {\n          const attackXp = playerDamage * 4; // 4 XP per damage point\n          const currentAttackXp = newState.player.skills[SKILL_IDS.ATTACK].xp || 0;\n          newState.player.skills[SKILL_IDS.ATTACK].xp = currentAttackXp + attackXp;\n          \n          // Check for level ups\n          const attackLevel = newState.player.skills[SKILL_IDS.ATTACK].level;\n          const xpForNextLevel = calculateXpForNextLevel(attackLevel);\n          if (newState.player.skills[SKILL_IDS.ATTACK].xp >= xpForNextLevel) {\n            newState.player.skills[SKILL_IDS.ATTACK].level += 1;\n            addLogMessage(`Congratulations! Your Attack level is now ${newState.player.skills[SKILL_IDS.ATTACK].level}`);\n          }\n        }\n        \n        if (newState.player.skills[SKILL_IDS.STRENGTH]) {\n          const strengthXp = playerDamage * 4; // 4 XP per damage point\n          const currentStrengthXp = newState.player.skills[SKILL_IDS.STRENGTH].xp || 0;\n          newState.player.skills[SKILL_IDS.STRENGTH].xp = currentStrengthXp + strengthXp;\n          \n          // Check for level ups\n          const strengthLevel = newState.player.skills[SKILL_IDS.STRENGTH].level;\n          const xpForNextLevel = calculateXpForNextLevel(strengthLevel);\n          if (newState.player.skills[SKILL_IDS.STRENGTH].xp >= xpForNextLevel) {\n            newState.player.skills[SKILL_IDS.STRENGTH].level += 1;\n            addLogMessage(`Congratulations! Your Strength level is now ${newState.player.skills[SKILL_IDS.STRENGTH].level}`);\n          }\n        }\n        \n        return newState;\n      });\n      \n      // Check if enemy is defeated\n      if (newEnemyHealth <= 0) {\n        handleEnemyDefeated(currentEnemy);\n        return;\n      }\n    } else {\n      addLogMessage(`Your attack missed the ${currentEnemy.name}!`);\n    }\n    \n    // Enemy attacks player\n    const enemyDamage = calculateDamage(currentEnemy.attack, currentEnemy.attack, stats.defense);\n    \n    if (enemyDamage > 0) {\n      addLogMessage(`The ${currentEnemy.name} hits you for ${enemyDamage} damage!`);\n      \n      // Update player health and award Defense XP\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        \n        const newState = JSON.parse(JSON.stringify(prevState));\n        \n        // Add XP to Defense (positive XP for being hit)\n        if (newState.player.skills[SKILL_IDS.DEFENCE]) {\n          const defenseXp = enemyDamage * 4; // 4 XP per damage point\n          const currentDefenseXp = newState.player.skills[SKILL_IDS.DEFENCE].xp || 0;\n          newState.player.skills[SKILL_IDS.DEFENCE].xp = currentDefenseXp + defenseXp;\n          \n          // Check for level ups\n          const defenseLevel = newState.player.skills[SKILL_IDS.DEFENCE].level;\n          const xpForNextLevel = calculateXpForNextLevel(defenseLevel);\n          if (newState.player.skills[SKILL_IDS.DEFENCE].xp >= xpForNextLevel) {\n            newState.player.skills[SKILL_IDS.DEFENCE].level += 1;\n            addLogMessage(`Congratulations! Your Defense level is now ${newState.player.skills[SKILL_IDS.DEFENCE].level}`);\n          }\n        }\n        \n        // Reduce Hitpoints XP (as damage)\n        if (newState.player.skills[SKILL_IDS.HITPOINTS]) {\n          const currentHitpointsXp = newState.player.skills[SKILL_IDS.HITPOINTS].xp || 10;\n          newState.player.skills[SKILL_IDS.HITPOINTS].xp = Math.max(0, currentHitpointsXp - enemyDamage);\n          \n          // Check if player is defeated\n          if (newState.player.skills[SKILL_IDS.HITPOINTS].xp <= 0) {\n            handlePlayerDefeated();\n          }\n        }\n        \n        return newState;\n      });\n    } else {\n      addLogMessage(`The ${currentEnemy.name}'s attack missed you!`);\n    }\n  }, [currentEnemy, gameState, getPlayerStats, calculateDamage, addLogMessage, updateGameState]);\n  \n  /**\n   * Calculate XP required for next level using OSRS-inspired formula\n   */\n  const calculateXpForNextLevel = useCallback((level: number): number => {\n    return Math.floor(100 * (level ** 1.5));\n  }, []);\n  \n  /**\n   * Start combat with an enemy\n   */\n  const startCombat = useCallback((enemyId: string) => {\n    // Stop any existing combat\n    if (combatInterval) {\n      clearInterval(combatInterval);\n    }\n    \n    // Find the enemy\n    const enemy = enemies.find(e => e.id === enemyId);\n    if (!enemy) return;\n    \n    // Clone the enemy to avoid modifying the original\n    const enemyClone: Enemy = {\n      ...enemy,\n      health: enemy.maxHealth // Reset health\n    };\n    \n    setCurrentEnemy(enemyClone);\n    setCombatLog([`Combat started with ${enemyClone.name}!`]);\n    \n    // Update game state\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      \n      return {\n        ...prevState,\n        player: {\n          ...prevState.player,\n          combat: {\n            currentEnemy: enemyClone,\n            isFighting: true\n          }\n        }\n      };\n    });\n    \n    // Start combat loop - process combat every 2 seconds\n    const interval = setInterval(processCombatRound, 2000);\n    setCombatInterval(interval);\n    \n    return () => clearInterval(interval);\n  }, [enemies, combatInterval, updateGameState, processCombatRound]);\n  \n  /**\n   * Handle enemy defeat and loot\n   */\n  const handleEnemyDefeated = useCallback((enemy: Enemy) => {\n    // Stop combat loop\n    if (combatInterval) {\n      clearInterval(combatInterval);\n      setCombatInterval(null);\n    }\n    \n    addLogMessage(`You defeated the ${enemy.name}!`);\n    \n    // Process loot drops\n    const lootMessages: string[] = [];\n    const lootItems: any[] = [];\n    \n    enemy.lootTable.forEach(loot => {\n      if (Math.random() <= loot.chance) {\n        lootMessages.push(`You received ${loot.quantity} ${loot.itemId}!`);\n        \n        // Use the item constants directly\n        const itemName = ITEMS[loot.itemId]?.name || loot.itemId;\n        \n        lootItems.push({\n          id: loot.itemId,\n          name: itemName,\n          quantity: loot.quantity,\n          type: ITEMS[loot.itemId]?.type || 'resource',\n          sellPrice: ITEMS[loot.itemId]?.sellPrice || 5,\n          stats: ITEMS[loot.itemId]?.stats\n        });\n      }\n    });\n    \n    // Award gold\n    const goldAmount = Math.floor(Math.random() * (enemy.maxHealth / 2)) + 5;\n    lootMessages.push(`You found ${goldAmount} gold!`);\n    \n    // Update player state with loot and gold\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      \n      const newState = JSON.parse(JSON.stringify(prevState));\n      \n      // Add gold\n      newState.player.gold += goldAmount;\n      \n      // Add items to inventory - directly update inventory in the state\n      lootItems.forEach(item => {\n        if (newState.player.inventory[item.id]) {\n          newState.player.inventory[item.id].quantity += item.quantity;\n        } else {\n          newState.player.inventory[item.id] = item;\n        }\n      });\n      \n      // Reset combat state\n      newState.player.combat = {\n        isFighting: false,\n        currentEnemy: undefined\n      };\n      \n      return newState;\n    });\n    \n    // Display loot messages\n    lootMessages.forEach(msg => addLogMessage(msg));\n    \n    // Reset current enemy\n    setCurrentEnemy(null);\n  }, [combatInterval, addLogMessage, updateGameState]);\n  \n  /**\n   * Handle player defeat\n   */\n  const handlePlayerDefeated = useCallback(() => {\n    // Stop combat loop\n    if (combatInterval) {\n      clearInterval(combatInterval);\n      setCombatInterval(null);\n    }\n    \n    addLogMessage('You have been defeated!');\n    \n    // Update player state - reset combat and restore some health\n    updateGameState(prevState => {\n      if (!prevState) return prevState;\n      \n      const newState = JSON.parse(JSON.stringify(prevState));\n      \n      // Reset combat state\n      newState.player.combat = {\n        isFighting: false,\n        currentEnemy: undefined\n      };\n      \n      // Restore some hitpoints - 25% of max health\n      if (newState.player.skills[SKILL_IDS.HITPOINTS]) {\n        const hitpointsLevel = newState.player.skills[SKILL_IDS.HITPOINTS].level || 1;\n        const maxHealth = 10 + (hitpointsLevel * 4);\n        newState.player.skills[SKILL_IDS.HITPOINTS].xp = Math.floor(maxHealth * 0.25);\n        addLogMessage('You wake up with some health restored.');\n      }\n      \n      return newState;\n    });\n    \n    // Reset current enemy\n    setCurrentEnemy(null);\n  }, [combatInterval, addLogMessage, updateGameState]);\n  \n  /**\n   * Flee from combat\n   */\n  const fleeCombat = useCallback(() => {\n    if (!currentEnemy) return;\n    \n    // Higher defense gives better flee chance\n    const playerDefense = playerStats.defense;\n    const enemyAttack = currentEnemy.attack;\n    const baseFleeProbability = 0.5; // 50% base chance\n    \n    // Defense helps flee, enemy attack makes it harder\n    const fleeChance = Math.min(0.95, Math.max(0.3, baseFleeProbability + (playerDefense - enemyAttack) * 0.05));\n    \n    if (Math.random() <= fleeChance) {\n      addLogMessage('You successfully fled from combat!');\n      \n      // Stop combat loop\n      if (combatInterval) {\n        clearInterval(combatInterval);\n        setCombatInterval(null);\n      }\n      \n      // Update player state\n      updateGameState(prevState => {\n        if (!prevState) return prevState;\n        \n        return {\n          ...prevState,\n          player: {\n            ...prevState.player,\n            combat: {\n              isFighting: false,\n              currentEnemy: undefined\n            }\n          }\n        };\n      });\n      \n      // Reset current enemy\n      setCurrentEnemy(null);\n    } else {\n      addLogMessage('You failed to flee!');\n      \n      // Enemy gets a free attack\n      processCombatRound();\n    }\n  }, [currentEnemy, playerStats, combatInterval, addLogMessage, updateGameState, processCombatRound]);\n  \n  // Clean up interval on unmount\n  useEffect(() => {\n    return () => {\n      if (combatInterval) {\n        clearInterval(combatInterval);\n      }\n    };\n  }, [combatInterval]);\n  \n  return {\n    enemies,\n    currentEnemy,\n    isFighting: !!currentEnemy,\n    playerStats,\n    combatLog,\n    combatTick, // Expose combat tick for animations\n    startCombat,\n    fleeCombat,\n    processCombatRound // Exposed for manual combat if needed\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
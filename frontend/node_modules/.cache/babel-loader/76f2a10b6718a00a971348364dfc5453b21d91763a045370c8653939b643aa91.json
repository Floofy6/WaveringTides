{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\OneDrive\\\\Desktop\\\\coding\\\\WaveringTides\\\\frontend\\\\src\\\\features\\\\skills\\\\SkillProgressBar.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Import these functions from a shared location\nconst calculateXpForNextLevel = currentLevel => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  const MAX_LEVEL = 99;\n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  return Math.floor(Math.pow(2, currentLevel / 7) * currentLevel * 300 / 4);\n};\nconst totalXpForLevel = level => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\r\n * Format a number with commas for better readability\r\n */\nconst formatNumber = num => {\n  return num.toLocaleString();\n};\n\n/**\r\n * SkillProgressBar component - Visual representation of skill progression\r\n */\nconst SkillProgressBar = ({\n  skill\n}) => {\n  // If we're at max level, show 100%\n  if (skill.level >= 99) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"skill-progress-fill\",\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-text\",\n        children: \"Max Level (13,034,431 XP)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Calculate current level's total XP needed\n  const currentLevelTotalXp = totalXpForLevel(skill.level);\n\n  // Calculate XP needed for next level\n  const xpForNextLevel = calculateXpForNextLevel(skill.level);\n\n  // Current progress within this level - ensure we use the proper property\n  // First check if skill.xp exists and use it directly if it does\n  let currentLevelXp = 0;\n  if (skill.totalXp !== undefined) {\n    // If totalXp exists, calculate current level XP by subtracting total XP for current level\n    currentLevelXp = Math.max(0, skill.totalXp - currentLevelTotalXp);\n  } else if (skill.xp !== undefined) {\n    // If only xp exists, use it directly\n    currentLevelXp = Math.max(0, skill.xp);\n  }\n\n  // For debugging - log values to console\n  console.log(`Skill: ${skill.name}, Level: ${skill.level}, XP: ${skill.xp}, Total XP: ${skill.totalXp}`);\n  console.log(`Current Level Total XP: ${currentLevelTotalXp}, XP for Next Level: ${xpForNextLevel}`);\n  console.log(`Current Level XP: ${currentLevelXp}`);\n\n  // Ensure currentLevelXp is not negative\n  const displayXp = Math.max(0, currentLevelXp);\n\n  // Calculate percentage progress toward next level\n  const progressPercentage = Math.min(Math.floor(displayXp / xpForNextLevel * 100), 100);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-progress-fill\",\n        style: {\n          width: `${progressPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-progress-text\",\n      children: [formatNumber(Math.floor(displayXp)), \" / \", formatNumber(xpForNextLevel), \" XP (\", progressPercentage, \"%)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), skill.totalXp && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-total-xp\",\n      children: [\"Total XP: \", formatNumber(Math.floor(skill.totalXp))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_c = SkillProgressBar;\nexport default SkillProgressBar;\nvar _c;\n$RefreshReg$(_c, \"SkillProgressBar\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","calculateXpForNextLevel","currentLevel","MAX_LEVEL","Number","MAX_SAFE_INTEGER","Math","floor","pow","totalXpForLevel","level","total","i","formatNumber","num","toLocaleString","SkillProgressBar","skill","children","className","style","width","fileName","_jsxFileName","lineNumber","columnNumber","currentLevelTotalXp","xpForNextLevel","currentLevelXp","totalXp","undefined","max","xp","console","log","name","displayXp","progressPercentage","min","_c","$RefreshReg$"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/features/skills/SkillProgressBar.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Skill } from '../../types';\r\n\r\ninterface SkillProgressBarProps {\r\n  skill: Skill;\r\n}\r\n\r\n// Import these functions from a shared location\r\nconst calculateXpForNextLevel = (currentLevel: number): number => {\r\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\r\n  const MAX_LEVEL = 99;\r\n  \r\n  if (currentLevel >= MAX_LEVEL) {\r\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\r\n  }\r\n  \r\n  return Math.floor((Math.pow(2, (currentLevel) / 7) * currentLevel * 300) / 4);\r\n};\r\n\r\nconst totalXpForLevel = (level: number): number => {\r\n  let total = 0;\r\n  for (let i = 1; i < level; i++) {\r\n    total += calculateXpForNextLevel(i);\r\n  }\r\n  return total;\r\n};\r\n\r\n/**\r\n * Format a number with commas for better readability\r\n */\r\nconst formatNumber = (num: number): string => {\r\n  return num.toLocaleString();\r\n};\r\n\r\n/**\r\n * SkillProgressBar component - Visual representation of skill progression\r\n */\r\nconst SkillProgressBar: React.FC<SkillProgressBarProps> = ({ skill }) => {\r\n  // If we're at max level, show 100%\r\n  if (skill.level >= 99) {\r\n    return (\r\n      <div>\r\n        <div className=\"skill-progress-bar\">\r\n          <div className=\"skill-progress-fill\" style={{ width: '100%' }} />\r\n        </div>\r\n        <div className=\"skill-progress-text\">\r\n          Max Level (13,034,431 XP)\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Calculate current level's total XP needed\r\n  const currentLevelTotalXp = totalXpForLevel(skill.level);\r\n  \r\n  // Calculate XP needed for next level\r\n  const xpForNextLevel = calculateXpForNextLevel(skill.level);\r\n  \r\n  // Current progress within this level - ensure we use the proper property\r\n  // First check if skill.xp exists and use it directly if it does\r\n  let currentLevelXp = 0;\r\n  \r\n  if (skill.totalXp !== undefined) {\r\n    // If totalXp exists, calculate current level XP by subtracting total XP for current level\r\n    currentLevelXp = Math.max(0, skill.totalXp - currentLevelTotalXp);\r\n  } else if (skill.xp !== undefined) {\r\n    // If only xp exists, use it directly\r\n    currentLevelXp = Math.max(0, skill.xp);\r\n  }\r\n  \r\n  // For debugging - log values to console\r\n  console.log(`Skill: ${skill.name}, Level: ${skill.level}, XP: ${skill.xp}, Total XP: ${skill.totalXp}`);\r\n  console.log(`Current Level Total XP: ${currentLevelTotalXp}, XP for Next Level: ${xpForNextLevel}`);\r\n  console.log(`Current Level XP: ${currentLevelXp}`);\r\n  \r\n  // Ensure currentLevelXp is not negative\r\n  const displayXp = Math.max(0, currentLevelXp);\r\n  \r\n  // Calculate percentage progress toward next level\r\n  const progressPercentage = Math.min(Math.floor((displayXp / xpForNextLevel) * 100), 100);\r\n  \r\n  return (\r\n    <div>\r\n      <div className=\"skill-progress-bar\">\r\n        <div \r\n          className=\"skill-progress-fill\"\r\n          style={{ width: `${progressPercentage}%` }} \r\n        />\r\n      </div>\r\n      <div className=\"skill-progress-text\">\r\n        {formatNumber(Math.floor(displayXp))} / {formatNumber(xpForNextLevel)} XP ({progressPercentage}%)\r\n      </div>\r\n      {skill.totalXp && (\r\n        <div className=\"skill-total-xp\">\r\n          Total XP: {formatNumber(Math.floor(skill.totalXp))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SkillProgressBar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
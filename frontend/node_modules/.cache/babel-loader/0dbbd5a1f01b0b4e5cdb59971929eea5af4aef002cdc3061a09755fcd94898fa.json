{"ast":null,"code":"import React,{useState}from'react';import{useInventory}from'../../hooks/useInventory';import InventoryItem from'./InventoryItem';import QuantitySelector from'../../components/QuantitySelector';/**\r\n * InventoryPanel component - Displays and manages the player's inventory\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const InventoryPanel=()=>{const{inventory,sellItem,equipItem}=useInventory();const[selectedQuantity,setSelectedQuantity]=useState(1);const[filter,setFilter]=useState('all');const handleSellItem=itemId=>{sellItem(itemId,selectedQuantity);};const handleEquipItem=itemId=>{equipItem(itemId);};const filteredInventory=Object.entries(inventory).filter(_ref=>{let[_,item]=_ref;if(filter==='all')return true;return item.type===filter;});return/*#__PURE__*/_jsxs(\"div\",{className:\"inventory-panel\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"inventory-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Inventory\"}),/*#__PURE__*/_jsx(InventoryFilter,{currentFilter:filter,onFilterChange:setFilter})]}),/*#__PURE__*/_jsx(QuantitySelector,{value:selectedQuantity,onChange:setSelectedQuantity,max:99,label:\"Sell Quantity:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"inventory-grid\",children:filteredInventory.length===0?/*#__PURE__*/_jsx(EmptyInventoryMessage,{filter:filter}):filteredInventory.map(_ref2=>{let[itemId,item]=_ref2;return/*#__PURE__*/_jsx(InventoryItem,{item:item,selectedQuantity:selectedQuantity,onSell:()=>handleSellItem(itemId),onEquip:()=>handleEquipItem(itemId)},itemId);})})]});};/**\r\n * InventoryFilter component - Provides filtering options for inventory items\r\n */const InventoryFilter=_ref3=>{let{currentFilter,onFilterChange}=_ref3;return/*#__PURE__*/_jsxs(\"div\",{className:\"inventory-filter\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Show: \"}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:`filter-btn ${currentFilter==='all'?'active':''}`,onClick:()=>onFilterChange('all'),children:\"All\"}),/*#__PURE__*/_jsx(\"button\",{className:`filter-btn ${currentFilter==='resources'?'active':''}`,onClick:()=>onFilterChange('resources'),children:\"Resources\"}),/*#__PURE__*/_jsx(\"button\",{className:`filter-btn ${currentFilter==='equipment'?'active':''}`,onClick:()=>onFilterChange('equipment'),children:\"Equipment\"})]})]});};/**\r\n * EmptyInventoryMessage component - Displays appropriate message when inventory is empty\r\n */const EmptyInventoryMessage=_ref4=>{let{filter}=_ref4;const messages={all:\"Your inventory is empty.\",resources:\"You don't have any resources.\",equipment:\"You don't have any equipment.\"};return/*#__PURE__*/_jsx(\"p\",{className:\"empty-inventory\",children:messages[filter]});};export default InventoryPanel;","map":{"version":3,"names":["React","useState","useInventory","InventoryItem","QuantitySelector","jsx","_jsx","jsxs","_jsxs","InventoryPanel","inventory","sellItem","equipItem","selectedQuantity","setSelectedQuantity","filter","setFilter","handleSellItem","itemId","handleEquipItem","filteredInventory","Object","entries","_ref","_","item","type","className","children","InventoryFilter","currentFilter","onFilterChange","value","onChange","max","label","length","EmptyInventoryMessage","map","_ref2","onSell","onEquip","_ref3","onClick","_ref4","messages","all","resources","equipment"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/features/inventory/InventoryPanel.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useInventory } from '../../hooks/useInventory';\r\nimport { Item } from '../../types';\r\nimport InventoryItem from './InventoryItem';\r\nimport QuantitySelector from '../../components/QuantitySelector';\r\n\r\n/**\r\n * InventoryPanel component - Displays and manages the player's inventory\r\n */\r\nconst InventoryPanel: React.FC = () => {\r\n  const { inventory, sellItem, equipItem } = useInventory();\r\n  const [selectedQuantity, setSelectedQuantity] = useState<number>(1);\r\n  const [filter, setFilter] = useState<'all' | 'resources' | 'equipment'>('all');\r\n  \r\n  const handleSellItem = (itemId: string) => {\r\n    sellItem(itemId, selectedQuantity);\r\n  };\r\n  \r\n  const handleEquipItem = (itemId: string) => {\r\n    equipItem(itemId);\r\n  };\r\n  \r\n  const filteredInventory = Object.entries(inventory).filter(([_, item]) => {\r\n    if (filter === 'all') return true;\r\n    return item.type === filter;\r\n  });\r\n  \r\n  return (\r\n    <div className=\"inventory-panel\">\r\n      <div className=\"inventory-header\">\r\n        <h2>Inventory</h2>\r\n        <InventoryFilter \r\n          currentFilter={filter}\r\n          onFilterChange={setFilter}\r\n        />\r\n      </div>\r\n      \r\n      <QuantitySelector\r\n        value={selectedQuantity}\r\n        onChange={setSelectedQuantity}\r\n        max={99}\r\n        label=\"Sell Quantity:\"\r\n      />\r\n      \r\n      <div className=\"inventory-grid\">\r\n        {filteredInventory.length === 0 ? (\r\n          <EmptyInventoryMessage filter={filter} />\r\n        ) : (\r\n          filteredInventory.map(([itemId, item]) => (\r\n            <InventoryItem\r\n              key={itemId}\r\n              item={item}\r\n              selectedQuantity={selectedQuantity}\r\n              onSell={() => handleSellItem(itemId)}\r\n              onEquip={() => handleEquipItem(itemId)}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * InventoryFilter component - Provides filtering options for inventory items\r\n */\r\ninterface InventoryFilterProps {\r\n  currentFilter: 'all' | 'resources' | 'equipment';\r\n  onFilterChange: (filter: 'all' | 'resources' | 'equipment') => void;\r\n}\r\n\r\nconst InventoryFilter: React.FC<InventoryFilterProps> = ({ \r\n  currentFilter, \r\n  onFilterChange \r\n}) => {\r\n  return (\r\n    <div className=\"inventory-filter\">\r\n      <span>Show: </span>\r\n      <div className=\"filter-buttons\">\r\n        <button \r\n          className={`filter-btn ${currentFilter === 'all' ? 'active' : ''}`}\r\n          onClick={() => onFilterChange('all')}\r\n        >\r\n          All\r\n        </button>\r\n        <button \r\n          className={`filter-btn ${currentFilter === 'resources' ? 'active' : ''}`}\r\n          onClick={() => onFilterChange('resources')}\r\n        >\r\n          Resources\r\n        </button>\r\n        <button \r\n          className={`filter-btn ${currentFilter === 'equipment' ? 'active' : ''}`}\r\n          onClick={() => onFilterChange('equipment')}\r\n        >\r\n          Equipment\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * EmptyInventoryMessage component - Displays appropriate message when inventory is empty\r\n */\r\ninterface EmptyInventoryMessageProps {\r\n  filter: 'all' | 'resources' | 'equipment';\r\n}\r\n\r\nconst EmptyInventoryMessage: React.FC<EmptyInventoryMessageProps> = ({ filter }) => {\r\n  const messages = {\r\n    all: \"Your inventory is empty.\",\r\n    resources: \"You don't have any resources.\",\r\n    equipment: \"You don't have any equipment.\"\r\n  };\r\n  \r\n  return <p className=\"empty-inventory\">{messages[filter]}</p>;\r\n};\r\n\r\nexport default InventoryPanel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
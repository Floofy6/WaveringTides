{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { useSkills } from '../hooks/useSkills';\n// Helper functions (normally these would be in a separate utils file)\nconst totalXpForLevel = level => {\n  // Simple formula for testing\n  return Math.floor((level - 1) * 100);\n};\nconst getLevelFromXp = xp => {\n  // Simple formula for testing\n  return Math.floor(xp / 100) + 1;\n};\n\n/**\n * GameTick component - Handles game updates at regular intervals\n * This component doesn't render anything but creates a game loop\n */\nconst GameTick = () => {\n  _s();\n  const {\n    getActiveSkills,\n    addExperience,\n    addMasteryExperience\n  } = useSkills();\n  const {\n    gameState,\n    updateGameState\n  } = useGameContext();\n  const lastUpdateRef = useRef(Date.now());\n  const initializedRef = useRef(false);\n  const actionProgressRef = useRef({});\n\n  // OSRS-like skill action configuration\n  const SKILL_ACTION_BASE_TIME = 3000; // 3 seconds per action (like OSRS)\n\n  // Initialize totalXp for existing skills (for older saves)\n  useEffect(() => {\n    // Safety check: ensure gameState and player exist\n    if (!gameState || !gameState.player || !gameState.player.skills) {\n      console.error(\"GameTick: Cannot initialize totalXp, gameState.player.skills is not available\");\n      return;\n    }\n    if (!initializedRef.current) {\n      initializedRef.current = true;\n      try {\n        // Check if any skills don't have totalXp and initialize them\n        const needsUpdate = Object.values(gameState.player.skills).some(skill => skill && skill.totalXp === undefined);\n        if (needsUpdate) {\n          console.log('Initializing totalXp for older saves');\n          updateGameState(prevState => {\n            // Safety check on prevState\n            if (!prevState || !prevState.player || !prevState.player.skills) {\n              console.error(\"Cannot update skills, prevState.player.skills is missing\");\n              return prevState; // Return unmodified\n            }\n            const newState = JSON.parse(JSON.stringify(prevState));\n\n            // Use proper type for skill and ensure all skills have totalXp\n            Object.values(newState.player.skills).forEach(skill => {\n              if (!skill) return; // Skip if skill is undefined\n\n              if (skill.totalXp === undefined) {\n                // Calculate totalXp based on current level and xp\n                const levelBaseXp = totalXpForLevel(skill.level || 1);\n                skill.totalXp = levelBaseXp + (skill.xp || 0);\n\n                // Ensure xp is initialized if missing\n                if (skill.xp === undefined) {\n                  skill.xp = 0;\n                }\n\n                // Ensure xpPerAction is initialized if missing\n                if (skill.xpPerAction === undefined) {\n                  skill.xpPerAction = 5; // Default value\n                  console.warn(`Missing xpPerAction for skill ${skill.name || 'unknown'}, initializing to ${skill.xpPerAction}`);\n                }\n              }\n            });\n            return newState;\n          });\n        }\n      } catch (error) {\n        console.error(\"Error initializing totalXp:\", error);\n      }\n    }\n  }, [gameState, updateGameState]);\n\n  // Set up game tick for recurring actions\n  useEffect(() => {\n    console.log('GameTick initialized');\n    const tickInterval = 100; // Update more frequently for smoother progress\n\n    const gameLoop = () => {\n      try {\n        // Safety check: ensure gameState and player exist\n        if (!gameState || !gameState.player || !gameState.player.skills) {\n          console.error(\"GameTick: gameState.player.skills is not available in game loop\");\n          return;\n        }\n        const now = Date.now();\n        const deltaTime = now - lastUpdateRef.current;\n        lastUpdateRef.current = now;\n\n        // Get all active skills\n        const activeSkills = getActiveSkills();\n\n        // Update each active skill progress\n        activeSkills.forEach(skillId => {\n          try {\n            if (!gameState.player.skills[skillId]) {\n              console.error(`Skill ${skillId} is active but not found in gameState`);\n              return;\n            }\n            const skill = gameState.player.skills[skillId];\n\n            // Ensure skill has required properties\n            if (typeof skill.xpPerAction !== 'number' || isNaN(skill.xpPerAction)) {\n              console.error(`Skill ${skillId} has invalid xpPerAction: ${skill.xpPerAction}`);\n              return;\n            }\n\n            // Initialize action progress tracking for this skill if not exists\n            if (!actionProgressRef.current[skillId]) {\n              actionProgressRef.current[skillId] = 0;\n            }\n\n            // Calculate skill level modifier (higher levels = slightly faster actions, as in OSRS)\n            const levelModifier = 1 - Math.min((skill.level - 1) * 0.005, 0.3); // Max 30% reduction at level 61+\n            const actionTime = SKILL_ACTION_BASE_TIME * levelModifier;\n\n            // Increment progress for this skill\n            actionProgressRef.current[skillId] += deltaTime;\n\n            // Check if an action is completed\n            if (actionProgressRef.current[skillId] >= actionTime) {\n              // How many actions completed\n              const actionsCompleted = Math.floor(actionProgressRef.current[skillId] / actionTime);\n\n              // Update progress remainder\n              actionProgressRef.current[skillId] %= actionTime;\n\n              // Add XP for completed action(s)\n              const xpGain = skill.xpPerAction * actionsCompleted;\n\n              // Add XP to the skill (only give XP when action completes, like OSRS)\n              addExperience(skillId, xpGain);\n\n              // If the skill has mastery, add mastery experience as well\n              if (skill.mastery) {\n                // Mastery XP is typically a fraction of regular XP in OSRS\n                const masteryXpGain = xpGain * 0.1;\n                addMasteryExperience(skillId, masteryXpGain);\n              }\n\n              // Update the UI with action progress\n              updateActionProgress(skillId, actionProgressRef.current[skillId] / actionTime);\n            } else {\n              // Update the UI with action progress\n              updateActionProgress(skillId, actionProgressRef.current[skillId] / actionTime);\n            }\n          } catch (skillError) {\n            console.error(`Error processing skill ${skillId}:`, skillError);\n          }\n        });\n      } catch (loopError) {\n        console.error(\"Error in game loop:\", loopError);\n      }\n    };\n\n    // Helper function to update action progress in the game state\n    const updateActionProgress = (skillId, progress) => {\n      updateGameState(prevState => {\n        // Safety check\n        if (!prevState || !prevState.player || !prevState.player.skills || !prevState.player.skills[skillId]) {\n          return prevState;\n        }\n        const newState = JSON.parse(JSON.stringify(prevState));\n        newState.player.skills[skillId].actionProgress = progress;\n        return newState;\n      });\n    };\n\n    // Set up recurring game tick\n    const tickTimer = setInterval(gameLoop, tickInterval);\n\n    // Initial tick\n    gameLoop();\n\n    // Clean up interval on unmount\n    return () => {\n      clearInterval(tickTimer);\n    };\n  }, [gameState, addExperience, addMasteryExperience, getActiveSkills, updateGameState]);\n\n  // This component doesn't render anything\n  return null;\n};\n_s(GameTick, \"5LFdZR0h+Q0kri1c9/pEHWlf8PQ=\", false, function () {\n  return [useSkills, useGameContext];\n});\n_c = GameTick;\nexport default GameTick;\nvar _c;\n$RefreshReg$(_c, \"GameTick\");","map":{"version":3,"names":["useEffect","useRef","useGameContext","useSkills","totalXpForLevel","level","Math","floor","getLevelFromXp","xp","GameTick","_s","getActiveSkills","addExperience","addMasteryExperience","gameState","updateGameState","lastUpdateRef","Date","now","initializedRef","actionProgressRef","SKILL_ACTION_BASE_TIME","player","skills","console","error","current","needsUpdate","Object","values","some","skill","totalXp","undefined","log","prevState","newState","JSON","parse","stringify","forEach","levelBaseXp","xpPerAction","warn","name","tickInterval","gameLoop","deltaTime","activeSkills","skillId","isNaN","levelModifier","min","actionTime","actionsCompleted","xpGain","mastery","masteryXpGain","updateActionProgress","skillError","loopError","progress","actionProgress","tickTimer","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/components/GameTick.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useGameContext } from '../context/GameContext';\nimport { useSkills } from '../hooks/useSkills';\nimport { calculateMasteryXpForLevel } from '../hooks/useSkills';\n\n// Helper functions (normally these would be in a separate utils file)\nconst totalXpForLevel = (level: number): number => {\n  // Simple formula for testing\n  return Math.floor((level - 1) * 100);\n};\n\nconst getLevelFromXp = (xp: number): number => {\n  // Simple formula for testing\n  return Math.floor(xp / 100) + 1;\n};\n\n/**\n * GameTick component - Handles game updates at regular intervals\n * This component doesn't render anything but creates a game loop\n */\nconst GameTick: React.FC = () => {\n  const { getActiveSkills, addExperience, addMasteryExperience } = useSkills();\n  const { gameState, updateGameState } = useGameContext();\n  const lastUpdateRef = useRef<number>(Date.now());\n  const initializedRef = useRef<boolean>(false);\n  const actionProgressRef = useRef<{ [skillId: string]: number }>({});\n  \n  // OSRS-like skill action configuration\n  const SKILL_ACTION_BASE_TIME = 3000; // 3 seconds per action (like OSRS)\n  \n  // Initialize totalXp for existing skills (for older saves)\n  useEffect(() => {\n    // Safety check: ensure gameState and player exist\n    if (!gameState || !gameState.player || !gameState.player.skills) {\n      console.error(\"GameTick: Cannot initialize totalXp, gameState.player.skills is not available\");\n      return;\n    }\n    \n    if (!initializedRef.current) {\n      initializedRef.current = true;\n      \n      try {\n        // Check if any skills don't have totalXp and initialize them\n        const needsUpdate = Object.values(gameState.player.skills).some(\n          (skill: any) => skill && skill.totalXp === undefined\n        );\n        \n        if (needsUpdate) {\n          console.log('Initializing totalXp for older saves');\n          updateGameState((prevState) => {\n            // Safety check on prevState\n            if (!prevState || !prevState.player || !prevState.player.skills) {\n              console.error(\"Cannot update skills, prevState.player.skills is missing\");\n              return prevState; // Return unmodified\n            }\n            \n            const newState = JSON.parse(JSON.stringify(prevState));\n            \n            // Use proper type for skill and ensure all skills have totalXp\n            Object.values(newState.player.skills).forEach((skill: any) => {\n              if (!skill) return; // Skip if skill is undefined\n              \n              if (skill.totalXp === undefined) {\n                // Calculate totalXp based on current level and xp\n                const levelBaseXp = totalXpForLevel(skill.level || 1);\n                skill.totalXp = levelBaseXp + (skill.xp || 0);\n                \n                // Ensure xp is initialized if missing\n                if (skill.xp === undefined) {\n                  skill.xp = 0;\n                }\n                \n                // Ensure xpPerAction is initialized if missing\n                if (skill.xpPerAction === undefined) {\n                  skill.xpPerAction = 5; // Default value\n                  console.warn(`Missing xpPerAction for skill ${skill.name || 'unknown'}, initializing to ${skill.xpPerAction}`);\n                }\n              }\n            });\n            \n            return newState;\n          });\n        }\n      } catch (error) {\n        console.error(\"Error initializing totalXp:\", error);\n      }\n    }\n  }, [gameState, updateGameState]);\n  \n  // Set up game tick for recurring actions\n  useEffect(() => {\n    console.log('GameTick initialized');\n    \n    const tickInterval = 100; // Update more frequently for smoother progress\n    \n    const gameLoop = () => {\n      try {\n        // Safety check: ensure gameState and player exist\n        if (!gameState || !gameState.player || !gameState.player.skills) {\n          console.error(\"GameTick: gameState.player.skills is not available in game loop\");\n          return;\n        }\n        \n        const now = Date.now();\n        const deltaTime = now - lastUpdateRef.current;\n        lastUpdateRef.current = now;\n        \n        // Get all active skills\n        const activeSkills = getActiveSkills();\n        \n        // Update each active skill progress\n        activeSkills.forEach(skillId => {\n          try {\n            if (!gameState.player.skills[skillId]) {\n              console.error(`Skill ${skillId} is active but not found in gameState`);\n              return;\n            }\n            \n            const skill = gameState.player.skills[skillId];\n            \n            // Ensure skill has required properties\n            if (typeof skill.xpPerAction !== 'number' || isNaN(skill.xpPerAction)) {\n              console.error(`Skill ${skillId} has invalid xpPerAction: ${skill.xpPerAction}`);\n              return;\n            }\n            \n            // Initialize action progress tracking for this skill if not exists\n            if (!actionProgressRef.current[skillId]) {\n              actionProgressRef.current[skillId] = 0;\n            }\n            \n            // Calculate skill level modifier (higher levels = slightly faster actions, as in OSRS)\n            const levelModifier = 1 - Math.min((skill.level - 1) * 0.005, 0.3); // Max 30% reduction at level 61+\n            const actionTime = SKILL_ACTION_BASE_TIME * levelModifier;\n            \n            // Increment progress for this skill\n            actionProgressRef.current[skillId] += deltaTime;\n            \n            // Check if an action is completed\n            if (actionProgressRef.current[skillId] >= actionTime) {\n              // How many actions completed\n              const actionsCompleted = Math.floor(actionProgressRef.current[skillId] / actionTime);\n              \n              // Update progress remainder\n              actionProgressRef.current[skillId] %= actionTime;\n              \n              // Add XP for completed action(s)\n              const xpGain = skill.xpPerAction * actionsCompleted;\n              \n              // Add XP to the skill (only give XP when action completes, like OSRS)\n              addExperience(skillId, xpGain);\n              \n              // If the skill has mastery, add mastery experience as well\n              if (skill.mastery) {\n                // Mastery XP is typically a fraction of regular XP in OSRS\n                const masteryXpGain = xpGain * 0.1;\n                addMasteryExperience(skillId, masteryXpGain);\n              }\n              \n              // Update the UI with action progress\n              updateActionProgress(skillId, actionProgressRef.current[skillId] / actionTime);\n            } else {\n              // Update the UI with action progress\n              updateActionProgress(skillId, actionProgressRef.current[skillId] / actionTime);\n            }\n          } catch (skillError) {\n            console.error(`Error processing skill ${skillId}:`, skillError);\n          }\n        });\n      } catch (loopError) {\n        console.error(\"Error in game loop:\", loopError);\n      }\n    };\n    \n    // Helper function to update action progress in the game state\n    const updateActionProgress = (skillId: string, progress: number) => {\n      updateGameState((prevState) => {\n        // Safety check\n        if (!prevState || !prevState.player || !prevState.player.skills || !prevState.player.skills[skillId]) {\n          return prevState;\n        }\n        \n        const newState = JSON.parse(JSON.stringify(prevState));\n        newState.player.skills[skillId].actionProgress = progress;\n        return newState;\n      });\n    };\n    \n    // Set up recurring game tick\n    const tickTimer = setInterval(gameLoop, tickInterval);\n    \n    // Initial tick\n    gameLoop();\n    \n    // Clean up interval on unmount\n    return () => {\n      clearInterval(tickTimer);\n    };\n  }, [gameState, addExperience, addMasteryExperience, getActiveSkills, updateGameState]);\n  \n  // This component doesn't render anything\n  return null;\n};\n\nexport default GameTick; "],"mappings":";AAAA,SAAgBA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,SAAS,QAAQ,oBAAoB;AAG9C;AACA,MAAMC,eAAe,GAAIC,KAAa,IAAa;EACjD;EACA,OAAOC,IAAI,CAACC,KAAK,CAAC,CAACF,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC;AACtC,CAAC;AAED,MAAMG,cAAc,GAAIC,EAAU,IAAa;EAC7C;EACA,OAAOH,IAAI,CAACC,KAAK,CAACE,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC,eAAe;IAAEC,aAAa;IAAEC;EAAqB,CAAC,GAAGX,SAAS,CAAC,CAAC;EAC5E,MAAM;IAAEY,SAAS;IAAEC;EAAgB,CAAC,GAAGd,cAAc,CAAC,CAAC;EACvD,MAAMe,aAAa,GAAGhB,MAAM,CAASiB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;EAChD,MAAMC,cAAc,GAAGnB,MAAM,CAAU,KAAK,CAAC;EAC7C,MAAMoB,iBAAiB,GAAGpB,MAAM,CAAgC,CAAC,CAAC,CAAC;;EAEnE;EACA,MAAMqB,sBAAsB,GAAG,IAAI,CAAC,CAAC;;EAErC;EACAtB,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACe,SAAS,IAAI,CAACA,SAAS,CAACQ,MAAM,IAAI,CAACR,SAAS,CAACQ,MAAM,CAACC,MAAM,EAAE;MAC/DC,OAAO,CAACC,KAAK,CAAC,+EAA+E,CAAC;MAC9F;IACF;IAEA,IAAI,CAACN,cAAc,CAACO,OAAO,EAAE;MAC3BP,cAAc,CAACO,OAAO,GAAG,IAAI;MAE7B,IAAI;QACF;QACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACf,SAAS,CAACQ,MAAM,CAACC,MAAM,CAAC,CAACO,IAAI,CAC5DC,KAAU,IAAKA,KAAK,IAAIA,KAAK,CAACC,OAAO,KAAKC,SAC7C,CAAC;QAED,IAAIN,WAAW,EAAE;UACfH,OAAO,CAACU,GAAG,CAAC,sCAAsC,CAAC;UACnDnB,eAAe,CAAEoB,SAAS,IAAK;YAC7B;YACA,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAACb,MAAM,IAAI,CAACa,SAAS,CAACb,MAAM,CAACC,MAAM,EAAE;cAC/DC,OAAO,CAACC,KAAK,CAAC,0DAA0D,CAAC;cACzE,OAAOU,SAAS,CAAC,CAAC;YACpB;YAEA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,SAAS,CAAC,CAAC;;YAEtD;YACAP,MAAM,CAACC,MAAM,CAACO,QAAQ,CAACd,MAAM,CAACC,MAAM,CAAC,CAACiB,OAAO,CAAET,KAAU,IAAK;cAC5D,IAAI,CAACA,KAAK,EAAE,OAAO,CAAC;;cAEpB,IAAIA,KAAK,CAACC,OAAO,KAAKC,SAAS,EAAE;gBAC/B;gBACA,MAAMQ,WAAW,GAAGtC,eAAe,CAAC4B,KAAK,CAAC3B,KAAK,IAAI,CAAC,CAAC;gBACrD2B,KAAK,CAACC,OAAO,GAAGS,WAAW,IAAIV,KAAK,CAACvB,EAAE,IAAI,CAAC,CAAC;;gBAE7C;gBACA,IAAIuB,KAAK,CAACvB,EAAE,KAAKyB,SAAS,EAAE;kBAC1BF,KAAK,CAACvB,EAAE,GAAG,CAAC;gBACd;;gBAEA;gBACA,IAAIuB,KAAK,CAACW,WAAW,KAAKT,SAAS,EAAE;kBACnCF,KAAK,CAACW,WAAW,GAAG,CAAC,CAAC,CAAC;kBACvBlB,OAAO,CAACmB,IAAI,CAAC,iCAAiCZ,KAAK,CAACa,IAAI,IAAI,SAAS,qBAAqBb,KAAK,CAACW,WAAW,EAAE,CAAC;gBAChH;cACF;YACF,CAAC,CAAC;YAEF,OAAON,QAAQ;UACjB,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOX,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF;EACF,CAAC,EAAE,CAACX,SAAS,EAAEC,eAAe,CAAC,CAAC;;EAEhC;EACAhB,SAAS,CAAC,MAAM;IACdyB,OAAO,CAACU,GAAG,CAAC,sBAAsB,CAAC;IAEnC,MAAMW,YAAY,GAAG,GAAG,CAAC,CAAC;;IAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrB,IAAI;QACF;QACA,IAAI,CAAChC,SAAS,IAAI,CAACA,SAAS,CAACQ,MAAM,IAAI,CAACR,SAAS,CAACQ,MAAM,CAACC,MAAM,EAAE;UAC/DC,OAAO,CAACC,KAAK,CAAC,iEAAiE,CAAC;UAChF;QACF;QAEA,MAAMP,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;QACtB,MAAM6B,SAAS,GAAG7B,GAAG,GAAGF,aAAa,CAACU,OAAO;QAC7CV,aAAa,CAACU,OAAO,GAAGR,GAAG;;QAE3B;QACA,MAAM8B,YAAY,GAAGrC,eAAe,CAAC,CAAC;;QAEtC;QACAqC,YAAY,CAACR,OAAO,CAACS,OAAO,IAAI;UAC9B,IAAI;YACF,IAAI,CAACnC,SAAS,CAACQ,MAAM,CAACC,MAAM,CAAC0B,OAAO,CAAC,EAAE;cACrCzB,OAAO,CAACC,KAAK,CAAC,SAASwB,OAAO,uCAAuC,CAAC;cACtE;YACF;YAEA,MAAMlB,KAAK,GAAGjB,SAAS,CAACQ,MAAM,CAACC,MAAM,CAAC0B,OAAO,CAAC;;YAE9C;YACA,IAAI,OAAOlB,KAAK,CAACW,WAAW,KAAK,QAAQ,IAAIQ,KAAK,CAACnB,KAAK,CAACW,WAAW,CAAC,EAAE;cACrElB,OAAO,CAACC,KAAK,CAAC,SAASwB,OAAO,6BAA6BlB,KAAK,CAACW,WAAW,EAAE,CAAC;cAC/E;YACF;;YAEA;YACA,IAAI,CAACtB,iBAAiB,CAACM,OAAO,CAACuB,OAAO,CAAC,EAAE;cACvC7B,iBAAiB,CAACM,OAAO,CAACuB,OAAO,CAAC,GAAG,CAAC;YACxC;;YAEA;YACA,MAAME,aAAa,GAAG,CAAC,GAAG9C,IAAI,CAAC+C,GAAG,CAAC,CAACrB,KAAK,CAAC3B,KAAK,GAAG,CAAC,IAAI,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;YACpE,MAAMiD,UAAU,GAAGhC,sBAAsB,GAAG8B,aAAa;;YAEzD;YACA/B,iBAAiB,CAACM,OAAO,CAACuB,OAAO,CAAC,IAAIF,SAAS;;YAE/C;YACA,IAAI3B,iBAAiB,CAACM,OAAO,CAACuB,OAAO,CAAC,IAAII,UAAU,EAAE;cACpD;cACA,MAAMC,gBAAgB,GAAGjD,IAAI,CAACC,KAAK,CAACc,iBAAiB,CAACM,OAAO,CAACuB,OAAO,CAAC,GAAGI,UAAU,CAAC;;cAEpF;cACAjC,iBAAiB,CAACM,OAAO,CAACuB,OAAO,CAAC,IAAII,UAAU;;cAEhD;cACA,MAAME,MAAM,GAAGxB,KAAK,CAACW,WAAW,GAAGY,gBAAgB;;cAEnD;cACA1C,aAAa,CAACqC,OAAO,EAAEM,MAAM,CAAC;;cAE9B;cACA,IAAIxB,KAAK,CAACyB,OAAO,EAAE;gBACjB;gBACA,MAAMC,aAAa,GAAGF,MAAM,GAAG,GAAG;gBAClC1C,oBAAoB,CAACoC,OAAO,EAAEQ,aAAa,CAAC;cAC9C;;cAEA;cACAC,oBAAoB,CAACT,OAAO,EAAE7B,iBAAiB,CAACM,OAAO,CAACuB,OAAO,CAAC,GAAGI,UAAU,CAAC;YAChF,CAAC,MAAM;cACL;cACAK,oBAAoB,CAACT,OAAO,EAAE7B,iBAAiB,CAACM,OAAO,CAACuB,OAAO,CAAC,GAAGI,UAAU,CAAC;YAChF;UACF,CAAC,CAAC,OAAOM,UAAU,EAAE;YACnBnC,OAAO,CAACC,KAAK,CAAC,0BAA0BwB,OAAO,GAAG,EAAEU,UAAU,CAAC;UACjE;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,SAAS,EAAE;QAClBpC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEmC,SAAS,CAAC;MACjD;IACF,CAAC;;IAED;IACA,MAAMF,oBAAoB,GAAGA,CAACT,OAAe,EAAEY,QAAgB,KAAK;MAClE9C,eAAe,CAAEoB,SAAS,IAAK;QAC7B;QACA,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAACb,MAAM,IAAI,CAACa,SAAS,CAACb,MAAM,CAACC,MAAM,IAAI,CAACY,SAAS,CAACb,MAAM,CAACC,MAAM,CAAC0B,OAAO,CAAC,EAAE;UACpG,OAAOd,SAAS;QAClB;QAEA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,SAAS,CAAC,CAAC;QACtDC,QAAQ,CAACd,MAAM,CAACC,MAAM,CAAC0B,OAAO,CAAC,CAACa,cAAc,GAAGD,QAAQ;QACzD,OAAOzB,QAAQ;MACjB,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAM2B,SAAS,GAAGC,WAAW,CAAClB,QAAQ,EAAED,YAAY,CAAC;;IAErD;IACAC,QAAQ,CAAC,CAAC;;IAEV;IACA,OAAO,MAAM;MACXmB,aAAa,CAACF,SAAS,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACjD,SAAS,EAAEF,aAAa,EAAEC,oBAAoB,EAAEF,eAAe,EAAEI,eAAe,CAAC,CAAC;;EAEtF;EACA,OAAO,IAAI;AACb,CAAC;AAACL,EAAA,CAtLID,QAAkB;EAAA,QAC2CP,SAAS,EACnCD,cAAc;AAAA;AAAAiE,EAAA,GAFjDzD,QAAkB;AAwLxB,eAAeA,QAAQ;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
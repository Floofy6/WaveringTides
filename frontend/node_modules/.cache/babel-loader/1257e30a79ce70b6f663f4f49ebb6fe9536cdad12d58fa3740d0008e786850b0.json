{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domin\\\\Desktop\\\\coding\\\\WaveringTides-master\\\\frontend\\\\src\\\\features\\\\skills\\\\SkillProgressBar.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Import these functions from a shared location\nconst calculateXpForNextLevel = currentLevel => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  const MAX_LEVEL = 99;\n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  return Math.floor(Math.pow(2, currentLevel / 7) * currentLevel * 300 / 4);\n};\nconst totalXpForLevel = level => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Format a number with commas for better readability\n */\nconst formatNumber = num => {\n  return num.toLocaleString();\n};\n\n/**\n * SkillProgressBar component - Visual representation of skill progression\n * Optimized for desktop viewing\n */\nconst SkillProgressBar = ({\n  skill,\n  showActionProgress = true\n}) => {\n  // Validate inputs to prevent errors\n  if (!skill) {\n    console.error('SkillProgressBar: No skill data provided');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      children: \"Error: Skill data missing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check level bounds\n  const level = Math.max(1, Math.min(99, skill.level));\n\n  // If we're at max level, show 100%\n  if (level >= 99) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-3 bg-gray-200 rounded-full overflow-hidden\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-full bg-primary\",\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-right text-xs text-gray-600 mt-2\",\n        children: \"Max Level (13,034,431 XP)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Get XP thresholds for current level and next level\n  const currentLevelTotalXp = totalXpForLevel(level);\n  const nextLevelTotalXp = totalXpForLevel(level + 1);\n\n  // Calculate XP needed for next level from current level\n  const xpForNextLevel = nextLevelTotalXp - currentLevelTotalXp;\n\n  // Current XP progress within this level\n  let currentLevelXp = 0;\n\n  // Make sure we have a valid totalXp value\n  if (typeof skill.totalXp === 'number') {\n    // Calculate how much XP we've earned within this level\n    currentLevelXp = skill.totalXp - currentLevelTotalXp;\n  } else if (typeof skill.xp === 'number') {\n    // Directly use the level's xp if totalXp is not available\n    currentLevelXp = skill.xp;\n  }\n\n  // Ensure currentLevelXp is not negative\n  currentLevelXp = Math.max(0, currentLevelXp);\n\n  // Ensure currentLevelXp doesn't exceed what's needed for next level\n  const displayXp = Math.min(xpForNextLevel, currentLevelXp);\n\n  // Calculate percentage progress toward next level\n  const progressPercentage = Math.min(Math.floor(displayXp / xpForNextLevel * 100), 100);\n\n  // Calculate action progress percentage if skill is active\n  const actionProgress = skill.isActive && skill.actionProgress ? Math.min(Math.floor(skill.actionProgress * 100), 100) : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-3 bg-gray-200 rounded-full overflow-hidden\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-full bg-primary transition-all duration-300\",\n          style: {\n            width: `${progressPercentage}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-right text-xs text-gray-600 mt-2\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"group relative inline-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"group-hover:opacity-100 opacity-0 pointer-events-none absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded whitespace-nowrap transition-opacity duration-150\",\n            children: [formatNumber(Math.floor(displayXp)), \" / \", formatNumber(xpForNextLevel), \" XP\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), formatNumber(Math.floor(displayXp)), \" / \", formatNumber(xpForNextLevel), \" XP (\", progressPercentage, \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), skill.totalXp && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-right text-xs text-gray-500 mt-1\",\n        children: [\"Total XP: \", formatNumber(Math.floor(skill.totalXp))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), showActionProgress && skill.isActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xs text-gray-600 opacity-80 mb-1\",\n        children: \"Action progress:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-2 bg-gray-200 rounded-full overflow-hidden\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-full bg-warning animate-pulse\",\n          style: {\n            width: `${actionProgress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_c = SkillProgressBar;\nexport default SkillProgressBar;\nvar _c;\n$RefreshReg$(_c, \"SkillProgressBar\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","calculateXpForNextLevel","currentLevel","MAX_LEVEL","Number","MAX_SAFE_INTEGER","Math","floor","pow","totalXpForLevel","level","total","i","formatNumber","num","toLocaleString","SkillProgressBar","skill","showActionProgress","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","max","min","style","width","currentLevelTotalXp","nextLevelTotalXp","xpForNextLevel","currentLevelXp","totalXp","xp","displayXp","progressPercentage","actionProgress","isActive","_c","$RefreshReg$"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/features/skills/SkillProgressBar.tsx"],"sourcesContent":["import React from 'react';\nimport { Skill } from '../../types';\n\ninterface SkillProgressBarProps {\n  skill: Skill;\n  showActionProgress?: boolean;\n}\n\n// Import these functions from a shared location\nconst calculateXpForNextLevel = (currentLevel: number): number => {\n  // OSRS formula: Each level requires points equal to Math.floor(level * 300 * 2^(level/7)) / 4\n  const MAX_LEVEL = 99;\n  \n  if (currentLevel >= MAX_LEVEL) {\n    return Number.MAX_SAFE_INTEGER; // Effectively cap at level 99\n  }\n  \n  return Math.floor((Math.pow(2, (currentLevel) / 7) * currentLevel * 300) / 4);\n};\n\nconst totalXpForLevel = (level: number): number => {\n  let total = 0;\n  for (let i = 1; i < level; i++) {\n    total += calculateXpForNextLevel(i);\n  }\n  return total;\n};\n\n/**\n * Format a number with commas for better readability\n */\nconst formatNumber = (num: number): string => {\n  return num.toLocaleString();\n};\n\n/**\n * SkillProgressBar component - Visual representation of skill progression\n * Optimized for desktop viewing\n */\nconst SkillProgressBar: React.FC<SkillProgressBarProps> = ({ \n  skill,\n  showActionProgress = true\n}) => {\n  // Validate inputs to prevent errors\n  if (!skill) {\n    console.error('SkillProgressBar: No skill data provided');\n    return <div className=\"text-danger\">Error: Skill data missing</div>;\n  }\n  \n  // Check level bounds\n  const level = Math.max(1, Math.min(99, skill.level));\n  \n  // If we're at max level, show 100%\n  if (level >= 99) {\n    return (\n      <div>\n        <div className=\"w-full h-3 bg-gray-200 rounded-full overflow-hidden\">\n          <div className=\"h-full bg-primary\" style={{ width: '100%' }} />\n        </div>\n        <div className=\"text-right text-xs text-gray-600 mt-2\">\n          Max Level (13,034,431 XP)\n        </div>\n      </div>\n    );\n  }\n  \n  // Get XP thresholds for current level and next level\n  const currentLevelTotalXp = totalXpForLevel(level);\n  const nextLevelTotalXp = totalXpForLevel(level + 1);\n  \n  // Calculate XP needed for next level from current level\n  const xpForNextLevel = nextLevelTotalXp - currentLevelTotalXp;\n  \n  // Current XP progress within this level\n  let currentLevelXp = 0;\n  \n  // Make sure we have a valid totalXp value\n  if (typeof skill.totalXp === 'number') {\n    // Calculate how much XP we've earned within this level\n    currentLevelXp = skill.totalXp - currentLevelTotalXp;\n  } else if (typeof skill.xp === 'number') {\n    // Directly use the level's xp if totalXp is not available\n    currentLevelXp = skill.xp;\n  }\n  \n  // Ensure currentLevelXp is not negative\n  currentLevelXp = Math.max(0, currentLevelXp);\n  \n  // Ensure currentLevelXp doesn't exceed what's needed for next level\n  const displayXp = Math.min(xpForNextLevel, currentLevelXp);\n  \n  // Calculate percentage progress toward next level\n  const progressPercentage = Math.min(Math.floor((displayXp / xpForNextLevel) * 100), 100);\n  \n  // Calculate action progress percentage if skill is active\n  const actionProgress = (skill.isActive && skill.actionProgress) \n    ? Math.min(Math.floor((skill.actionProgress) * 100), 100)\n    : 0;\n  \n  return (\n    <div className=\"space-y-3\">\n      {/* XP Progress bar */}\n      <div>\n        <div className=\"w-full h-3 bg-gray-200 rounded-full overflow-hidden\">\n          <div \n            className=\"h-full bg-primary transition-all duration-300\"\n            style={{ width: `${progressPercentage}%` }} \n          />\n        </div>\n        <div className=\"text-right text-xs text-gray-600 mt-2\">\n          <span className=\"group relative inline-block\">\n            <span className=\"group-hover:opacity-100 opacity-0 pointer-events-none absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded whitespace-nowrap transition-opacity duration-150\">\n              {formatNumber(Math.floor(displayXp))} / {formatNumber(xpForNextLevel)} XP\n            </span>\n            {formatNumber(Math.floor(displayXp))} / {formatNumber(xpForNextLevel)} XP ({progressPercentage}%)\n          </span>\n        </div>\n        {skill.totalXp && (\n          <div className=\"text-right text-xs text-gray-500 mt-1\">\n            Total XP: {formatNumber(Math.floor(skill.totalXp))}\n          </div>\n        )}\n      </div>\n      \n      {/* Action progress bar for active skills */}\n      {showActionProgress && skill.isActive && (\n        <div className=\"mt-3\">\n          <div className=\"text-xs text-gray-600 opacity-80 mb-1\">Action progress:</div>\n          <div className=\"w-full h-2 bg-gray-200 rounded-full overflow-hidden\">\n            <div \n              className=\"h-full bg-warning animate-pulse\"\n              style={{ width: `${actionProgress}%` }} \n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SkillProgressBar; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ1B;AACA,MAAMC,uBAAuB,GAAIC,YAAoB,IAAa;EAChE;EACA,MAAMC,SAAS,GAAG,EAAE;EAEpB,IAAID,YAAY,IAAIC,SAAS,EAAE;IAC7B,OAAOC,MAAM,CAACC,gBAAgB,CAAC,CAAC;EAClC;EAEA,OAAOC,IAAI,CAACC,KAAK,CAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAGN,YAAY,GAAI,CAAC,CAAC,GAAGA,YAAY,GAAG,GAAG,GAAI,CAAC,CAAC;AAC/E,CAAC;AAED,MAAMO,eAAe,GAAIC,KAAa,IAAa;EACjD,IAAIC,KAAK,GAAG,CAAC;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;IAC9BD,KAAK,IAAIV,uBAAuB,CAACW,CAAC,CAAC;EACrC;EACA,OAAOD,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA,MAAME,YAAY,GAAIC,GAAW,IAAa;EAC5C,OAAOA,GAAG,CAACC,cAAc,CAAC,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,gBAAiD,GAAGA,CAAC;EACzDC,KAAK;EACLC,kBAAkB,GAAG;AACvB,CAAC,KAAK;EACJ;EACA,IAAI,CAACD,KAAK,EAAE;IACVE,OAAO,CAACC,KAAK,CAAC,0CAA0C,CAAC;IACzD,oBAAOpB,OAAA;MAAKqB,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACrE;;EAEA;EACA,MAAMhB,KAAK,GAAGJ,IAAI,CAACqB,GAAG,CAAC,CAAC,EAAErB,IAAI,CAACsB,GAAG,CAAC,EAAE,EAAEX,KAAK,CAACP,KAAK,CAAC,CAAC;;EAEpD;EACA,IAAIA,KAAK,IAAI,EAAE,EAAE;IACf,oBACEV,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAKqB,SAAS,EAAC,qDAAqD;QAAAC,QAAA,eAClEtB,OAAA;UAAKqB,SAAS,EAAC,mBAAmB;UAACQ,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAO;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D,CAAC,eACN1B,OAAA;QAAKqB,SAAS,EAAC,uCAAuC;QAAAC,QAAA,EAAC;MAEvD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;;EAEA;EACA,MAAMK,mBAAmB,GAAGtB,eAAe,CAACC,KAAK,CAAC;EAClD,MAAMsB,gBAAgB,GAAGvB,eAAe,CAACC,KAAK,GAAG,CAAC,CAAC;;EAEnD;EACA,MAAMuB,cAAc,GAAGD,gBAAgB,GAAGD,mBAAmB;;EAE7D;EACA,IAAIG,cAAc,GAAG,CAAC;;EAEtB;EACA,IAAI,OAAOjB,KAAK,CAACkB,OAAO,KAAK,QAAQ,EAAE;IACrC;IACAD,cAAc,GAAGjB,KAAK,CAACkB,OAAO,GAAGJ,mBAAmB;EACtD,CAAC,MAAM,IAAI,OAAOd,KAAK,CAACmB,EAAE,KAAK,QAAQ,EAAE;IACvC;IACAF,cAAc,GAAGjB,KAAK,CAACmB,EAAE;EAC3B;;EAEA;EACAF,cAAc,GAAG5B,IAAI,CAACqB,GAAG,CAAC,CAAC,EAAEO,cAAc,CAAC;;EAE5C;EACA,MAAMG,SAAS,GAAG/B,IAAI,CAACsB,GAAG,CAACK,cAAc,EAAEC,cAAc,CAAC;;EAE1D;EACA,MAAMI,kBAAkB,GAAGhC,IAAI,CAACsB,GAAG,CAACtB,IAAI,CAACC,KAAK,CAAE8B,SAAS,GAAGJ,cAAc,GAAI,GAAG,CAAC,EAAE,GAAG,CAAC;;EAExF;EACA,MAAMM,cAAc,GAAItB,KAAK,CAACuB,QAAQ,IAAIvB,KAAK,CAACsB,cAAc,GAC1DjC,IAAI,CAACsB,GAAG,CAACtB,IAAI,CAACC,KAAK,CAAEU,KAAK,CAACsB,cAAc,GAAI,GAAG,CAAC,EAAE,GAAG,CAAC,GACvD,CAAC;EAEL,oBACEvC,OAAA;IAAKqB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAExBtB,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAKqB,SAAS,EAAC,qDAAqD;QAAAC,QAAA,eAClEtB,OAAA;UACEqB,SAAS,EAAC,+CAA+C;UACzDQ,KAAK,EAAE;YAAEC,KAAK,EAAE,GAAGQ,kBAAkB;UAAI;QAAE;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN1B,OAAA;QAAKqB,SAAS,EAAC,uCAAuC;QAAAC,QAAA,eACpDtB,OAAA;UAAMqB,SAAS,EAAC,6BAA6B;UAAAC,QAAA,gBAC3CtB,OAAA;YAAMqB,SAAS,EAAC,8MAA8M;YAAAC,QAAA,GAC3NT,YAAY,CAACP,IAAI,CAACC,KAAK,CAAC8B,SAAS,CAAC,CAAC,EAAC,KAAG,EAACxB,YAAY,CAACoB,cAAc,CAAC,EAAC,KACxE;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,EACNb,YAAY,CAACP,IAAI,CAACC,KAAK,CAAC8B,SAAS,CAAC,CAAC,EAAC,KAAG,EAACxB,YAAY,CAACoB,cAAc,CAAC,EAAC,OAAK,EAACK,kBAAkB,EAAC,IACjG;QAAA;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,EACLT,KAAK,CAACkB,OAAO,iBACZnC,OAAA;QAAKqB,SAAS,EAAC,uCAAuC;QAAAC,QAAA,GAAC,YAC3C,EAACT,YAAY,CAACP,IAAI,CAACC,KAAK,CAACU,KAAK,CAACkB,OAAO,CAAC,CAAC;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAGLR,kBAAkB,IAAID,KAAK,CAACuB,QAAQ,iBACnCxC,OAAA;MAAKqB,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBtB,OAAA;QAAKqB,SAAS,EAAC,uCAAuC;QAAAC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7E1B,OAAA;QAAKqB,SAAS,EAAC,qDAAqD;QAAAC,QAAA,eAClEtB,OAAA;UACEqB,SAAS,EAAC,iCAAiC;UAC3CQ,KAAK,EAAE;YAAEC,KAAK,EAAE,GAAGS,cAAc;UAAI;QAAE;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACe,EAAA,GAnGIzB,gBAAiD;AAqGvD,eAAeA,gBAAgB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Set default player ID\nconst DEFAULT_PLAYER_ID = 'player1';\n\n// Get player ID from localStorage or use default\nconst getPlayerId = () => localStorage.getItem('playerId') || DEFAULT_PLAYER_ID;\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  // 10 second timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add response interceptor for error handling\naxiosInstance.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error.message);\n  if (error.response) {\n    console.error('Response data:', error.response.data);\n  }\n  return Promise.reject(error);\n});\nconst api = {\n  getGame: async () => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.get(`/game/${playerId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching game state:', error);\n      throw error;\n    }\n  },\n  updateGame: async gameState => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/update`, gameState);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating game state:', error);\n      throw error;\n    }\n  },\n  startSkill: async skillId => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/skill/${skillId}/start`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error starting skill ${skillId}:`, error);\n      throw error;\n    }\n  },\n  stopSkill: async skillId => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/skill/${skillId}/stop`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error stopping skill ${skillId}:`, error);\n      throw error;\n    }\n  },\n  craftItem: async itemId => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/craft/${itemId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error crafting item ${itemId}:`, error);\n      throw error;\n    }\n  },\n  buyItem: async (itemId, quantity) => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/buy/${itemId}`, {\n        quantity\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error buying item ${itemId}:`, error);\n      throw error;\n    }\n  },\n  sellItem: async (itemId, quantity) => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/sell/${itemId}`, {\n        quantity\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error selling item ${itemId}:`, error);\n      throw error;\n    }\n  },\n  startCombat: async enemyId => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/combat/start/${enemyId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error starting combat with ${enemyId}:`, error);\n      throw error;\n    }\n  },\n  stopCombat: async () => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/combat/stop`);\n      return response.data;\n    } catch (error) {\n      console.error('Error stopping combat:', error);\n      throw error;\n    }\n  },\n  equipItem: async itemId => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/equipment/equip/${itemId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error equipping item ${itemId}:`, error);\n      throw error;\n    }\n  },\n  unequipItem: async slot => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/equipment/unequip/${slot}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error unequipping item from slot ${slot}:`, error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","DEFAULT_PLAYER_ID","getPlayerId","localStorage","getItem","axiosInstance","create","baseURL","timeout","headers","interceptors","response","use","error","console","message","data","Promise","reject","api","getGame","playerId","get","updateGame","gameState","post","startSkill","skillId","stopSkill","craftItem","itemId","buyItem","quantity","sellItem","startCombat","enemyId","stopCombat","equipItem","unequipItem","slot"],"sources":["C:/Users/Domin/OneDrive/Desktop/coding/WaveringTides/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { GameState } from '../types';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Set default player ID\nconst DEFAULT_PLAYER_ID = 'player1';\n\n// Get player ID from localStorage or use default\nconst getPlayerId = () => localStorage.getItem('playerId') || DEFAULT_PLAYER_ID;\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000, // 10 second timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add response interceptor for error handling\naxiosInstance.interceptors.response.use(\n  response => response,\n  error => {\n    console.error('API Error:', error.message);\n    if (error.response) {\n      console.error('Response data:', error.response.data);\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst api = {\n  getGame: async (): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.get(`/game/${playerId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching game state:', error);\n      throw error;\n    }\n  },\n  \n  updateGame: async (gameState: GameState): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/update`, gameState);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating game state:', error);\n      throw error;\n    }\n  },\n  \n  startSkill: async (skillId: string): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/skill/${skillId}/start`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error starting skill ${skillId}:`, error);\n      throw error;\n    }\n  },\n  \n  stopSkill: async (skillId: string): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/skill/${skillId}/stop`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error stopping skill ${skillId}:`, error);\n      throw error;\n    }\n  },\n  \n  craftItem: async (itemId: string): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/craft/${itemId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error crafting item ${itemId}:`, error);\n      throw error;\n    }\n  },\n  \n  buyItem: async (itemId: string, quantity: number): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/buy/${itemId}`, { quantity });\n      return response.data;\n    } catch (error) {\n      console.error(`Error buying item ${itemId}:`, error);\n      throw error;\n    }\n  },\n  \n  sellItem: async (itemId: string, quantity: number): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/sell/${itemId}`, { quantity });\n      return response.data;\n    } catch (error) {\n      console.error(`Error selling item ${itemId}:`, error);\n      throw error;\n    }\n  },\n  \n  startCombat: async (enemyId: string): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/combat/start/${enemyId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error starting combat with ${enemyId}:`, error);\n      throw error;\n    }\n  },\n  \n  stopCombat: async (): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/combat/stop`);\n      return response.data;\n    } catch (error) {\n      console.error('Error stopping combat:', error);\n      throw error;\n    }\n  },\n  \n  equipItem: async (itemId: string): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/equipment/equip/${itemId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error equipping item ${itemId}:`, error);\n      throw error;\n    }\n  },\n  \n  unequipItem: async (slot: 'weapon' | 'armor'): Promise<GameState> => {\n    try {\n      const playerId = getPlayerId();\n      const response = await axiosInstance.post(`/game/${playerId}/equipment/unequip/${slot}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error unequipping item from slot ${slot}:`, error);\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
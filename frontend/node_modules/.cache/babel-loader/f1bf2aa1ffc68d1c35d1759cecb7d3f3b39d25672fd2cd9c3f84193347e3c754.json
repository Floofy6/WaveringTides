{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback}from'react';import{SKILL_IDS,ITEM_IDS}from'../constants';import{createMockItems}from'../utils/mockData';import api from'../services/api';// Default empty game state to prevent undefined player errors\nimport{jsx as _jsx}from\"react/jsx-runtime\";const DEFAULT_GAME_STATE={player:{id:'',gold:0,lastUpdate:Date.now(),skills:{},inventory:{},equipment:{},combat:{isFighting:false}}};const GameContext=/*#__PURE__*/createContext(undefined);/**\n * Custom hook to access the GameContext\n */export const useGameContext=()=>{const context=useContext(GameContext);if(context===undefined){throw new Error('useGameContext must be used within a GameProvider');}return context;};/**\n * GameProvider component - Provides game state and operations to the entire app\n */export const GameProvider=_ref=>{let{children}=_ref;const[gameState,setGameState]=useState(DEFAULT_GAME_STATE);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[playerId,setPlayerId]=useState('player1');// Default player ID\n/**\n   * Load game data from API or create a new game\n   */const loadGameData=useCallback(async()=>{console.log('Loading game data...');try{setLoading(true);setError(null);// Try to load from localStorage first to get the player ID\nconst savedPlayerId=localStorage.getItem('playerId');if(savedPlayerId){setPlayerId(savedPlayerId);}// Try to fetch from API\ntry{console.log('Attempting to fetch from API...');const gameData=await api.getGame();if(gameData&&gameData.player){console.log('Game data loaded from API:',gameData);setGameState(gameData);setLoading(false);return;}else{console.error('API returned invalid game data (missing player):',gameData);}}catch(apiError){console.log('API not available, falling back to local storage',apiError);// Try to load from localStorage if API fails\nconst savedGame=localStorage.getItem('gameState');if(savedGame){try{const parsedGameState=JSON.parse(savedGame);if(parsedGameState&&parsedGameState.player){console.log('Game data loaded from localStorage:',parsedGameState);setGameState(parsedGameState);setLoading(false);return;}else{console.error('localStorage had invalid game data (missing player):',parsedGameState);localStorage.removeItem('gameState');}}catch(parseError){console.error('Error parsing saved game data:',parseError);// If parsing fails, remove corrupted data\nlocalStorage.removeItem('gameState');}}}// If no data from API or localStorage, create a new game\nconsole.log('Creating new game...');createNewGame();}catch(err){console.error('Error loading game:',err);setError('Failed to load game data. Please try again.');// Create a new game even if loading fails to prevent a blank screen\ncreateNewGame();}finally{// Ensure loading is set to false regardless of the outcome\nsetLoading(false);}},[]);/**\n   * Create a new game with default values\n   */const createNewGame=()=>{// Create mock skills\nconst mockSkills={[SKILL_IDS.WOODCUTTING]:{id:SKILL_IDS.WOODCUTTING,name:'Woodcutting',level:1,xp:0,xpPerAction:5,isActive:false,mastery:{level:1,xp:0,unlocks:{'5':'Faster woodcutting speed','10':'Double logs chance (10%)'}}},[SKILL_IDS.FISHING]:{id:SKILL_IDS.FISHING,name:'Fishing',level:1,xp:0,xpPerAction:7,isActive:false,mastery:{level:1,xp:0,unlocks:{'5':'Better fish quality','10':'Double fish chance (10%)'}}},[SKILL_IDS.MINING]:{id:SKILL_IDS.MINING,name:'Mining',level:1,xp:0,xpPerAction:6,isActive:false,mastery:{level:1,xp:0,unlocks:{}}}};// Convert ITEMS to proper Item type\nconst itemsWithProperType=createMockItems();// Create mock inventory\nconst mockInventory={[ITEM_IDS.LOGS]:{...itemsWithProperType[ITEM_IDS.LOGS],quantity:5},[ITEM_IDS.RAW_FISH]:{...itemsWithProperType[ITEM_IDS.RAW_FISH],quantity:3}};const mockData={player:{id:playerId,gold:100,lastUpdate:Date.now(),skills:mockSkills,inventory:mockInventory,equipment:{},combat:{isFighting:false}}};console.log('New game created:',mockData);setGameState(mockData);localStorage.setItem('playerId',playerId);localStorage.setItem('gameState',JSON.stringify(mockData));setLoading(false);};/**\n   * Refresh game state from API\n   */const refreshGameState=async()=>{try{setLoading(true);const gameData=await api.getGame();if(gameData&&gameData.player){setGameState(gameData);}else{console.error('API refreshGameState returned invalid game data (missing player):',gameData);// If API doesn't return a valid player, use the current state which has DEFAULT_GAME_STATE\n}}catch(err){console.error('Error refreshing game state:',err);// Don't set an error message here to avoid disrupting the UI\n}finally{setLoading(false);}};/**\n   * Initialize the game on component mount\n   */useEffect(()=>{loadGameData();// Set up autosave\nconst saveInterval=setInterval(()=>{if(gameState){saveGame();}},60000);// Save every minute\nreturn()=>clearInterval(saveInterval);},[loadGameData]);/**\n   * Update the game state\n   */const updateGameState=useCallback(updater=>{setGameState(prev=>{const newState=updater(prev);// Save immediately on state update\nlocalStorage.setItem('gameState',JSON.stringify(newState));return newState;});},[]);/**\n   * Save the game to localStorage and API\n   */const saveGame=useCallback(async()=>{try{// Update last saved timestamp\nconst stateWithTimestamp={...gameState,lastSaved:Date.now()};localStorage.setItem('gameState',JSON.stringify(stateWithTimestamp));// Try to save to API\ntry{// This is where we'd call the API to update the game state\nconsole.log('Saving game to API...');await api.updateGame(stateWithTimestamp);}catch(apiError){console.error('Error saving to API, saved locally only:',apiError);}}catch(err){console.error('Error saving game:',err);setError('Failed to save game data');}},[gameState]);/**\n   * Reset the game to default values\n   */const resetGame=useCallback(()=>{localStorage.removeItem('gameState');createNewGame();},[]);return/*#__PURE__*/_jsx(GameContext.Provider,{value:{gameState,loading,error,updateGameState,saveGame,resetGame,refreshGameState},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","SKILL_IDS","ITEM_IDS","createMockItems","api","jsx","_jsx","DEFAULT_GAME_STATE","player","id","gold","lastUpdate","Date","now","skills","inventory","equipment","combat","isFighting","GameContext","undefined","useGameContext","context","Error","GameProvider","_ref","children","gameState","setGameState","loading","setLoading","error","setError","playerId","setPlayerId","loadGameData","console","log","savedPlayerId","localStorage","getItem","gameData","getGame","apiError","savedGame","parsedGameState","JSON","parse","removeItem","parseError","createNewGame","err","mockSkills","WOODCUTTING","name","level","xp","xpPerAction","isActive","mastery","unlocks","FISHING","MINING","itemsWithProperType","mockInventory","LOGS","quantity","RAW_FISH","mockData","setItem","stringify","refreshGameState","saveInterval","setInterval","saveGame","clearInterval","updateGameState","updater","prev","newState","stateWithTimestamp","lastSaved","updateGame","resetGame","Provider","value"],"sources":["C:/Users/Domin/Desktop/coding/WaveringTides-master/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { GameState, Item, Skill } from '../types';\nimport { SKILL_IDS, ITEM_IDS } from '../constants';\nimport { createMockItems } from '../utils/mockData';\nimport api from '../services/api';\n\n// Default empty game state to prevent undefined player errors\nconst DEFAULT_GAME_STATE: GameState = {\n  player: {\n    id: '',\n    gold: 0,\n    lastUpdate: Date.now(),\n    skills: {},\n    inventory: {},\n    equipment: {},\n    combat: {\n      isFighting: false\n    }\n  }\n};\n\ninterface GameContextProps {\n  gameState: GameState;\n  loading: boolean;\n  error: string | null;\n  updateGameState: (updater: (prevState: GameState) => GameState) => void;\n  saveGame: () => void;\n  resetGame: () => void;\n  refreshGameState: () => Promise<void>;\n}\n\nconst GameContext = createContext<GameContextProps | undefined>(undefined);\n\n/**\n * Custom hook to access the GameContext\n */\nexport const useGameContext = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n\ninterface GameProviderProps {\n  children: ReactNode;\n}\n\n/**\n * GameProvider component - Provides game state and operations to the entire app\n */\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\n  const [gameState, setGameState] = useState<GameState>(DEFAULT_GAME_STATE);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [playerId, setPlayerId] = useState<string>('player1'); // Default player ID\n\n  /**\n   * Load game data from API or create a new game\n   */\n  const loadGameData = useCallback(async () => {\n    console.log('Loading game data...');\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Try to load from localStorage first to get the player ID\n      const savedPlayerId = localStorage.getItem('playerId');\n      if (savedPlayerId) {\n        setPlayerId(savedPlayerId);\n      }\n      \n      // Try to fetch from API\n      try {\n        console.log('Attempting to fetch from API...');\n        const gameData = await api.getGame();\n        if (gameData && gameData.player) {\n          console.log('Game data loaded from API:', gameData);\n          setGameState(gameData);\n          setLoading(false);\n          return;\n        } else {\n          console.error('API returned invalid game data (missing player):', gameData);\n        }\n      } catch (apiError) {\n        console.log('API not available, falling back to local storage', apiError);\n        \n        // Try to load from localStorage if API fails\n        const savedGame = localStorage.getItem('gameState');\n        if (savedGame) {\n          try {\n            const parsedGameState = JSON.parse(savedGame);\n            if (parsedGameState && parsedGameState.player) {\n              console.log('Game data loaded from localStorage:', parsedGameState);\n              setGameState(parsedGameState);\n              setLoading(false);\n              return;\n            } else {\n              console.error('localStorage had invalid game data (missing player):', parsedGameState);\n              localStorage.removeItem('gameState');\n            }\n          } catch (parseError) {\n            console.error('Error parsing saved game data:', parseError);\n            // If parsing fails, remove corrupted data\n            localStorage.removeItem('gameState');\n          }\n        }\n      }\n      \n      // If no data from API or localStorage, create a new game\n      console.log('Creating new game...');\n      createNewGame();\n    } catch (err) {\n      console.error('Error loading game:', err);\n      setError('Failed to load game data. Please try again.');\n      // Create a new game even if loading fails to prevent a blank screen\n      createNewGame();\n    } finally {\n      // Ensure loading is set to false regardless of the outcome\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Create a new game with default values\n   */\n  const createNewGame = () => {\n    // Create mock skills\n    const mockSkills: { [id: string]: Skill } = {\n      [SKILL_IDS.WOODCUTTING]: {\n        id: SKILL_IDS.WOODCUTTING,\n        name: 'Woodcutting',\n        level: 1,\n        xp: 0,\n        xpPerAction: 5,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Faster woodcutting speed',\n            '10': 'Double logs chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.FISHING]: {\n        id: SKILL_IDS.FISHING,\n        name: 'Fishing',\n        level: 1,\n        xp: 0,\n        xpPerAction: 7,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {\n            '5': 'Better fish quality',\n            '10': 'Double fish chance (10%)'\n          }\n        }\n      },\n      [SKILL_IDS.MINING]: {\n        id: SKILL_IDS.MINING,\n        name: 'Mining',\n        level: 1,\n        xp: 0,\n        xpPerAction: 6,\n        isActive: false,\n        mastery: {\n          level: 1,\n          xp: 0,\n          unlocks: {}\n        }\n      }\n    };\n\n    // Convert ITEMS to proper Item type\n    const itemsWithProperType = createMockItems();\n\n    // Create mock inventory\n    const mockInventory: { [id: string]: Item } = {\n      [ITEM_IDS.LOGS]: { ...itemsWithProperType[ITEM_IDS.LOGS], quantity: 5 },\n      [ITEM_IDS.RAW_FISH]: { ...itemsWithProperType[ITEM_IDS.RAW_FISH], quantity: 3 }\n    };\n\n    const mockData: GameState = {\n      player: {\n        id: playerId,\n        gold: 100,\n        lastUpdate: Date.now(),\n        skills: mockSkills,\n        inventory: mockInventory,\n        equipment: {},\n        combat: {\n          isFighting: false\n        }\n      }\n    };\n    \n    console.log('New game created:', mockData);\n    setGameState(mockData);\n    localStorage.setItem('playerId', playerId);\n    localStorage.setItem('gameState', JSON.stringify(mockData));\n    setLoading(false);\n  };\n\n  /**\n   * Refresh game state from API\n   */\n  const refreshGameState = async () => {\n    try {\n      setLoading(true);\n      const gameData = await api.getGame();\n      if (gameData && gameData.player) {\n        setGameState(gameData);\n      } else {\n        console.error('API refreshGameState returned invalid game data (missing player):', gameData);\n        // If API doesn't return a valid player, use the current state which has DEFAULT_GAME_STATE\n      }\n    } catch (err) {\n      console.error('Error refreshing game state:', err);\n      // Don't set an error message here to avoid disrupting the UI\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Initialize the game on component mount\n   */\n  useEffect(() => {\n    loadGameData();\n    \n    // Set up autosave\n    const saveInterval = setInterval(() => {\n      if (gameState) {\n        saveGame();\n      }\n    }, 60000); // Save every minute\n    \n    return () => clearInterval(saveInterval);\n  }, [loadGameData]);\n\n  /**\n   * Update the game state\n   */\n  const updateGameState = useCallback((updater: (prevState: GameState) => GameState) => {\n    setGameState(prev => {\n      const newState = updater(prev);\n      \n      // Save immediately on state update\n      localStorage.setItem('gameState', JSON.stringify(newState));\n      \n      return newState;\n    });\n  }, []);\n\n  /**\n   * Save the game to localStorage and API\n   */\n  const saveGame = useCallback(async () => {\n    try {\n      // Update last saved timestamp\n      const stateWithTimestamp = {\n        ...gameState,\n        lastSaved: Date.now()\n      };\n      \n      localStorage.setItem('gameState', JSON.stringify(stateWithTimestamp));\n      \n      // Try to save to API\n      try {\n        // This is where we'd call the API to update the game state\n        console.log('Saving game to API...');\n        await api.updateGame(stateWithTimestamp);\n      } catch (apiError) {\n        console.error('Error saving to API, saved locally only:', apiError);\n      }\n    } catch (err) {\n      console.error('Error saving game:', err);\n      setError('Failed to save game data');\n    }\n  }, [gameState]);\n\n  /**\n   * Reset the game to default values\n   */\n  const resetGame = useCallback(() => {\n    localStorage.removeItem('gameState');\n    createNewGame();\n  }, []);\n\n  return (\n    <GameContext.Provider \n      value={{ \n        gameState, \n        loading, \n        error,\n        updateGameState,\n        saveGame,\n        resetGame,\n        refreshGameState\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}